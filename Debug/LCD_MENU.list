
LCD_MENU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08005ae8  08005ae8  00015ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de4  08005de4  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08005de4  08005de4  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005de4  08005de4  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005de4  08005de4  00015de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005de8  08005de8  00015de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08005dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  200001f0  08005fdc  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  08005fdc  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ed1b  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002da5  00000000  00000000  0002ef77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c8  00000000  00000000  00031d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cdd  00000000  00000000  00032de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019b93  00000000  00000000  00033ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016555  00000000  00000000  0004d658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d2e2  00000000  00000000  00063bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004888  00000000  00000000  000f0e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000f5718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f0 	.word	0x200001f0
 8000128:	00000000 	.word	0x00000000
 800012c:	08005ad0 	.word	0x08005ad0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f4 	.word	0x200001f4
 8000148:	08005ad0 	.word	0x08005ad0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <buf_locate>:
char lcd_buffer[LCD_ROWS][LCD_COLS];
char 	lcd_buf_old[LCD_ROWS][LCD_COLS];

uint8_t lcd_buf_x, lcd_buf_y = 0;

void buf_locate(uint8_t x, uint8_t y) {
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	460a      	mov	r2, r1
 8000166:	71fb      	strb	r3, [r7, #7]
 8000168:	4613      	mov	r3, r2
 800016a:	71bb      	strb	r3, [r7, #6]
	lcd_buf_x = x;
 800016c:	4a05      	ldr	r2, [pc, #20]	; (8000184 <buf_locate+0x28>)
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	7013      	strb	r3, [r2, #0]
	lcd_buf_y = y;
 8000172:	4a05      	ldr	r2, [pc, #20]	; (8000188 <buf_locate+0x2c>)
 8000174:	79bb      	ldrb	r3, [r7, #6]
 8000176:	7013      	strb	r3, [r2, #0]
}
 8000178:	bf00      	nop
 800017a:	370c      	adds	r7, #12
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	2000024c 	.word	0x2000024c
 8000188:	2000024d 	.word	0x2000024d

0800018c <buf_char>:

void buf_char(char c) {
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
 8000192:	4603      	mov	r3, r0
 8000194:	71fb      	strb	r3, [r7, #7]
    if (lcd_buf_x < LCD_ROWS && lcd_buf_y < LCD_COLS) {
 8000196:	4b19      	ldr	r3, [pc, #100]	; (80001fc <buf_char+0x70>)
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	2b01      	cmp	r3, #1
 800019c:	d829      	bhi.n	80001f2 <buf_char+0x66>
 800019e:	4b18      	ldr	r3, [pc, #96]	; (8000200 <buf_char+0x74>)
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	2b0f      	cmp	r3, #15
 80001a4:	d825      	bhi.n	80001f2 <buf_char+0x66>
        lcd_buffer[lcd_buf_x][lcd_buf_y] = c;
 80001a6:	4b15      	ldr	r3, [pc, #84]	; (80001fc <buf_char+0x70>)
 80001a8:	781b      	ldrb	r3, [r3, #0]
 80001aa:	4618      	mov	r0, r3
 80001ac:	4b14      	ldr	r3, [pc, #80]	; (8000200 <buf_char+0x74>)
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	4619      	mov	r1, r3
 80001b2:	4a14      	ldr	r2, [pc, #80]	; (8000204 <buf_char+0x78>)
 80001b4:	0103      	lsls	r3, r0, #4
 80001b6:	4413      	add	r3, r2
 80001b8:	440b      	add	r3, r1
 80001ba:	79fa      	ldrb	r2, [r7, #7]
 80001bc:	701a      	strb	r2, [r3, #0]
        lcd_buf_y++;
 80001be:	4b10      	ldr	r3, [pc, #64]	; (8000200 <buf_char+0x74>)
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	3301      	adds	r3, #1
 80001c4:	b2da      	uxtb	r2, r3
 80001c6:	4b0e      	ldr	r3, [pc, #56]	; (8000200 <buf_char+0x74>)
 80001c8:	701a      	strb	r2, [r3, #0]
        if (lcd_buf_y == LCD_COLS) {
 80001ca:	4b0d      	ldr	r3, [pc, #52]	; (8000200 <buf_char+0x74>)
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	2b10      	cmp	r3, #16
 80001d0:	d10f      	bne.n	80001f2 <buf_char+0x66>
            lcd_buf_y = 0;
 80001d2:	4b0b      	ldr	r3, [pc, #44]	; (8000200 <buf_char+0x74>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	701a      	strb	r2, [r3, #0]
            lcd_buf_x++;
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <buf_char+0x70>)
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	3301      	adds	r3, #1
 80001de:	b2da      	uxtb	r2, r3
 80001e0:	4b06      	ldr	r3, [pc, #24]	; (80001fc <buf_char+0x70>)
 80001e2:	701a      	strb	r2, [r3, #0]
            if (lcd_buf_x == LCD_ROWS)
 80001e4:	4b05      	ldr	r3, [pc, #20]	; (80001fc <buf_char+0x70>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	2b02      	cmp	r3, #2
 80001ea:	d102      	bne.n	80001f2 <buf_char+0x66>
                lcd_buf_x = 0; // Satırın sonunda olduğunda sıfırla
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <buf_char+0x70>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	2000024c 	.word	0x2000024c
 8000200:	2000024d 	.word	0x2000024d
 8000204:	2000020c 	.word	0x2000020c

08000208 <buf_clear_menu>:

void buf_clear_menu() {
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
    for (uint8_t x = 1; x < LCD_ROWS; x++) {
 800020e:	2301      	movs	r3, #1
 8000210:	71fb      	strb	r3, [r7, #7]
 8000212:	e013      	b.n	800023c <buf_clear_menu+0x34>
        for (uint8_t y = 0; y < LCD_COLS; y++) {
 8000214:	2300      	movs	r3, #0
 8000216:	71bb      	strb	r3, [r7, #6]
 8000218:	e00a      	b.n	8000230 <buf_clear_menu+0x28>
            lcd_buffer[x][y] = ' ';
 800021a:	79fa      	ldrb	r2, [r7, #7]
 800021c:	79bb      	ldrb	r3, [r7, #6]
 800021e:	490e      	ldr	r1, [pc, #56]	; (8000258 <buf_clear_menu+0x50>)
 8000220:	0112      	lsls	r2, r2, #4
 8000222:	440a      	add	r2, r1
 8000224:	4413      	add	r3, r2
 8000226:	2220      	movs	r2, #32
 8000228:	701a      	strb	r2, [r3, #0]
        for (uint8_t y = 0; y < LCD_COLS; y++) {
 800022a:	79bb      	ldrb	r3, [r7, #6]
 800022c:	3301      	adds	r3, #1
 800022e:	71bb      	strb	r3, [r7, #6]
 8000230:	79bb      	ldrb	r3, [r7, #6]
 8000232:	2b0f      	cmp	r3, #15
 8000234:	d9f1      	bls.n	800021a <buf_clear_menu+0x12>
    for (uint8_t x = 1; x < LCD_ROWS; x++) {
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	3301      	adds	r3, #1
 800023a:	71fb      	strb	r3, [r7, #7]
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	2b01      	cmp	r3, #1
 8000240:	d9e8      	bls.n	8000214 <buf_clear_menu+0xc>
        }
    }
    lcd_buf_x = 0; // Satır
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <buf_clear_menu+0x54>)
 8000244:	2200      	movs	r2, #0
 8000246:	701a      	strb	r2, [r3, #0]
    lcd_buf_y = 0; // Sütun
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <buf_clear_menu+0x58>)
 800024a:	2200      	movs	r2, #0
 800024c:	701a      	strb	r2, [r3, #0]
}
 800024e:	bf00      	nop
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	2000020c 	.word	0x2000020c
 800025c:	2000024c 	.word	0x2000024c
 8000260:	2000024d 	.word	0x2000024d

08000264 <lcd_refresh>:


void lcd_refresh() { // Send LCD
 8000264:	b590      	push	{r4, r7, lr}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
    static uint8_t locate_flag = 0;

    for (uint8_t x = 0; x < LCD_ROWS; x++) {
 800026a:	2300      	movs	r3, #0
 800026c:	71fb      	strb	r3, [r7, #7]
 800026e:	e04a      	b.n	8000306 <lcd_refresh+0xa2>
        lcd_locate(x, 0); // Her satırın başına gidiyoruz
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	2100      	movs	r1, #0
 8000274:	4618      	mov	r0, r3
 8000276:	f000 f8ea 	bl	800044e <lcd_locate>

        for (uint8_t y = 0; y < LCD_COLS; y++) {
 800027a:	2300      	movs	r3, #0
 800027c:	71bb      	strb	r3, [r7, #6]
 800027e:	e03c      	b.n	80002fa <lcd_refresh+0x96>
            if (lcd_buffer[x][y] != lcd_buf_old[x][y]) {
 8000280:	79fa      	ldrb	r2, [r7, #7]
 8000282:	79bb      	ldrb	r3, [r7, #6]
 8000284:	4924      	ldr	r1, [pc, #144]	; (8000318 <lcd_refresh+0xb4>)
 8000286:	0112      	lsls	r2, r2, #4
 8000288:	440a      	add	r2, r1
 800028a:	4413      	add	r3, r2
 800028c:	781a      	ldrb	r2, [r3, #0]
 800028e:	79f9      	ldrb	r1, [r7, #7]
 8000290:	79bb      	ldrb	r3, [r7, #6]
 8000292:	4822      	ldr	r0, [pc, #136]	; (800031c <lcd_refresh+0xb8>)
 8000294:	0109      	lsls	r1, r1, #4
 8000296:	4401      	add	r1, r0
 8000298:	440b      	add	r3, r1
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	429a      	cmp	r2, r3
 800029e:	d026      	beq.n	80002ee <lcd_refresh+0x8a>
                if (!locate_flag) {
 80002a0:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <lcd_refresh+0xbc>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d105      	bne.n	80002b4 <lcd_refresh+0x50>
                    lcd_locate(x, y); // Satır ve sütunu ayarlıyoruz
 80002a8:	79ba      	ldrb	r2, [r7, #6]
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	4611      	mov	r1, r2
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 f8cd 	bl	800044e <lcd_locate>
                }
                lcd_send_data(lcd_buffer[x][y]);
 80002b4:	79fa      	ldrb	r2, [r7, #7]
 80002b6:	79bb      	ldrb	r3, [r7, #6]
 80002b8:	4917      	ldr	r1, [pc, #92]	; (8000318 <lcd_refresh+0xb4>)
 80002ba:	0112      	lsls	r2, r2, #4
 80002bc:	440a      	add	r2, r1
 80002be:	4413      	add	r3, r2
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 f91a 	bl	80004fc <lcd_send_data>
                lcd_buf_old[x][y] = lcd_buffer[x][y];
 80002c8:	79f8      	ldrb	r0, [r7, #7]
 80002ca:	79b9      	ldrb	r1, [r7, #6]
 80002cc:	79fa      	ldrb	r2, [r7, #7]
 80002ce:	79bb      	ldrb	r3, [r7, #6]
 80002d0:	4c11      	ldr	r4, [pc, #68]	; (8000318 <lcd_refresh+0xb4>)
 80002d2:	0100      	lsls	r0, r0, #4
 80002d4:	4420      	add	r0, r4
 80002d6:	4401      	add	r1, r0
 80002d8:	7808      	ldrb	r0, [r1, #0]
 80002da:	4910      	ldr	r1, [pc, #64]	; (800031c <lcd_refresh+0xb8>)
 80002dc:	0112      	lsls	r2, r2, #4
 80002de:	440a      	add	r2, r1
 80002e0:	4413      	add	r3, r2
 80002e2:	4602      	mov	r2, r0
 80002e4:	701a      	strb	r2, [r3, #0]
                locate_flag = 1;
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <lcd_refresh+0xbc>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	701a      	strb	r2, [r3, #0]
 80002ec:	e002      	b.n	80002f4 <lcd_refresh+0x90>
            } else {
                locate_flag = 0;
 80002ee:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <lcd_refresh+0xbc>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	701a      	strb	r2, [r3, #0]
        for (uint8_t y = 0; y < LCD_COLS; y++) {
 80002f4:	79bb      	ldrb	r3, [r7, #6]
 80002f6:	3301      	adds	r3, #1
 80002f8:	71bb      	strb	r3, [r7, #6]
 80002fa:	79bb      	ldrb	r3, [r7, #6]
 80002fc:	2b0f      	cmp	r3, #15
 80002fe:	d9bf      	bls.n	8000280 <lcd_refresh+0x1c>
    for (uint8_t x = 0; x < LCD_ROWS; x++) {
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	3301      	adds	r3, #1
 8000304:	71fb      	strb	r3, [r7, #7]
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d9b1      	bls.n	8000270 <lcd_refresh+0xc>
            }
        }
    }
}
 800030c:	bf00      	nop
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	bd90      	pop	{r4, r7, pc}
 8000316:	bf00      	nop
 8000318:	2000020c 	.word	0x2000020c
 800031c:	2000022c 	.word	0x2000022c
 8000320:	2000024e 	.word	0x2000024e

08000324 <buf_clear>:

void buf_clear() {
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
    for (uint8_t x = 0; x < LCD_ROWS; x++) {
 800032a:	2300      	movs	r3, #0
 800032c:	71fb      	strb	r3, [r7, #7]
 800032e:	e013      	b.n	8000358 <buf_clear+0x34>
        for (uint8_t y = 0; y < LCD_COLS; y++) {
 8000330:	2300      	movs	r3, #0
 8000332:	71bb      	strb	r3, [r7, #6]
 8000334:	e00a      	b.n	800034c <buf_clear+0x28>
            lcd_buffer[x][y] = ' ';
 8000336:	79fa      	ldrb	r2, [r7, #7]
 8000338:	79bb      	ldrb	r3, [r7, #6]
 800033a:	490e      	ldr	r1, [pc, #56]	; (8000374 <buf_clear+0x50>)
 800033c:	0112      	lsls	r2, r2, #4
 800033e:	440a      	add	r2, r1
 8000340:	4413      	add	r3, r2
 8000342:	2220      	movs	r2, #32
 8000344:	701a      	strb	r2, [r3, #0]
        for (uint8_t y = 0; y < LCD_COLS; y++) {
 8000346:	79bb      	ldrb	r3, [r7, #6]
 8000348:	3301      	adds	r3, #1
 800034a:	71bb      	strb	r3, [r7, #6]
 800034c:	79bb      	ldrb	r3, [r7, #6]
 800034e:	2b0f      	cmp	r3, #15
 8000350:	d9f1      	bls.n	8000336 <buf_clear+0x12>
    for (uint8_t x = 0; x < LCD_ROWS; x++) {
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	3301      	adds	r3, #1
 8000356:	71fb      	strb	r3, [r7, #7]
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d9e8      	bls.n	8000330 <buf_clear+0xc>
        }
    }
    lcd_buf_x = 0;
 800035e:	4b06      	ldr	r3, [pc, #24]	; (8000378 <buf_clear+0x54>)
 8000360:	2200      	movs	r2, #0
 8000362:	701a      	strb	r2, [r3, #0]
    lcd_buf_y = 0;
 8000364:	4b05      	ldr	r3, [pc, #20]	; (800037c <buf_clear+0x58>)
 8000366:	2200      	movs	r2, #0
 8000368:	701a      	strb	r2, [r3, #0]
}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr
 8000374:	2000020c 	.word	0x2000020c
 8000378:	2000024c 	.word	0x2000024c
 800037c:	2000024d 	.word	0x2000024d

08000380 <buf_str_XY>:


void buf_str_XY(uint8_t x, uint8_t y, char *text) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	603a      	str	r2, [r7, #0]
 800038a:	71fb      	strb	r3, [r7, #7]
 800038c:	460b      	mov	r3, r1
 800038e:	71bb      	strb	r3, [r7, #6]
	buf_locate(x, y);
 8000390:	79ba      	ldrb	r2, [r7, #6]
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	4611      	mov	r1, r2
 8000396:	4618      	mov	r0, r3
 8000398:	f7ff fee0 	bl	800015c <buf_locate>

	while (*text)
 800039c:	e006      	b.n	80003ac <buf_str_XY+0x2c>
		buf_char(*text++);
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	1c5a      	adds	r2, r3, #1
 80003a2:	603a      	str	r2, [r7, #0]
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff fef0 	bl	800018c <buf_char>
	while (*text)
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d1f4      	bne.n	800039e <buf_str_XY+0x1e>

}
 80003b4:	bf00      	nop
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <buf_str>:


void buf_str(char *text) {
 80003be:	b580      	push	{r7, lr}
 80003c0:	b082      	sub	sp, #8
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]

	while (*text)
 80003c6:	e006      	b.n	80003d6 <buf_str+0x18>
		buf_char(*text++);
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	1c5a      	adds	r2, r3, #1
 80003cc:	607a      	str	r2, [r7, #4]
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff fedb 	bl	800018c <buf_char>
	while (*text)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d1f4      	bne.n	80003c8 <buf_str+0xa>
}
 80003de:	bf00      	nop
 80003e0:	bf00      	nop
 80003e2:	3708      	adds	r7, #8
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <buf_int>:

void buf_int(uint8_t value) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]

	char string[5];
	itoa(value, string, 10);
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	f107 0108 	add.w	r1, r7, #8
 80003f8:	220a      	movs	r2, #10
 80003fa:	4618      	mov	r0, r3
 80003fc:	f004 fe72 	bl	80050e4 <itoa>
	buf_str(string);
 8000400:	f107 0308 	add.w	r3, r7, #8
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ffda 	bl	80003be <buf_str>

}
 800040a:	bf00      	nop
 800040c:	3710      	adds	r7, #16
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <delay>:
#include <stdio.h>
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void delay(uint32_t milliseconds) {
 8000412:	b480      	push	{r7}
 8000414:	b085      	sub	sp, #20
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
    volatile uint32_t i, j; // Volatile değişkenler optimizasyon tarafından atlanmaz

    for (i = 0; i < milliseconds; i++) {
 800041a:	2300      	movs	r3, #0
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	e00c      	b.n	800043a <delay+0x28>
        for (j = 0; j < 2000; j++) {
 8000420:	2300      	movs	r3, #0
 8000422:	60bb      	str	r3, [r7, #8]
 8000424:	e002      	b.n	800042c <delay+0x1a>
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	3301      	adds	r3, #1
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000432:	d3f8      	bcc.n	8000426 <delay+0x14>
    for (i = 0; i < milliseconds; i++) {
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	3301      	adds	r3, #1
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	429a      	cmp	r2, r3
 8000440:	d8ee      	bhi.n	8000420 <delay+0xe>
            // Boş döngü, işlemcinin bir döngü sürdüğü süreyi temsil eder
        }
    }
}
 8000442:	bf00      	nop
 8000444:	bf00      	nop
 8000446:	3714      	adds	r7, #20
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr

0800044e <lcd_locate>:

void lcd_locate(uint8_t x, uint8_t y) {
 800044e:	b580      	push	{r7, lr}
 8000450:	b082      	sub	sp, #8
 8000452:	af00      	add	r7, sp, #0
 8000454:	4603      	mov	r3, r0
 8000456:	460a      	mov	r2, r1
 8000458:	71fb      	strb	r3, [r7, #7]
 800045a:	4613      	mov	r3, r2
 800045c:	71bb      	strb	r3, [r7, #6]

	switch (x) {
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d002      	beq.n	800046a <lcd_locate+0x1c>
 8000464:	2b01      	cmp	r3, #1
 8000466:	d008      	beq.n	800047a <lcd_locate+0x2c>
	case 1:
		lcd_send_cmd( LCDC_SET_DDRAM | (LCD_LINE2 + y));
		break;
	}

}
 8000468:	e013      	b.n	8000492 <lcd_locate+0x44>
		lcd_send_cmd( LCDC_SET_DDRAM | (LCD_LINE1 + y));
 800046a:	79bb      	ldrb	r3, [r7, #6]
 800046c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000470:	b2db      	uxtb	r3, r3
 8000472:	4618      	mov	r0, r3
 8000474:	f000 f812 	bl	800049c <lcd_send_cmd>
		break;
 8000478:	e00b      	b.n	8000492 <lcd_locate+0x44>
		lcd_send_cmd( LCDC_SET_DDRAM | (LCD_LINE2 + y));
 800047a:	79bb      	ldrb	r3, [r7, #6]
 800047c:	3340      	adds	r3, #64	; 0x40
 800047e:	b2db      	uxtb	r3, r3
 8000480:	b25b      	sxtb	r3, r3
 8000482:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000486:	b25b      	sxtb	r3, r3
 8000488:	b2db      	uxtb	r3, r3
 800048a:	4618      	mov	r0, r3
 800048c:	f000 f806 	bl	800049c <lcd_send_cmd>
		break;
 8000490:	bf00      	nop
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
	...

0800049c <lcd_send_cmd>:

void lcd_send_cmd(char cmd) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b086      	sub	sp, #24
 80004a0:	af02      	add	r7, sp, #8
 80004a2:	4603      	mov	r3, r0
 80004a4:	71fb      	strb	r3, [r7, #7]

	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	f023 030f 	bic.w	r3, r3, #15
 80004ac:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	011b      	lsls	r3, r3, #4
 80004b2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  //en=1, rs=0
 80004b4:	7bfb      	ldrb	r3, [r7, #15]
 80004b6:	f043 030c 	orr.w	r3, r3, #12
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //en=0, rs=0
 80004be:	7bfb      	ldrb	r3, [r7, #15]
 80004c0:	f043 0308 	orr.w	r3, r3, #8
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //en=1, rs=0
 80004c8:	7bbb      	ldrb	r3, [r7, #14]
 80004ca:	f043 030c 	orr.w	r3, r3, #12
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //en=0, rs=0
 80004d2:	7bbb      	ldrb	r3, [r7, #14]
 80004d4:	f043 0308 	orr.w	r3, r3, #8
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4, 100);
 80004dc:	f107 0208 	add.w	r2, r7, #8
 80004e0:	2364      	movs	r3, #100	; 0x64
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	2304      	movs	r3, #4
 80004e6:	214e      	movs	r1, #78	; 0x4e
 80004e8:	4803      	ldr	r0, [pc, #12]	; (80004f8 <lcd_send_cmd+0x5c>)
 80004ea:	f002 f82b 	bl	8002544 <HAL_I2C_Master_Transmit>

}
 80004ee:	bf00      	nop
 80004f0:	3710      	adds	r7, #16
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	200002a4 	.word	0x200002a4

080004fc <lcd_send_data>:

void lcd_send_data(char data) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af02      	add	r7, sp, #8
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]

	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	f023 030f 	bic.w	r3, r3, #15
 800050c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	011b      	lsls	r3, r3, #4
 8000512:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  //en=1, rs=0
 8000514:	7bfb      	ldrb	r3, [r7, #15]
 8000516:	f043 030d 	orr.w	r3, r3, #13
 800051a:	b2db      	uxtb	r3, r3
 800051c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //en=0, rs=0
 800051e:	7bfb      	ldrb	r3, [r7, #15]
 8000520:	f043 0309 	orr.w	r3, r3, #9
 8000524:	b2db      	uxtb	r3, r3
 8000526:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //en=1, rs=0
 8000528:	7bbb      	ldrb	r3, [r7, #14]
 800052a:	f043 030d 	orr.w	r3, r3, #13
 800052e:	b2db      	uxtb	r3, r3
 8000530:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //en=0, rs=0
 8000532:	7bbb      	ldrb	r3, [r7, #14]
 8000534:	f043 0309 	orr.w	r3, r3, #9
 8000538:	b2db      	uxtb	r3, r3
 800053a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4, 100);
 800053c:	f107 0208 	add.w	r2, r7, #8
 8000540:	2364      	movs	r3, #100	; 0x64
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	2304      	movs	r3, #4
 8000546:	214e      	movs	r1, #78	; 0x4e
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <lcd_send_data+0x5c>)
 800054a:	f001 fffb 	bl	8002544 <HAL_I2C_Master_Transmit>

}
 800054e:	bf00      	nop
 8000550:	3710      	adds	r7, #16
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	200002a4 	.word	0x200002a4

0800055c <lcd_init>:
	}

	lcd_send_cmd(col);
}

void lcd_init(void) {
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	// 4 bit initialisation

	delay(60);  // wait for >40ms
 8000560:	203c      	movs	r0, #60	; 0x3c
 8000562:	f7ff ff56 	bl	8000412 <delay>
	lcd_send_cmd(0x30);
 8000566:	2030      	movs	r0, #48	; 0x30
 8000568:	f7ff ff98 	bl	800049c <lcd_send_cmd>
	delay(5);  // wait for >4.1ms
 800056c:	2005      	movs	r0, #5
 800056e:	f7ff ff50 	bl	8000412 <delay>
	lcd_send_cmd(0x30);
 8000572:	2030      	movs	r0, #48	; 0x30
 8000574:	f7ff ff92 	bl	800049c <lcd_send_cmd>

	delay(1);  // wait for >100us
 8000578:	2001      	movs	r0, #1
 800057a:	f7ff ff4a 	bl	8000412 <delay>
	lcd_send_cmd(0x30);
 800057e:	2030      	movs	r0, #48	; 0x30
 8000580:	f7ff ff8c 	bl	800049c <lcd_send_cmd>
	delay(10);
 8000584:	200a      	movs	r0, #10
 8000586:	f7ff ff44 	bl	8000412 <delay>
	lcd_send_cmd(0x20);  // 4bit mode
 800058a:	2020      	movs	r0, #32
 800058c:	f7ff ff86 	bl	800049c <lcd_send_cmd>

	delay(50);
 8000590:	2032      	movs	r0, #50	; 0x32
 8000592:	f7ff ff3e 	bl	8000412 <delay>

	// dislay initialisation
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000596:	2028      	movs	r0, #40	; 0x28
 8000598:	f7ff ff80 	bl	800049c <lcd_send_cmd>
	delay(1);
 800059c:	2001      	movs	r0, #1
 800059e:	f7ff ff38 	bl	8000412 <delay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80005a2:	2008      	movs	r0, #8
 80005a4:	f7ff ff7a 	bl	800049c <lcd_send_cmd>
	delay(1);
 80005a8:	2001      	movs	r0, #1
 80005aa:	f7ff ff32 	bl	8000412 <delay>
	lcd_send_cmd(0x01);  // clear display
 80005ae:	2001      	movs	r0, #1
 80005b0:	f7ff ff74 	bl	800049c <lcd_send_cmd>
	delay(1);
 80005b4:	2001      	movs	r0, #1
 80005b6:	f7ff ff2c 	bl	8000412 <delay>
	delay(1);
 80005ba:	2001      	movs	r0, #1
 80005bc:	f7ff ff29 	bl	8000412 <delay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80005c0:	2006      	movs	r0, #6
 80005c2:	f7ff ff6b 	bl	800049c <lcd_send_cmd>
	delay(1);
 80005c6:	2001      	movs	r0, #1
 80005c8:	f7ff ff23 	bl	8000412 <delay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80005cc:	200c      	movs	r0, #12
 80005ce:	f7ff ff65 	bl	800049c <lcd_send_cmd>
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <disp_brightness_next>:
extern char lcd_buffer[LCD_ROWS][LCD_COLS];

extern menu_t *temp;
extern menu_t *currentPointer; // baslangicta ilk menuden baslar

void disp_brightness_next() {
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

	if (TIM4->CCR3 < 65000){
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <disp_brightness_next+0x28>)
 80005de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005e0:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d806      	bhi.n	80005f6 <disp_brightness_next+0x1e>
		TIM4->CCR3 += 6500;
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <disp_brightness_next+0x28>)
 80005ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <disp_brightness_next+0x28>)
 80005ee:	f503 53cb 	add.w	r3, r3, #6496	; 0x1960
 80005f2:	3304      	adds	r3, #4
 80005f4:	63d3      	str	r3, [r2, #60]	; 0x3c
	}

	disp_brightness_refresh();
 80005f6:	f000 f83d 	bl	8000674 <disp_brightness_refresh>

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40000800 	.word	0x40000800

08000604 <disp_brightness_prev>:

void disp_brightness_prev() {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0

	if (TIM4->CCR3 >= 6500){
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <disp_brightness_prev+0x28>)
 800060a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800060c:	f641 1263 	movw	r2, #6499	; 0x1963
 8000610:	4293      	cmp	r3, r2
 8000612:	d906      	bls.n	8000622 <disp_brightness_prev+0x1e>
		TIM4->CCR3 -= 6500;
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <disp_brightness_prev+0x28>)
 8000616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <disp_brightness_prev+0x28>)
 800061a:	f5a3 53cb 	sub.w	r3, r3, #6496	; 0x1960
 800061e:	3b04      	subs	r3, #4
 8000620:	63d3      	str	r3, [r2, #60]	; 0x3c
	}

	disp_brightness_refresh();
 8000622:	f000 f827 	bl	8000674 <disp_brightness_refresh>

}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40000800 	.word	0x40000800

08000630 <disp_brightness_back>:

void disp_brightness_back() {
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0

	key_next_func = menu_next;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <disp_brightness_back+0x24>)
 8000636:	4a08      	ldr	r2, [pc, #32]	; (8000658 <disp_brightness_back+0x28>)
 8000638:	601a      	str	r2, [r3, #0]
	key_prev_func = menu_prev;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <disp_brightness_back+0x2c>)
 800063c:	4a08      	ldr	r2, [pc, #32]	; (8000660 <disp_brightness_back+0x30>)
 800063e:	601a      	str	r2, [r3, #0]
	key_enter_func = menu_enter;
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <disp_brightness_back+0x34>)
 8000642:	4a09      	ldr	r2, [pc, #36]	; (8000668 <disp_brightness_back+0x38>)
 8000644:	601a      	str	r2, [r3, #0]
	key_back_func = menu_back;
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <disp_brightness_back+0x3c>)
 8000648:	4a09      	ldr	r2, [pc, #36]	; (8000670 <disp_brightness_back+0x40>)
 800064a:	601a      	str	r2, [r3, #0]

	menu_refresh();
 800064c:	f000 fb02 	bl	8000c54 <menu_refresh>

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000184 	.word	0x20000184
 8000658:	08000e29 	.word	0x08000e29
 800065c:	20000188 	.word	0x20000188
 8000660:	08000e91 	.word	0x08000e91
 8000664:	2000018c 	.word	0x2000018c
 8000668:	08000f1d 	.word	0x08000f1d
 800066c:	20000190 	.word	0x20000190
 8000670:	08000f99 	.word	0x08000f99

08000674 <disp_brightness_refresh>:

void disp_brightness_refresh() {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0

	uint8_t percent = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	71fb      	strb	r3, [r7, #7]

	percent = (TIM4->CCR3) / 650;
 800067e:	4b26      	ldr	r3, [pc, #152]	; (8000718 <disp_brightness_refresh+0xa4>)
 8000680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000682:	4a26      	ldr	r2, [pc, #152]	; (800071c <disp_brightness_refresh+0xa8>)
 8000684:	fba2 2303 	umull	r2, r3, r2, r3
 8000688:	0a5b      	lsrs	r3, r3, #9
 800068a:	71fb      	strb	r3, [r7, #7]
	if (percent < 11) {
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	2b0a      	cmp	r3, #10
 8000690:	d805      	bhi.n	800069e <disp_brightness_refresh+0x2a>
		TIM4->CCR3 = 6500;
 8000692:	4b21      	ldr	r3, [pc, #132]	; (8000718 <disp_brightness_refresh+0xa4>)
 8000694:	f641 1264 	movw	r2, #6500	; 0x1964
 8000698:	63da      	str	r2, [r3, #60]	; 0x3c
		percent = 10;
 800069a:	230a      	movs	r3, #10
 800069c:	71fb      	strb	r3, [r7, #7]
	}
	if (percent > 100) {
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	2b64      	cmp	r3, #100	; 0x64
 80006a2:	d904      	bls.n	80006ae <disp_brightness_refresh+0x3a>
		TIM4->CCR3 = 100;
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <disp_brightness_refresh+0xa4>)
 80006a6:	2264      	movs	r2, #100	; 0x64
 80006a8:	63da      	str	r2, [r3, #60]	; 0x3c
		percent = 100;
 80006aa:	2364      	movs	r3, #100	; 0x64
 80006ac:	71fb      	strb	r3, [r7, #7]
	}

	buf_clear_menu(); // bufferı temizle
 80006ae:	f7ff fdab 	bl	8000208 <buf_clear_menu>
	buf_locate(0, 3);
 80006b2:	2103      	movs	r1, #3
 80006b4:	2000      	movs	r0, #0
 80006b6:	f7ff fd51 	bl	800015c <buf_locate>
	buf_str(currentPointer->name); //BRIGHTNESS
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <disp_brightness_refresh+0xac>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff fe7c 	bl	80003be <buf_str>

	// Satır 1'de dolu olması gereken sütunları doldur
	for (uint8_t y = 5; y < (percent / 10) + 5; y++) {
 80006c6:	2305      	movs	r3, #5
 80006c8:	71bb      	strb	r3, [r7, #6]
 80006ca:	e007      	b.n	80006dc <disp_brightness_refresh+0x68>
		lcd_buffer[1][y] = 255; // 255 dolu karakteri temsil ediyor, bunu ekranınıza göre ayarlayabilirsiniz
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	4a15      	ldr	r2, [pc, #84]	; (8000724 <disp_brightness_refresh+0xb0>)
 80006d0:	4413      	add	r3, r2
 80006d2:	22ff      	movs	r2, #255	; 0xff
 80006d4:	741a      	strb	r2, [r3, #16]
	for (uint8_t y = 5; y < (percent / 10) + 5; y++) {
 80006d6:	79bb      	ldrb	r3, [r7, #6]
 80006d8:	3301      	adds	r3, #1
 80006da:	71bb      	strb	r3, [r7, #6]
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	4a12      	ldr	r2, [pc, #72]	; (8000728 <disp_brightness_refresh+0xb4>)
 80006e0:	fba2 2303 	umull	r2, r3, r2, r3
 80006e4:	08db      	lsrs	r3, r3, #3
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	1d1a      	adds	r2, r3, #4
 80006ea:	79bb      	ldrb	r3, [r7, #6]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	daed      	bge.n	80006cc <disp_brightness_refresh+0x58>
	}

	// Yüzde sembolü ve yüzdelik değeri ekle
	buf_locate(1, 0);
 80006f0:	2100      	movs	r1, #0
 80006f2:	2001      	movs	r0, #1
 80006f4:	f7ff fd32 	bl	800015c <buf_locate>
	buf_str("%");
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <disp_brightness_refresh+0xb8>)
 80006fa:	f7ff fe60 	bl	80003be <buf_str>
	buf_locate(1, 1);
 80006fe:	2101      	movs	r1, #1
 8000700:	2001      	movs	r0, #1
 8000702:	f7ff fd2b 	bl	800015c <buf_locate>
	buf_int(percent);
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff fe6d 	bl	80003e8 <buf_int>

}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40000800 	.word	0x40000800
 800071c:	c9a633fd 	.word	0xc9a633fd
 8000720:	20000180 	.word	0x20000180
 8000724:	2000020c 	.word	0x2000020c
 8000728:	cccccccd 	.word	0xcccccccd
 800072c:	08005ae8 	.word	0x08005ae8

08000730 <disp_brightness_callback>:

void disp_brightness_callback() {
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

	key_next_func = disp_brightness_next;
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <disp_brightness_callback+0x24>)
 8000736:	4a08      	ldr	r2, [pc, #32]	; (8000758 <disp_brightness_callback+0x28>)
 8000738:	601a      	str	r2, [r3, #0]
	key_prev_func = disp_brightness_prev;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <disp_brightness_callback+0x2c>)
 800073c:	4a08      	ldr	r2, [pc, #32]	; (8000760 <disp_brightness_callback+0x30>)
 800073e:	601a      	str	r2, [r3, #0]
	key_enter_func = NULL;
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <disp_brightness_callback+0x34>)
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
	key_back_func = disp_brightness_back;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <disp_brightness_callback+0x38>)
 8000748:	4a08      	ldr	r2, [pc, #32]	; (800076c <disp_brightness_callback+0x3c>)
 800074a:	601a      	str	r2, [r3, #0]

	disp_brightness_refresh();
 800074c:	f7ff ff92 	bl	8000674 <disp_brightness_refresh>

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000184 	.word	0x20000184
 8000758:	080005d9 	.word	0x080005d9
 800075c:	20000188 	.word	0x20000188
 8000760:	08000605 	.word	0x08000605
 8000764:	2000018c 	.word	0x2000018c
 8000768:	20000190 	.word	0x20000190
 800076c:	08000631 	.word	0x08000631

08000770 <default_settings>:


extern menu_t *temp;
extern menu_t *currentPointer; // baslangicta ilk menuden baslar

void default_settings(){
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

	english_language();
 8000774:	f000 f906 	bl	8000984 <english_language>
	TIM4->CCR3 = 65000;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <default_settings+0x24>)
 800077a:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800077e:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000780:	2201      	movs	r2, #1
 8000782:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000786:	4804      	ldr	r0, [pc, #16]	; (8000798 <default_settings+0x28>)
 8000788:	f001 fd7f 	bl	800228a <HAL_GPIO_WritePin>
	default_refresh();
 800078c:	f000 f828 	bl	80007e0 <default_refresh>
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40000800 	.word	0x40000800
 8000798:	40010c00 	.word	0x40010c00

0800079c <default_back>:

void default_back(){
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0

	key_next_func = menu_next;
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <default_back+0x24>)
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <default_back+0x28>)
 80007a4:	601a      	str	r2, [r3, #0]
	key_prev_func = menu_prev;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <default_back+0x2c>)
 80007a8:	4a08      	ldr	r2, [pc, #32]	; (80007cc <default_back+0x30>)
 80007aa:	601a      	str	r2, [r3, #0]
	key_enter_func = menu_enter;
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <default_back+0x34>)
 80007ae:	4a09      	ldr	r2, [pc, #36]	; (80007d4 <default_back+0x38>)
 80007b0:	601a      	str	r2, [r3, #0]
	key_back_func = menu_back;
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <default_back+0x3c>)
 80007b4:	4a09      	ldr	r2, [pc, #36]	; (80007dc <default_back+0x40>)
 80007b6:	601a      	str	r2, [r3, #0]

	menu_refresh();
 80007b8:	f000 fa4c 	bl	8000c54 <menu_refresh>

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000184 	.word	0x20000184
 80007c4:	08000e29 	.word	0x08000e29
 80007c8:	20000188 	.word	0x20000188
 80007cc:	08000e91 	.word	0x08000e91
 80007d0:	2000018c 	.word	0x2000018c
 80007d4:	08000f1d 	.word	0x08000f1d
 80007d8:	20000190 	.word	0x20000190
 80007dc:	08000f99 	.word	0x08000f99

080007e0 <default_refresh>:

void default_refresh(){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0

	buf_clear();
 80007e4:	f7ff fd9e 	bl	8000324 <buf_clear>
	buf_locate(0, 0);
 80007e8:	2100      	movs	r1, #0
 80007ea:	2000      	movs	r0, #0
 80007ec:	f7ff fcb6 	bl	800015c <buf_locate>
	buf_str("Factory Set");
 80007f0:	4802      	ldr	r0, [pc, #8]	; (80007fc <default_refresh+0x1c>)
 80007f2:	f7ff fde4 	bl	80003be <buf_str>


}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	08005aec 	.word	0x08005aec

08000800 <default_callback>:

void default_callback(){
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

	key_next_func = NULL;
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <default_callback+0x28>)
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
	key_prev_func = NULL;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <default_callback+0x2c>)
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
	key_enter_func = NULL;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <default_callback+0x30>)
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
	key_back_func = default_back;
 8000816:	4b07      	ldr	r3, [pc, #28]	; (8000834 <default_callback+0x34>)
 8000818:	4a07      	ldr	r2, [pc, #28]	; (8000838 <default_callback+0x38>)
 800081a:	601a      	str	r2, [r3, #0]
	default_settings();
 800081c:	f7ff ffa8 	bl	8000770 <default_settings>
	default_refresh();
 8000820:	f7ff ffde 	bl	80007e0 <default_refresh>

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000184 	.word	0x20000184
 800082c:	20000188 	.word	0x20000188
 8000830:	2000018c 	.word	0x2000018c
 8000834:	20000190 	.word	0x20000190
 8000838:	0800079d 	.word	0x0800079d

0800083c <turkish_language>:

extern menu_t menu6;

extern menu_t *currentPointer; // baslangicta ilk menuden baslar

void turkish_language() {
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0

	menu1.name = "GOSTERGE";
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <turkish_language+0x6c>)
 8000842:	4a1a      	ldr	r2, [pc, #104]	; (80008ac <turkish_language+0x70>)
 8000844:	601a      	str	r2, [r3, #0]
		sub_menu1_1.name = "KONTRAST";
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <turkish_language+0x74>)
 8000848:	4a1a      	ldr	r2, [pc, #104]	; (80008b4 <turkish_language+0x78>)
 800084a:	601a      	str	r2, [r3, #0]
			sub_menu1_1_1.name = "TEST";
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <turkish_language+0x7c>)
 800084e:	4a1b      	ldr	r2, [pc, #108]	; (80008bc <turkish_language+0x80>)
 8000850:	601a      	str	r2, [r3, #0]
		sub_menu1_2.name = "PARLAKLIK";
 8000852:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <turkish_language+0x84>)
 8000854:	4a1b      	ldr	r2, [pc, #108]	; (80008c4 <turkish_language+0x88>)
 8000856:	601a      	str	r2, [r3, #0]
			sub_menu1_2_1.name = "Seviye";
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <turkish_language+0x8c>)
 800085a:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <turkish_language+0x90>)
 800085c:	601a      	str	r2, [r3, #0]

	menu2.name = "UART";
 800085e:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <turkish_language+0x94>)
 8000860:	4a1c      	ldr	r2, [pc, #112]	; (80008d4 <turkish_language+0x98>)
 8000862:	601a      	str	r2, [r3, #0]
		sub_menu2_1.name = "BAUD HIZI";
 8000864:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <turkish_language+0x9c>)
 8000866:	4a1d      	ldr	r2, [pc, #116]	; (80008dc <turkish_language+0xa0>)
 8000868:	601a      	str	r2, [r3, #0]
		sub_menu2_2.name = "VERI BITLERI";
 800086a:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <turkish_language+0xa4>)
 800086c:	4a1d      	ldr	r2, [pc, #116]	; (80008e4 <turkish_language+0xa8>)
 800086e:	601a      	str	r2, [r3, #0]
			sub_menu2_2_1.name = "DURDURMA BITI";
 8000870:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <turkish_language+0xac>)
 8000872:	4a1e      	ldr	r2, [pc, #120]	; (80008ec <turkish_language+0xb0>)
 8000874:	601a      	str	r2, [r3, #0]
			sub_menu2_2_2.name = "Parity BITI";
 8000876:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <turkish_language+0xb4>)
 8000878:	4a1e      	ldr	r2, [pc, #120]	; (80008f4 <turkish_language+0xb8>)
 800087a:	601a      	str	r2, [r3, #0]

	menu3.name = "LED YAKMA";
 800087c:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <turkish_language+0xbc>)
 800087e:	4a1f      	ldr	r2, [pc, #124]	; (80008fc <turkish_language+0xc0>)
 8000880:	601a      	str	r2, [r3, #0]
	menu4.name = "ZAMAN";
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <turkish_language+0xc4>)
 8000884:	4a1f      	ldr	r2, [pc, #124]	; (8000904 <turkish_language+0xc8>)
 8000886:	601a      	str	r2, [r3, #0]
	menu5.name = "DIL";
 8000888:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <turkish_language+0xcc>)
 800088a:	4a20      	ldr	r2, [pc, #128]	; (800090c <turkish_language+0xd0>)
 800088c:	601a      	str	r2, [r3, #0]
		sub_menu5_1.name = "TURKCE";
 800088e:	4b20      	ldr	r3, [pc, #128]	; (8000910 <turkish_language+0xd4>)
 8000890:	4a20      	ldr	r2, [pc, #128]	; (8000914 <turkish_language+0xd8>)
 8000892:	601a      	str	r2, [r3, #0]
		sub_menu5_2.name = "INGILIZCE";
 8000894:	4b20      	ldr	r3, [pc, #128]	; (8000918 <turkish_language+0xdc>)
 8000896:	4a21      	ldr	r2, [pc, #132]	; (800091c <turkish_language+0xe0>)
 8000898:	601a      	str	r2, [r3, #0]

		menu6.name = "FABRIKA AYARI";
 800089a:	4b21      	ldr	r3, [pc, #132]	; (8000920 <turkish_language+0xe4>)
 800089c:	4a21      	ldr	r2, [pc, #132]	; (8000924 <turkish_language+0xe8>)
 800089e:	601a      	str	r2, [r3, #0]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	20000000 	.word	0x20000000
 80008ac:	08005af8 	.word	0x08005af8
 80008b0:	20000018 	.word	0x20000018
 80008b4:	08005b04 	.word	0x08005b04
 80008b8:	20000030 	.word	0x20000030
 80008bc:	08005b10 	.word	0x08005b10
 80008c0:	20000060 	.word	0x20000060
 80008c4:	08005b18 	.word	0x08005b18
 80008c8:	20000048 	.word	0x20000048
 80008cc:	08005b24 	.word	0x08005b24
 80008d0:	20000078 	.word	0x20000078
 80008d4:	08005b2c 	.word	0x08005b2c
 80008d8:	20000090 	.word	0x20000090
 80008dc:	08005b34 	.word	0x08005b34
 80008e0:	200000a8 	.word	0x200000a8
 80008e4:	08005b40 	.word	0x08005b40
 80008e8:	200000c0 	.word	0x200000c0
 80008ec:	08005b50 	.word	0x08005b50
 80008f0:	200000d8 	.word	0x200000d8
 80008f4:	08005b60 	.word	0x08005b60
 80008f8:	200000f0 	.word	0x200000f0
 80008fc:	08005b6c 	.word	0x08005b6c
 8000900:	20000108 	.word	0x20000108
 8000904:	08005b78 	.word	0x08005b78
 8000908:	20000120 	.word	0x20000120
 800090c:	08005b80 	.word	0x08005b80
 8000910:	20000138 	.word	0x20000138
 8000914:	08005b84 	.word	0x08005b84
 8000918:	20000150 	.word	0x20000150
 800091c:	08005b8c 	.word	0x08005b8c
 8000920:	20000168 	.word	0x20000168
 8000924:	08005b98 	.word	0x08005b98

08000928 <turkish_language_refresh>:

void turkish_language_refresh() {
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0

	buf_clear();
 800092c:	f7ff fcfa 	bl	8000324 <buf_clear>
	buf_locate(1, 0);
 8000930:	2100      	movs	r1, #0
 8000932:	2001      	movs	r0, #1
 8000934:	f7ff fc12 	bl	800015c <buf_locate>
	buf_str("DIL TURKCE OLDU");
 8000938:	4802      	ldr	r0, [pc, #8]	; (8000944 <turkish_language_refresh+0x1c>)
 800093a:	f7ff fd40 	bl	80003be <buf_str>
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	08005ba8 	.word	0x08005ba8

08000948 <turkish_language_callback>:

void turkish_language_callback() {
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

	key_next_func = NULL;
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <turkish_language_callback+0x28>)
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
	key_prev_func = NULL;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <turkish_language_callback+0x2c>)
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
	key_enter_func = NULL;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <turkish_language_callback+0x30>)
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
	key_back_func = language_back;
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <turkish_language_callback+0x34>)
 8000960:	4a07      	ldr	r2, [pc, #28]	; (8000980 <turkish_language_callback+0x38>)
 8000962:	601a      	str	r2, [r3, #0]
	turkish_language();
 8000964:	f7ff ff6a 	bl	800083c <turkish_language>
	turkish_language_refresh();
 8000968:	f7ff ffde 	bl	8000928 <turkish_language_refresh>

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000184 	.word	0x20000184
 8000974:	20000188 	.word	0x20000188
 8000978:	2000018c 	.word	0x2000018c
 800097c:	20000190 	.word	0x20000190
 8000980:	08000acd 	.word	0x08000acd

08000984 <english_language>:

void english_language() {
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

	menu1.name = "DISPLAY";
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <english_language+0x6c>)
 800098a:	4a1a      	ldr	r2, [pc, #104]	; (80009f4 <english_language+0x70>)
 800098c:	601a      	str	r2, [r3, #0]
		sub_menu1_1.name = "CONTRAST";
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <english_language+0x74>)
 8000990:	4a1a      	ldr	r2, [pc, #104]	; (80009fc <english_language+0x78>)
 8000992:	601a      	str	r2, [r3, #0]
			sub_menu1_1_1.name = "TEST";
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <english_language+0x7c>)
 8000996:	4a1b      	ldr	r2, [pc, #108]	; (8000a04 <english_language+0x80>)
 8000998:	601a      	str	r2, [r3, #0]
		sub_menu1_2.name = "BRIGHTNESS";
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <english_language+0x84>)
 800099c:	4a1b      	ldr	r2, [pc, #108]	; (8000a0c <english_language+0x88>)
 800099e:	601a      	str	r2, [r3, #0]
			sub_menu1_2_1.name = "LEVEL";
 80009a0:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <english_language+0x8c>)
 80009a2:	4a1c      	ldr	r2, [pc, #112]	; (8000a14 <english_language+0x90>)
 80009a4:	601a      	str	r2, [r3, #0]

	menu2.name = "UART";
 80009a6:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <english_language+0x94>)
 80009a8:	4a1c      	ldr	r2, [pc, #112]	; (8000a1c <english_language+0x98>)
 80009aa:	601a      	str	r2, [r3, #0]
		sub_menu2_1.name = "BAUDRATE";
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <english_language+0x9c>)
 80009ae:	4a1d      	ldr	r2, [pc, #116]	; (8000a24 <english_language+0xa0>)
 80009b0:	601a      	str	r2, [r3, #0]
		sub_menu2_2.name = "DATA BIT";
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <english_language+0xa4>)
 80009b4:	4a1d      	ldr	r2, [pc, #116]	; (8000a2c <english_language+0xa8>)
 80009b6:	601a      	str	r2, [r3, #0]
			sub_menu2_2_1.name = "STOP BIT";
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <english_language+0xac>)
 80009ba:	4a1e      	ldr	r2, [pc, #120]	; (8000a34 <english_language+0xb0>)
 80009bc:	601a      	str	r2, [r3, #0]
			sub_menu2_2_2.name = "Parity BIT";
 80009be:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <english_language+0xb4>)
 80009c0:	4a1e      	ldr	r2, [pc, #120]	; (8000a3c <english_language+0xb8>)
 80009c2:	601a      	str	r2, [r3, #0]

	menu3.name = "LED TOGGLE";
 80009c4:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <english_language+0xbc>)
 80009c6:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <english_language+0xc0>)
 80009c8:	601a      	str	r2, [r3, #0]
	menu4.name = "TIME";
 80009ca:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <english_language+0xc4>)
 80009cc:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <english_language+0xc8>)
 80009ce:	601a      	str	r2, [r3, #0]
	menu5.name = "LANGUAGE";
 80009d0:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <english_language+0xcc>)
 80009d2:	4a20      	ldr	r2, [pc, #128]	; (8000a54 <english_language+0xd0>)
 80009d4:	601a      	str	r2, [r3, #0]
		sub_menu5_1.name = "TURKISH";
 80009d6:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <english_language+0xd4>)
 80009d8:	4a20      	ldr	r2, [pc, #128]	; (8000a5c <english_language+0xd8>)
 80009da:	601a      	str	r2, [r3, #0]
		sub_menu5_2.name = "ENGLISH";
 80009dc:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <english_language+0xdc>)
 80009de:	4a21      	ldr	r2, [pc, #132]	; (8000a64 <english_language+0xe0>)
 80009e0:	601a      	str	r2, [r3, #0]
	menu6.name = "DEFAULT SET";
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <english_language+0xe4>)
 80009e4:	4a21      	ldr	r2, [pc, #132]	; (8000a6c <english_language+0xe8>)
 80009e6:	601a      	str	r2, [r3, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	20000000 	.word	0x20000000
 80009f4:	08005bb8 	.word	0x08005bb8
 80009f8:	20000018 	.word	0x20000018
 80009fc:	08005bc0 	.word	0x08005bc0
 8000a00:	20000030 	.word	0x20000030
 8000a04:	08005b10 	.word	0x08005b10
 8000a08:	20000060 	.word	0x20000060
 8000a0c:	08005bcc 	.word	0x08005bcc
 8000a10:	20000048 	.word	0x20000048
 8000a14:	08005bd8 	.word	0x08005bd8
 8000a18:	20000078 	.word	0x20000078
 8000a1c:	08005b2c 	.word	0x08005b2c
 8000a20:	20000090 	.word	0x20000090
 8000a24:	08005be0 	.word	0x08005be0
 8000a28:	200000a8 	.word	0x200000a8
 8000a2c:	08005bec 	.word	0x08005bec
 8000a30:	200000c0 	.word	0x200000c0
 8000a34:	08005bf8 	.word	0x08005bf8
 8000a38:	200000d8 	.word	0x200000d8
 8000a3c:	08005c04 	.word	0x08005c04
 8000a40:	200000f0 	.word	0x200000f0
 8000a44:	08005c10 	.word	0x08005c10
 8000a48:	20000108 	.word	0x20000108
 8000a4c:	08005c1c 	.word	0x08005c1c
 8000a50:	20000120 	.word	0x20000120
 8000a54:	08005c24 	.word	0x08005c24
 8000a58:	20000138 	.word	0x20000138
 8000a5c:	08005c30 	.word	0x08005c30
 8000a60:	20000150 	.word	0x20000150
 8000a64:	08005c38 	.word	0x08005c38
 8000a68:	20000168 	.word	0x20000168
 8000a6c:	08005c40 	.word	0x08005c40

08000a70 <english_language_refresh>:

void english_language_refresh() {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0

	buf_clear();
 8000a74:	f7ff fc56 	bl	8000324 <buf_clear>
	buf_locate(1, 0);
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f7ff fb6e 	bl	800015c <buf_locate>
	buf_str("LANG IS ENGLISH");
 8000a80:	4802      	ldr	r0, [pc, #8]	; (8000a8c <english_language_refresh+0x1c>)
 8000a82:	f7ff fc9c 	bl	80003be <buf_str>
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	08005c4c 	.word	0x08005c4c

08000a90 <english_language_callback>:

void english_language_callback() {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

	key_next_func = NULL;
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <english_language_callback+0x28>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
	key_prev_func = NULL;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <english_language_callback+0x2c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
	key_enter_func = NULL;
 8000aa0:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <english_language_callback+0x30>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
	key_back_func = language_back;
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <english_language_callback+0x34>)
 8000aa8:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <english_language_callback+0x38>)
 8000aaa:	601a      	str	r2, [r3, #0]
	english_language();
 8000aac:	f7ff ff6a 	bl	8000984 <english_language>
	english_language_refresh();
 8000ab0:	f7ff ffde 	bl	8000a70 <english_language_refresh>

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000184 	.word	0x20000184
 8000abc:	20000188 	.word	0x20000188
 8000ac0:	2000018c 	.word	0x2000018c
 8000ac4:	20000190 	.word	0x20000190
 8000ac8:	08000acd 	.word	0x08000acd

08000acc <language_back>:

void language_back() {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0

	key_next_func = menu_next;
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <language_back+0x24>)
 8000ad2:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <language_back+0x28>)
 8000ad4:	601a      	str	r2, [r3, #0]
	key_prev_func = menu_prev;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <language_back+0x2c>)
 8000ad8:	4a08      	ldr	r2, [pc, #32]	; (8000afc <language_back+0x30>)
 8000ada:	601a      	str	r2, [r3, #0]
	key_enter_func = menu_enter;
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <language_back+0x34>)
 8000ade:	4a09      	ldr	r2, [pc, #36]	; (8000b04 <language_back+0x38>)
 8000ae0:	601a      	str	r2, [r3, #0]
	key_back_func = menu_back;
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <language_back+0x3c>)
 8000ae4:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <language_back+0x40>)
 8000ae6:	601a      	str	r2, [r3, #0]

	menu_refresh();
 8000ae8:	f000 f8b4 	bl	8000c54 <menu_refresh>

}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000184 	.word	0x20000184
 8000af4:	08000e29 	.word	0x08000e29
 8000af8:	20000188 	.word	0x20000188
 8000afc:	08000e91 	.word	0x08000e91
 8000b00:	2000018c 	.word	0x2000018c
 8000b04:	08000f1d 	.word	0x08000f1d
 8000b08:	20000190 	.word	0x20000190
 8000b0c:	08000f99 	.word	0x08000f99

08000b10 <led_toggle>:
extern void (*key_prev_func)();
extern void (*key_enter_func)();
extern void (*key_back_func)();
uint8_t pinState = 0;

void led_toggle() {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0

	// LED'in durumunu değiştir
	if (pinState == 1) {
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <led_toggle+0x30>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d106      	bne.n	8000b2a <led_toggle+0x1a>
		// LED açıksa kapat
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b22:	4808      	ldr	r0, [pc, #32]	; (8000b44 <led_toggle+0x34>)
 8000b24:	f001 fbb1 	bl	800228a <HAL_GPIO_WritePin>
 8000b28:	e005      	b.n	8000b36 <led_toggle+0x26>
	} else {
		// LED kapalıysa aç
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <led_toggle+0x34>)
 8000b32:	f001 fbaa 	bl	800228a <HAL_GPIO_WritePin>
	}

	led_toggle_refresh();
 8000b36:	f000 f825 	bl	8000b84 <led_toggle_refresh>

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000024f 	.word	0x2000024f
 8000b44:	40010c00 	.word	0x40010c00

08000b48 <led_toggle_callback>:

void led_toggle_callback() {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

	key_next_func = NULL;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <led_toggle_callback+0x24>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
	key_prev_func = NULL;
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <led_toggle_callback+0x28>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
	key_enter_func = led_toggle;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <led_toggle_callback+0x2c>)
 8000b5a:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <led_toggle_callback+0x30>)
 8000b5c:	601a      	str	r2, [r3, #0]
	key_back_func = led_toggle_back;
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <led_toggle_callback+0x34>)
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <led_toggle_callback+0x38>)
 8000b62:	601a      	str	r2, [r3, #0]
	led_toggle_refresh();
 8000b64:	f000 f80e 	bl	8000b84 <led_toggle_refresh>

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000184 	.word	0x20000184
 8000b70:	20000188 	.word	0x20000188
 8000b74:	2000018c 	.word	0x2000018c
 8000b78:	08000b11 	.word	0x08000b11
 8000b7c:	20000190 	.word	0x20000190
 8000b80:	08000c11 	.word	0x08000c11

08000b84 <led_toggle_refresh>:

void led_toggle_refresh() {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0

	buf_locate(0, 0);
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f7ff fae6 	bl	800015c <buf_locate>
	buf_str("                ");
 8000b90:	4819      	ldr	r0, [pc, #100]	; (8000bf8 <led_toggle_refresh+0x74>)
 8000b92:	f7ff fc14 	bl	80003be <buf_str>

	buf_locate(0, 3);
 8000b96:	2103      	movs	r1, #3
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f7ff fadf 	bl	800015c <buf_locate>
	buf_str("-- LED --");
 8000b9e:	4817      	ldr	r0, [pc, #92]	; (8000bfc <led_toggle_refresh+0x78>)
 8000ba0:	f7ff fc0d 	bl	80003be <buf_str>

	buf_locate(1, 0);
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f7ff fad8 	bl	800015c <buf_locate>
	buf_str("                ");
 8000bac:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <led_toggle_refresh+0x74>)
 8000bae:	f7ff fc06 	bl	80003be <buf_str>

	pinState = HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin);
 8000bb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb6:	4812      	ldr	r0, [pc, #72]	; (8000c00 <led_toggle_refresh+0x7c>)
 8000bb8:	f001 fb50 	bl	800225c <HAL_GPIO_ReadPin>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <led_toggle_refresh+0x80>)
 8000bc2:	701a      	strb	r2, [r3, #0]

	// Ekranı güncelle
	if (pinState == 0) {
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <led_toggle_refresh+0x80>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d107      	bne.n	8000bdc <led_toggle_refresh+0x58>
		// LED Yandı
		buf_locate(1, 6);
 8000bcc:	2106      	movs	r1, #6
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f7ff fac4 	bl	800015c <buf_locate>
		buf_str("ON");
 8000bd4:	480c      	ldr	r0, [pc, #48]	; (8000c08 <led_toggle_refresh+0x84>)
 8000bd6:	f7ff fbf2 	bl	80003be <buf_str>
	} else if (pinState == 1) {
		// LED Söndü
		buf_locate(1, 6);
		buf_str("OFF");
	}
}
 8000bda:	e00a      	b.n	8000bf2 <led_toggle_refresh+0x6e>
	} else if (pinState == 1) {
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <led_toggle_refresh+0x80>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d106      	bne.n	8000bf2 <led_toggle_refresh+0x6e>
		buf_locate(1, 6);
 8000be4:	2106      	movs	r1, #6
 8000be6:	2001      	movs	r0, #1
 8000be8:	f7ff fab8 	bl	800015c <buf_locate>
		buf_str("OFF");
 8000bec:	4807      	ldr	r0, [pc, #28]	; (8000c0c <led_toggle_refresh+0x88>)
 8000bee:	f7ff fbe6 	bl	80003be <buf_str>
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	08005c5c 	.word	0x08005c5c
 8000bfc:	08005c70 	.word	0x08005c70
 8000c00:	40010c00 	.word	0x40010c00
 8000c04:	2000024f 	.word	0x2000024f
 8000c08:	08005c7c 	.word	0x08005c7c
 8000c0c:	08005c80 	.word	0x08005c80

08000c10 <led_toggle_back>:

void led_toggle_back() {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0

	key_next_func = menu_next;
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <led_toggle_back+0x24>)
 8000c16:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <led_toggle_back+0x28>)
 8000c18:	601a      	str	r2, [r3, #0]
	key_prev_func = menu_prev;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <led_toggle_back+0x2c>)
 8000c1c:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <led_toggle_back+0x30>)
 8000c1e:	601a      	str	r2, [r3, #0]
	key_enter_func = menu_enter;
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <led_toggle_back+0x34>)
 8000c22:	4a09      	ldr	r2, [pc, #36]	; (8000c48 <led_toggle_back+0x38>)
 8000c24:	601a      	str	r2, [r3, #0]
	key_back_func = menu_back;
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <led_toggle_back+0x3c>)
 8000c28:	4a09      	ldr	r2, [pc, #36]	; (8000c50 <led_toggle_back+0x40>)
 8000c2a:	601a      	str	r2, [r3, #0]

	menu_refresh();
 8000c2c:	f000 f812 	bl	8000c54 <menu_refresh>

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000184 	.word	0x20000184
 8000c38:	08000e29 	.word	0x08000e29
 8000c3c:	20000188 	.word	0x20000188
 8000c40:	08000e91 	.word	0x08000e91
 8000c44:	2000018c 	.word	0x2000018c
 8000c48:	08000f1d 	.word	0x08000f1d
 8000c4c:	20000190 	.word	0x20000190
 8000c50:	08000f99 	.word	0x08000f99

08000c54 <menu_refresh>:
void (*key_enter_func)() = &menu_enter;
void (*key_back_func)() = &menu_back;

menu_t *temp;

void menu_refresh() {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0

	uint8_t i;
	uint32_t center = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]

    for (uint8_t y = 0; y < LCD_COLS ; y++) {
 8000c5e:	2300      	movs	r3, #0
 8000c60:	73bb      	strb	r3, [r7, #14]
 8000c62:	e006      	b.n	8000c72 <menu_refresh+0x1e>
        lcd_buffer[0][y] = '-'; // 255 dolu karakteri temsil ediyor.
 8000c64:	7bbb      	ldrb	r3, [r7, #14]
 8000c66:	4a45      	ldr	r2, [pc, #276]	; (8000d7c <menu_refresh+0x128>)
 8000c68:	212d      	movs	r1, #45	; 0x2d
 8000c6a:	54d1      	strb	r1, [r2, r3]
    for (uint8_t y = 0; y < LCD_COLS ; y++) {
 8000c6c:	7bbb      	ldrb	r3, [r7, #14]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	73bb      	strb	r3, [r7, #14]
 8000c72:	7bbb      	ldrb	r3, [r7, #14]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	d9f5      	bls.n	8000c64 <menu_refresh+0x10>
    }

	if (currentPointer->parent) {
 8000c78:	4b41      	ldr	r3, [pc, #260]	; (8000d80 <menu_refresh+0x12c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	691b      	ldr	r3, [r3, #16]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d027      	beq.n	8000cd2 <menu_refresh+0x7e>
		temp = (currentPointer->parent)->child;
 8000c82:	4b3f      	ldr	r3, [pc, #252]	; (8000d80 <menu_refresh+0x12c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	4a3e      	ldr	r2, [pc, #248]	; (8000d84 <menu_refresh+0x130>)
 8000c8c:	6013      	str	r3, [r2, #0]
		center = ( LCD_COLS - (strlen((temp->parent)->name)) )>>1;
 8000c8e:	4b3d      	ldr	r3, [pc, #244]	; (8000d84 <menu_refresh+0x130>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	691b      	ldr	r3, [r3, #16]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fa58 	bl	800014c <strlen>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	f1c3 0310 	rsb	r3, r3, #16
 8000ca2:	085b      	lsrs	r3, r3, #1
 8000ca4:	607b      	str	r3, [r7, #4]
		buf_locate(0,center-1);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	3b01      	subs	r3, #1
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	4619      	mov	r1, r3
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff fa53 	bl	800015c <buf_locate>
		buf_char(' ');
 8000cb6:	2020      	movs	r0, #32
 8000cb8:	f7ff fa68 	bl	800018c <buf_char>
		buf_str((temp->parent)->name);
 8000cbc:	4b31      	ldr	r3, [pc, #196]	; (8000d84 <menu_refresh+0x130>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fb7a 	bl	80003be <buf_str>
		buf_char(' ');
 8000cca:	2020      	movs	r0, #32
 8000ccc:	f7ff fa5e 	bl	800018c <buf_char>
 8000cd0:	e00b      	b.n	8000cea <menu_refresh+0x96>

	} else {
		center = (LCD_COLS - 4)>>1;
 8000cd2:	2306      	movs	r3, #6
 8000cd4:	607b      	str	r3, [r7, #4]
		temp = &menu1;
 8000cd6:	4b2b      	ldr	r3, [pc, #172]	; (8000d84 <menu_refresh+0x130>)
 8000cd8:	4a2b      	ldr	r2, [pc, #172]	; (8000d88 <menu_refresh+0x134>)
 8000cda:	601a      	str	r2, [r3, #0]
		buf_str_XY(0,center,"MENU");
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	4a2a      	ldr	r2, [pc, #168]	; (8000d8c <menu_refresh+0x138>)
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f7ff fb4b 	bl	8000380 <buf_str_XY>
	}

	for (i = 0; i != menu_index; i++) {
 8000cea:	2300      	movs	r3, #0
 8000cec:	73fb      	strb	r3, [r7, #15]
 8000cee:	e007      	b.n	8000d00 <menu_refresh+0xac>
		temp = temp->next;
 8000cf0:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <menu_refresh+0x130>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	4a23      	ldr	r2, [pc, #140]	; (8000d84 <menu_refresh+0x130>)
 8000cf8:	6013      	str	r3, [r2, #0]
	for (i = 0; i != menu_index; i++) {
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	73fb      	strb	r3, [r7, #15]
 8000d00:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <menu_refresh+0x13c>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	7bfa      	ldrb	r2, [r7, #15]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d1f2      	bne.n	8000cf0 <menu_refresh+0x9c>
	}
		buf_locate(1, 0);
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f7ff fa25 	bl	800015c <buf_locate>
		if (temp == currentPointer){
 8000d12:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <menu_refresh+0x130>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <menu_refresh+0x12c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d102      	bne.n	8000d24 <menu_refresh+0xd0>
			buf_char(62); // > karakteri
 8000d1e:	203e      	movs	r0, #62	; 0x3e
 8000d20:	f7ff fa34 	bl	800018c <buf_char>
		}

		buf_locate(1, 1);
 8000d24:	2101      	movs	r1, #1
 8000d26:	2001      	movs	r0, #1
 8000d28:	f7ff fa18 	bl	800015c <buf_locate>
		buf_str(temp->name);
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <menu_refresh+0x130>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fb43 	bl	80003be <buf_str>
		uint8_t lenght = (strlen(temp->name));
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <menu_refresh+0x130>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fa04 	bl	800014c <strlen>
 8000d44:	4603      	mov	r3, r0
 8000d46:	70fb      	strb	r3, [r7, #3]
		for(int i = lenght + 1; i < LCD_COLS;i++){
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	e008      	b.n	8000d62 <menu_refresh+0x10e>
			lcd_buffer[1][i] = ' ';
 8000d50:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <menu_refresh+0x128>)
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	4413      	add	r3, r2
 8000d56:	3310      	adds	r3, #16
 8000d58:	2220      	movs	r2, #32
 8000d5a:	701a      	strb	r2, [r3, #0]
		for(int i = lenght + 1; i < LCD_COLS;i++){
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	ddf3      	ble.n	8000d50 <menu_refresh+0xfc>
		}

		temp = temp->next;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <menu_refresh+0x130>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <menu_refresh+0x130>)
 8000d70:	6013      	str	r3, [r2, #0]
}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000020c 	.word	0x2000020c
 8000d80:	20000180 	.word	0x20000180
 8000d84:	20000254 	.word	0x20000254
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	08005d24 	.word	0x08005d24
 8000d90:	20000250 	.word	0x20000250

08000d94 <menu_get_index>:

uint8_t menu_get_index(menu_t *q) {
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]

	menu_t *temp;
	uint8_t i = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	72fb      	strb	r3, [r7, #11]

	if (q->parent){
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d004      	beq.n	8000db2 <menu_get_index+0x1e>
		temp = (q->parent)->child;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	691b      	ldr	r3, [r3, #16]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	e008      	b.n	8000dc4 <menu_get_index+0x30>
	}
	else{
		temp = &menu1;
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <menu_get_index+0x54>)
 8000db4:	60fb      	str	r3, [r7, #12]
	}

    while (temp != NULL && temp != q) {
 8000db6:	e005      	b.n	8000dc4 <menu_get_index+0x30>
        temp = temp->next;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	60fb      	str	r3, [r7, #12]
        i++;
 8000dbe:	7afb      	ldrb	r3, [r7, #11]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	72fb      	strb	r3, [r7, #11]
    while (temp != NULL && temp != q) {
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <menu_get_index+0x3e>
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d1f2      	bne.n	8000db8 <menu_get_index+0x24>
    }

    if (temp == NULL) {
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <menu_get_index+0x48>
        return 0; // q menüde bulunamadıysa 0 döndür
 8000dd8:	2300      	movs	r3, #0
 8000dda:	e000      	b.n	8000dde <menu_get_index+0x4a>
    }
	return i;
 8000ddc:	7afb      	ldrb	r3, [r7, #11]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	20000000 	.word	0x20000000

08000dec <menu_get_level>:

uint8_t menu_get_level(menu_t *q) {
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

	menu_t *temp = q;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	60fb      	str	r3, [r7, #12]
	uint8_t i = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	72fb      	strb	r3, [r7, #11]

	if (!q->parent) return 0;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d107      	bne.n	8000e14 <menu_get_level+0x28>
 8000e04:	2300      	movs	r3, #0
 8000e06:	e00a      	b.n	8000e1e <menu_get_level+0x32>

	while (temp->parent != NULL) {
		temp = temp->parent;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	691b      	ldr	r3, [r3, #16]
 8000e0c:	60fb      	str	r3, [r7, #12]
		i++;
 8000e0e:	7afb      	ldrb	r3, [r7, #11]
 8000e10:	3301      	adds	r3, #1
 8000e12:	72fb      	strb	r3, [r7, #11]
	while (temp->parent != NULL) {
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	691b      	ldr	r3, [r3, #16]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1f5      	bne.n	8000e08 <menu_get_level+0x1c>
	}

	return i;
 8000e1c:	7afb      	ldrb	r3, [r7, #11]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <menu_next>:

void menu_next() { // sonraki ögeye git
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0

	if (currentPointer->next) { // bir sonraki öge varsa
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <menu_next+0x58>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d00b      	beq.n	8000e4e <menu_next+0x26>

		currentPointer = (*currentPointer).next; //currentPointer işaretçisi, bir sonraki öğeyi işaret eder hale gelir
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <menu_next+0x58>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	4a10      	ldr	r2, [pc, #64]	; (8000e80 <menu_next+0x58>)
 8000e3e:	6013      	str	r3, [r2, #0]
		menu_index++; // Bu değişken, mevcut menü öğesinin dizinini tutar
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <menu_next+0x5c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <menu_next+0x5c>)
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	e014      	b.n	8000e78 <menu_next+0x50>
	} else { // bir sonraki öge yoksa
		menu_index = 0; // Bu, menüde ilk öğeye dönüşü ifade eder.
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <menu_next+0x5c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
		lcd_row_pos = 0;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <menu_next+0x60>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]

		if (currentPointer->parent){//bir üst menü öğesi varsa
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <menu_next+0x58>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	691b      	ldr	r3, [r3, #16]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d006      	beq.n	8000e72 <menu_next+0x4a>
			currentPointer = (currentPointer->parent)->child;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <menu_next+0x58>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <menu_next+0x58>)
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	e002      	b.n	8000e78 <menu_next+0x50>
		} else{//üst menü öğesi yoksa
			currentPointer = &menu1;
 8000e72:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <menu_next+0x58>)
 8000e74:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <menu_next+0x64>)
 8000e76:	601a      	str	r2, [r3, #0]
		}
	}
	menu_refresh();
 8000e78:	f7ff feec 	bl	8000c54 <menu_refresh>
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000180 	.word	0x20000180
 8000e84:	20000250 	.word	0x20000250
 8000e88:	20000251 	.word	0x20000251
 8000e8c:	20000000 	.word	0x20000000

08000e90 <menu_prev>:

void menu_prev() { // önceki ögeye git
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
    if (currentPointer == NULL || currentPointer->prev == NULL) {
 8000e94:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <menu_prev+0x80>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d036      	beq.n	8000f0a <menu_prev+0x7a>
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <menu_prev+0x80>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d031      	beq.n	8000f0a <menu_prev+0x7a>
        return; // geçersiz pointer, hiçbir şey yapmadan çık
    }

	currentPointer = currentPointer->prev;
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <menu_prev+0x80>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	4a18      	ldr	r2, [pc, #96]	; (8000f10 <menu_prev+0x80>)
 8000eae:	6013      	str	r3, [r2, #0]

	if (menu_index) { //mevcut öğe menünün ilk öğesi değilse
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <menu_prev+0x84>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d010      	beq.n	8000eda <menu_prev+0x4a>

		menu_index--;
 8000eb8:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <menu_prev+0x84>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <menu_prev+0x84>)
 8000ec2:	701a      	strb	r2, [r3, #0]
		if (lcd_row_pos > 0)
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <menu_prev+0x88>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d01b      	beq.n	8000f04 <menu_prev+0x74>
			lcd_row_pos--;
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <menu_prev+0x88>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <menu_prev+0x88>)
 8000ed6:	701a      	strb	r2, [r3, #0]
 8000ed8:	e014      	b.n	8000f04 <menu_prev+0x74>

	} else { //mevcut öğe menünün ilk öğesi ise

		menu_index = menu_get_index(currentPointer);
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <menu_prev+0x80>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff58 	bl	8000d94 <menu_get_index>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <menu_prev+0x84>)
 8000eea:	701a      	strb	r2, [r3, #0]

		if (menu_index >= LCD_ROWS - 1)
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <menu_prev+0x84>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <menu_prev+0x6c>
			lcd_row_pos = LCD_ROWS - 1;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <menu_prev+0x88>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
 8000efa:	e003      	b.n	8000f04 <menu_prev+0x74>
		else
			lcd_row_pos = menu_index;
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <menu_prev+0x84>)
 8000efe:	781a      	ldrb	r2, [r3, #0]
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <menu_prev+0x88>)
 8000f02:	701a      	strb	r2, [r3, #0]
	}

	menu_refresh();
 8000f04:	f7ff fea6 	bl	8000c54 <menu_refresh>
 8000f08:	e000      	b.n	8000f0c <menu_prev+0x7c>
        return; // geçersiz pointer, hiçbir şey yapmadan çık
 8000f0a:	bf00      	nop
}
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000180 	.word	0x20000180
 8000f14:	20000250 	.word	0x20000250
 8000f18:	20000251 	.word	0x20000251

08000f1c <menu_enter>:

void menu_enter() {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0

	if (currentPointer->menu_function){
 8000f20:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <menu_enter+0x68>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <menu_enter+0x16>
		currentPointer->menu_function();// menü öğesi bir fonksiyonu tetikliyorsa, bu fonksiyon burada çağrılır.
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <menu_enter+0x68>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	4798      	blx	r3
	}

	if (currentPointer->child)//mevcut menü öğesinin alt öğeleri varsa
 8000f32:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <menu_enter+0x68>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d021      	beq.n	8000f80 <menu_enter+0x64>
	{
		switch (menu_get_level(currentPointer)) {
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <menu_enter+0x68>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff53 	bl	8000dec <menu_get_level>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d002      	beq.n	8000f52 <menu_enter+0x36>
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d005      	beq.n	8000f5c <menu_enter+0x40>
 8000f50:	e009      	b.n	8000f66 <menu_enter+0x4a>
			case 0:
				lcd_row_pos_level_1 = lcd_row_pos;
 8000f52:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <menu_enter+0x6c>)
 8000f54:	781a      	ldrb	r2, [r3, #0]
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <menu_enter+0x70>)
 8000f58:	701a      	strb	r2, [r3, #0]
				break;
 8000f5a:	e004      	b.n	8000f66 <menu_enter+0x4a>

			case 1:
				lcd_row_pos_level_2 = lcd_row_pos;
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <menu_enter+0x6c>)
 8000f5e:	781a      	ldrb	r2, [r3, #0]
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <menu_enter+0x74>)
 8000f62:	701a      	strb	r2, [r3, #0]
				break;
 8000f64:	bf00      	nop
		}
		menu_index = 0;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <menu_enter+0x78>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
		lcd_row_pos = 0;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <menu_enter+0x6c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]

		currentPointer = currentPointer->child;
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <menu_enter+0x68>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	4a02      	ldr	r2, [pc, #8]	; (8000f84 <menu_enter+0x68>)
 8000f7a:	6013      	str	r3, [r2, #0]

		menu_refresh();
 8000f7c:	f7ff fe6a 	bl	8000c54 <menu_refresh>
	}
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000180 	.word	0x20000180
 8000f88:	20000251 	.word	0x20000251
 8000f8c:	20000252 	.word	0x20000252
 8000f90:	20000253 	.word	0x20000253
 8000f94:	20000250 	.word	0x20000250

08000f98 <menu_back>:

void menu_back(void) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0

	if (currentPointer->parent) {
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <menu_back+0x5c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d024      	beq.n	8000ff0 <menu_back+0x58>

		switch (menu_get_level(currentPointer)) {
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <menu_back+0x5c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff1e 	bl	8000dec <menu_get_level>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d002      	beq.n	8000fbc <menu_back+0x24>
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d005      	beq.n	8000fc6 <menu_back+0x2e>
 8000fba:	e009      	b.n	8000fd0 <menu_back+0x38>
			case 1:
				lcd_row_pos = lcd_row_pos_level_1;
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <menu_back+0x60>)
 8000fbe:	781a      	ldrb	r2, [r3, #0]
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <menu_back+0x64>)
 8000fc2:	701a      	strb	r2, [r3, #0]
				break;
 8000fc4:	e004      	b.n	8000fd0 <menu_back+0x38>

			case 2:
				lcd_row_pos = lcd_row_pos_level_2;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <menu_back+0x68>)
 8000fc8:	781a      	ldrb	r2, [r3, #0]
 8000fca:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <menu_back+0x64>)
 8000fcc:	701a      	strb	r2, [r3, #0]
				break;
 8000fce:	bf00      	nop
			}

		currentPointer = currentPointer->parent;
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <menu_back+0x5c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <menu_back+0x5c>)
 8000fd8:	6013      	str	r3, [r2, #0]
		menu_index = menu_get_index(currentPointer);
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <menu_back+0x5c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fed8 	bl	8000d94 <menu_get_index>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <menu_back+0x6c>)
 8000fea:	701a      	strb	r2, [r3, #0]

		menu_refresh();
 8000fec:	f7ff fe32 	bl	8000c54 <menu_refresh>
	}
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000180 	.word	0x20000180
 8000ff8:	20000252 	.word	0x20000252
 8000ffc:	20000251 	.word	0x20000251
 8001000:	20000253 	.word	0x20000253
 8001004:	20000250 	.word	0x20000250

08001008 <key_next_press>:

void key_next_press(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0

	if ( sag == 1) {
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <key_next_press+0x44>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d10a      	bne.n	800102a <key_next_press+0x22>

		sag = 0;
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <key_next_press+0x44>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]

		if (key_next_func){
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <key_next_press+0x48>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d011      	beq.n	8001046 <key_next_press+0x3e>
			(*key_next_func)();
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <key_next_press+0x48>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4798      	blx	r3
		if (key_prev_func){
			(*key_prev_func)();
		}
	}

}
 8001028:	e00d      	b.n	8001046 <key_next_press+0x3e>
	} else if ( sol == 1){
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <key_next_press+0x4c>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d109      	bne.n	8001046 <key_next_press+0x3e>
		sol = 0;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <key_next_press+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
		if (key_prev_func){
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <key_next_press+0x50>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d002      	beq.n	8001046 <key_next_press+0x3e>
			(*key_prev_func)();
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <key_next_press+0x50>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4798      	blx	r3
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000298 	.word	0x20000298
 8001050:	20000184 	.word	0x20000184
 8001054:	20000299 	.word	0x20000299
 8001058:	20000188 	.word	0x20000188

0800105c <key_enter_press>:

void key_enter_press(void){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0

	static uint8_t key_enter_lock = 0;

	if( !key_enter_lock && buton == 1 ) {
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <key_enter_press+0x4c>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d10e      	bne.n	8001086 <key_enter_press+0x2a>
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <key_enter_press+0x50>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d10a      	bne.n	8001086 <key_enter_press+0x2a>

		key_enter_lock = 1;
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <key_enter_press+0x4c>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]

		if(key_enter_func){
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <key_enter_press+0x54>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d012      	beq.n	80010a4 <key_enter_press+0x48>
			(*key_enter_func)();
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <key_enter_press+0x54>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4798      	blx	r3
		if(key_enter_func){
 8001084:	e00e      	b.n	80010a4 <key_enter_press+0x48>
		}

	} else if(key_enter_lock && buton == 0 ){
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <key_enter_press+0x4c>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00a      	beq.n	80010a4 <key_enter_press+0x48>
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <key_enter_press+0x50>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d106      	bne.n	80010a4 <key_enter_press+0x48>
		key_enter_lock++;
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <key_enter_press+0x4c>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	3301      	adds	r3, #1
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4b02      	ldr	r3, [pc, #8]	; (80010a8 <key_enter_press+0x4c>)
 80010a0:	701a      	strb	r2, [r3, #0]
	}

}
 80010a2:	e7ff      	b.n	80010a4 <key_enter_press+0x48>
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000258 	.word	0x20000258
 80010ac:	2000029a 	.word	0x2000029a
 80010b0:	2000018c 	.word	0x2000018c

080010b4 <back_enter_press>:

void back_enter_press(){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	static uint8_t key_enter_lock = 0;

	if( !key_enter_lock && back_button == 1 ) {
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <back_enter_press+0x4c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d10e      	bne.n	80010de <back_enter_press+0x2a>
 80010c0:	4b10      	ldr	r3, [pc, #64]	; (8001104 <back_enter_press+0x50>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d10a      	bne.n	80010de <back_enter_press+0x2a>

		key_enter_lock = 1;
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <back_enter_press+0x4c>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]

		if(key_back_func){
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <back_enter_press+0x54>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d012      	beq.n	80010fc <back_enter_press+0x48>
			(*key_back_func)();
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <back_enter_press+0x54>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4798      	blx	r3
		if(key_back_func){
 80010dc:	e00e      	b.n	80010fc <back_enter_press+0x48>
		}

	} else if(key_enter_lock && back_button == 0 ){
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <back_enter_press+0x4c>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00a      	beq.n	80010fc <back_enter_press+0x48>
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <back_enter_press+0x50>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d106      	bne.n	80010fc <back_enter_press+0x48>
		key_enter_lock++;
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <back_enter_press+0x4c>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	3301      	adds	r3, #1
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4b02      	ldr	r3, [pc, #8]	; (8001100 <back_enter_press+0x4c>)
 80010f8:	701a      	strb	r2, [r3, #0]
	}
}
 80010fa:	e7ff      	b.n	80010fc <back_enter_press+0x48>
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000259 	.word	0x20000259
 8001104:	2000029e 	.word	0x2000029e
 8001108:	20000190 	.word	0x20000190

0800110c <time_callback>:
extern void (*key_next_func)();
extern void (*key_prev_func)();
extern void (*key_enter_func)();
extern void (*key_back_func)();

void time_callback() {
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0

	key_next_func = NULL;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <time_callback+0x2c>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
	key_prev_func = NULL;
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <time_callback+0x30>)
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
	key_enter_func = get_time;
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <time_callback+0x34>)
 800111e:	4a09      	ldr	r2, [pc, #36]	; (8001144 <time_callback+0x38>)
 8001120:	601a      	str	r2, [r3, #0]
	key_back_func = time_back;
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <time_callback+0x3c>)
 8001124:	4a09      	ldr	r2, [pc, #36]	; (800114c <time_callback+0x40>)
 8001126:	601a      	str	r2, [r3, #0]
	time_refresh();
 8001128:	f000 f814 	bl	8001154 <time_refresh>
	time_call = 1;
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <time_callback+0x44>)
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000184 	.word	0x20000184
 800113c:	20000188 	.word	0x20000188
 8001140:	2000018c 	.word	0x2000018c
 8001144:	08001369 	.word	0x08001369
 8001148:	20000190 	.word	0x20000190
 800114c:	08001185 	.word	0x08001185
 8001150:	2000025a 	.word	0x2000025a

08001154 <time_refresh>:

void time_refresh() {
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0

	buf_clear();
 8001158:	f7ff f8e4 	bl	8000324 <buf_clear>
    buf_locate(0, 1);
 800115c:	2101      	movs	r1, #1
 800115e:	2000      	movs	r0, #0
 8001160:	f7fe fffc 	bl	800015c <buf_locate>
    buf_str(time);
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <time_refresh+0x28>)
 8001166:	f7ff f92a 	bl	80003be <buf_str>
    buf_locate(1, 1);
 800116a:	2101      	movs	r1, #1
 800116c:	2001      	movs	r0, #1
 800116e:	f7fe fff5 	bl	800015c <buf_locate>
    buf_str(date);
 8001172:	4803      	ldr	r0, [pc, #12]	; (8001180 <time_refresh+0x2c>)
 8001174:	f7ff f923 	bl	80003be <buf_str>

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	2000025c 	.word	0x2000025c
 8001180:	20000268 	.word	0x20000268

08001184 <time_back>:

void time_back() {
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0

	key_next_func = menu_next;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <time_back+0x2c>)
 800118a:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <time_back+0x30>)
 800118c:	601a      	str	r2, [r3, #0]
	key_prev_func = menu_prev;
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <time_back+0x34>)
 8001190:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <time_back+0x38>)
 8001192:	601a      	str	r2, [r3, #0]
	key_enter_func = menu_enter;
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <time_back+0x3c>)
 8001196:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <time_back+0x40>)
 8001198:	601a      	str	r2, [r3, #0]
	key_back_func = menu_back;
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <time_back+0x44>)
 800119c:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <time_back+0x48>)
 800119e:	601a      	str	r2, [r3, #0]
	time_call = 0;
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <time_back+0x4c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
	menu_refresh();
 80011a6:	f7ff fd55 	bl	8000c54 <menu_refresh>

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000184 	.word	0x20000184
 80011b4:	08000e29 	.word	0x08000e29
 80011b8:	20000188 	.word	0x20000188
 80011bc:	08000e91 	.word	0x08000e91
 80011c0:	2000018c 	.word	0x2000018c
 80011c4:	08000f1d 	.word	0x08000f1d
 80011c8:	20000190 	.word	0x20000190
 80011cc:	08000f99 	.word	0x08000f99
 80011d0:	2000025a 	.word	0x2000025a

080011d4 <read_rotary_encoder>:
uint16_t btn_ctr_ok = 0;
uint8_t back_button = 0;
uint16_t back_btn_ctr_ok = 0;


void read_rotary_encoder() {
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
    // Mevcut değeri oku
    int currentReading = (TIM1->CNT) >> 2;
 80011da:	4b30      	ldr	r3, [pc, #192]	; (800129c <read_rotary_encoder+0xc8>)
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011de:	089b      	lsrs	r3, r3, #2
 80011e0:	607b      	str	r3, [r7, #4]

    if (currentReading > (MAX_COUNT >> 2)) {
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011e8:	dd03      	ble.n	80011f2 <read_rotary_encoder+0x1e>
        currentReading -= MAX_COUNT;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80011f0:	607b      	str	r3, [r7, #4]
    }
    // Pencere boyunca toplamdan eski değeri çıkar
    sum -= readings[currentIndex];
 80011f2:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <read_rotary_encoder+0xcc>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b2b      	ldr	r3, [pc, #172]	; (80012a4 <read_rotary_encoder+0xd0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	492b      	ldr	r1, [pc, #172]	; (80012a8 <read_rotary_encoder+0xd4>)
 80011fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	4a27      	ldr	r2, [pc, #156]	; (80012a0 <read_rotary_encoder+0xcc>)
 8001204:	6013      	str	r3, [r2, #0]

    // Yeni okunan değeri diziye ekle
    readings[currentIndex] = currentReading;
 8001206:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <read_rotary_encoder+0xd0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4927      	ldr	r1, [pc, #156]	; (80012a8 <read_rotary_encoder+0xd4>)
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // Yeni değeri toplamaya ekle
    sum += readings[currentIndex];
 8001212:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <read_rotary_encoder+0xd0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a24      	ldr	r2, [pc, #144]	; (80012a8 <read_rotary_encoder+0xd4>)
 8001218:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800121c:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <read_rotary_encoder+0xcc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4413      	add	r3, r2
 8001222:	4a1f      	ldr	r2, [pc, #124]	; (80012a0 <read_rotary_encoder+0xcc>)
 8001224:	6013      	str	r3, [r2, #0]

    // İndeksi güncelle, pencere boyutuna göre döngüsel yap
//    currentIndex = (currentIndex + 1) % WINDOW_SIZE;
    currentIndex = (currentIndex + 1) & WINDOW_MASK;
 8001226:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <read_rotary_encoder+0xd0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	4a1c      	ldr	r2, [pc, #112]	; (80012a4 <read_rotary_encoder+0xd0>)
 8001232:	6013      	str	r3, [r2, #0]

    // Ortalama değeri hesapla
    average = sum / WINDOW_SIZE;
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <read_rotary_encoder+0xcc>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	da00      	bge.n	800123e <read_rotary_encoder+0x6a>
 800123c:	3303      	adds	r3, #3
 800123e:	109b      	asrs	r3, r3, #2
 8001240:	461a      	mov	r2, r3
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <read_rotary_encoder+0xd8>)
 8001244:	601a      	str	r2, [r3, #0]

    // Filtrelenmiş değeri counter değişkenine ata
    counter = average;
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <read_rotary_encoder+0xd8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <read_rotary_encoder+0xdc>)
 800124c:	6013      	str	r3, [r2, #0]

    if (counter > prev_counter) {
 800124e:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <read_rotary_encoder+0xdc>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <read_rotary_encoder+0xe0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	dd0a      	ble.n	8001270 <read_rotary_encoder+0x9c>
    	sag = 0;
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <read_rotary_encoder+0xe4>)
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
    	sol = 1;
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <read_rotary_encoder+0xe8>)
 8001262:	2201      	movs	r2, #1
 8001264:	701a      	strb	r2, [r3, #0]
    	prev_counter = counter;
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <read_rotary_encoder+0xdc>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <read_rotary_encoder+0xe0>)
 800126c:	6013      	str	r3, [r2, #0]
    } else if (counter < prev_counter){
    	sol = 0;
    	sag = 1;
    	prev_counter = counter;
    }
}
 800126e:	e00f      	b.n	8001290 <read_rotary_encoder+0xbc>
    } else if (counter < prev_counter){
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <read_rotary_encoder+0xdc>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <read_rotary_encoder+0xe0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	da09      	bge.n	8001290 <read_rotary_encoder+0xbc>
    	sol = 0;
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <read_rotary_encoder+0xe8>)
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
    	sag = 1;
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <read_rotary_encoder+0xe4>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
    	prev_counter = counter;
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <read_rotary_encoder+0xdc>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <read_rotary_encoder+0xe0>)
 800128e:	6013      	str	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40012c00 	.word	0x40012c00
 80012a0:	2000028c 	.word	0x2000028c
 80012a4:	20000288 	.word	0x20000288
 80012a8:	20000278 	.word	0x20000278
 80012ac:	20000290 	.word	0x20000290
 80012b0:	20000274 	.word	0x20000274
 80012b4:	20000294 	.word	0x20000294
 80012b8:	20000298 	.word	0x20000298
 80012bc:	20000299 	.word	0x20000299

080012c0 <Read_Encoder_Button>:

void Read_Encoder_Button() {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0

	if (HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin) == 0) {
 80012c4:	2101      	movs	r1, #1
 80012c6:	4823      	ldr	r0, [pc, #140]	; (8001354 <Read_Encoder_Button+0x94>)
 80012c8:	f000 ffc8 	bl	800225c <HAL_GPIO_ReadPin>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d115      	bne.n	80012fe <Read_Encoder_Button+0x3e>
		if (btn_ctr_ok == 20) { //buton parazit engelle
 80012d2:	4b21      	ldr	r3, [pc, #132]	; (8001358 <Read_Encoder_Button+0x98>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	2b14      	cmp	r3, #20
 80012d8:	d106      	bne.n	80012e8 <Read_Encoder_Button+0x28>
			btn_ctr_ok = 21;
 80012da:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <Read_Encoder_Button+0x98>)
 80012dc:	2215      	movs	r2, #21
 80012de:	801a      	strh	r2, [r3, #0]
			buton = 1;
 80012e0:	4b1e      	ldr	r3, [pc, #120]	; (800135c <Read_Encoder_Button+0x9c>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	701a      	strb	r2, [r3, #0]
 80012e6:	e010      	b.n	800130a <Read_Encoder_Button+0x4a>
		} else if (btn_ctr_ok < 20) {
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <Read_Encoder_Button+0x98>)
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	2b13      	cmp	r3, #19
 80012ee:	d80c      	bhi.n	800130a <Read_Encoder_Button+0x4a>
			btn_ctr_ok++;
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <Read_Encoder_Button+0x98>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <Read_Encoder_Button+0x98>)
 80012fa:	801a      	strh	r2, [r3, #0]
 80012fc:	e005      	b.n	800130a <Read_Encoder_Button+0x4a>
		}
	} else {
		buton = 0;
 80012fe:	4b17      	ldr	r3, [pc, #92]	; (800135c <Read_Encoder_Button+0x9c>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
		btn_ctr_ok = 0;
 8001304:	4b14      	ldr	r3, [pc, #80]	; (8001358 <Read_Encoder_Button+0x98>)
 8001306:	2200      	movs	r2, #0
 8001308:	801a      	strh	r2, [r3, #0]

	}

	//Back Button Read
	if (HAL_GPIO_ReadPin(BACK_BUTTON_GPIO_Port, BACK_BUTTON_Pin) == 1) {
 800130a:	2102      	movs	r1, #2
 800130c:	4811      	ldr	r0, [pc, #68]	; (8001354 <Read_Encoder_Button+0x94>)
 800130e:	f000 ffa5 	bl	800225c <HAL_GPIO_ReadPin>
 8001312:	4603      	mov	r3, r0
 8001314:	2b01      	cmp	r3, #1
 8001316:	d115      	bne.n	8001344 <Read_Encoder_Button+0x84>
		if (back_btn_ctr_ok == 20) { //buton parazit engelle
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <Read_Encoder_Button+0xa0>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	2b14      	cmp	r3, #20
 800131e:	d106      	bne.n	800132e <Read_Encoder_Button+0x6e>
			back_btn_ctr_ok = 21;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <Read_Encoder_Button+0xa0>)
 8001322:	2215      	movs	r2, #21
 8001324:	801a      	strh	r2, [r3, #0]
			back_button = 1;
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <Read_Encoder_Button+0xa4>)
 8001328:	2201      	movs	r2, #1
 800132a:	701a      	strb	r2, [r3, #0]
	} else {
		back_button = 0;
		back_btn_ctr_ok = 0;

	}
}
 800132c:	e010      	b.n	8001350 <Read_Encoder_Button+0x90>
		} else if (back_btn_ctr_ok < 20) {
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <Read_Encoder_Button+0xa0>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	2b13      	cmp	r3, #19
 8001334:	d80c      	bhi.n	8001350 <Read_Encoder_Button+0x90>
			back_btn_ctr_ok++;
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <Read_Encoder_Button+0xa0>)
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	3301      	adds	r3, #1
 800133c:	b29a      	uxth	r2, r3
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <Read_Encoder_Button+0xa0>)
 8001340:	801a      	strh	r2, [r3, #0]
}
 8001342:	e005      	b.n	8001350 <Read_Encoder_Button+0x90>
		back_button = 0;
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <Read_Encoder_Button+0xa4>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
		back_btn_ctr_ok = 0;
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <Read_Encoder_Button+0xa0>)
 800134c:	2200      	movs	r2, #0
 800134e:	801a      	strh	r2, [r3, #0]
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40010800 	.word	0x40010800
 8001358:	2000029c 	.word	0x2000029c
 800135c:	2000029a 	.word	0x2000029a
 8001360:	200002a0 	.word	0x200002a0
 8001364:	2000029e 	.word	0x2000029e

08001368 <get_time>:
extern RTC_HandleTypeDef hrtc;
extern char time[10];
extern char date[10];


void get_time(void) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af02      	add	r7, sp, #8

	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;
	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800136e:	463b      	mov	r3, r7
 8001370:	2200      	movs	r2, #0
 8001372:	4619      	mov	r1, r3
 8001374:	4812      	ldr	r0, [pc, #72]	; (80013c0 <get_time+0x58>)
 8001376:	f002 fae9 	bl	800394c <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2200      	movs	r2, #0
 800137e:	4619      	mov	r1, r3
 8001380:	480f      	ldr	r0, [pc, #60]	; (80013c0 <get_time+0x58>)
 8001382:	f002 fc71 	bl	8003c68 <HAL_RTC_GetDate>
	/* Display time Format: hh:mm:ss */
	sprintf((char*) time, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes,gTime.Seconds);
 8001386:	783b      	ldrb	r3, [r7, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	787b      	ldrb	r3, [r7, #1]
 800138c:	4619      	mov	r1, r3
 800138e:	78bb      	ldrb	r3, [r7, #2]
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	460b      	mov	r3, r1
 8001394:	490b      	ldr	r1, [pc, #44]	; (80013c4 <get_time+0x5c>)
 8001396:	480c      	ldr	r0, [pc, #48]	; (80013c8 <get_time+0x60>)
 8001398:	f003 fee8 	bl	800516c <siprintf>
	/* Display date Format: dd-mm-yy */
	sprintf((char*) date, "%02d-%02d-%2d", gDate.Date, gDate.Month,2000 + gDate.Year);
 800139c:	79bb      	ldrb	r3, [r7, #6]
 800139e:	461a      	mov	r2, r3
 80013a0:	797b      	ldrb	r3, [r7, #5]
 80013a2:	4619      	mov	r1, r3
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	460b      	mov	r3, r1
 80013ae:	4907      	ldr	r1, [pc, #28]	; (80013cc <get_time+0x64>)
 80013b0:	4807      	ldr	r0, [pc, #28]	; (80013d0 <get_time+0x68>)
 80013b2:	f003 fedb 	bl	800516c <siprintf>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200002f8 	.word	0x200002f8
 80013c4:	08005d2c 	.word	0x08005d2c
 80013c8:	2000025c 	.word	0x2000025c
 80013cc:	08005d3c 	.word	0x08005d3c
 80013d0:	20000268 	.word	0x20000268

080013d4 <HAL_IncTick>:
extern uint32_t currentTime;
uint32_t timer = 0;
extern uint8_t time_call;
volatile uint8_t timer_flag = 0;

void HAL_IncTick(void) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0

	currentTime++;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <HAL_IncTick+0x28>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	3301      	adds	r3, #1
 80013de:	4a07      	ldr	r2, [pc, #28]	; (80013fc <HAL_IncTick+0x28>)
 80013e0:	6013      	str	r3, [r2, #0]
	if (time_call == 1) {
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <HAL_IncTick+0x2c>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d103      	bne.n	80013f2 <HAL_IncTick+0x1e>

		get_time();
 80013ea:	f7ff ffbd 	bl	8001368 <get_time>
		time_refresh();
 80013ee:	f7ff feb1 	bl	8001154 <time_refresh>
	}

	timer_flag = 1;
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <HAL_IncTick+0x30>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]

}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	2000039c 	.word	0x2000039c
 8001400:	2000025a 	.word	0x2000025a
 8001404:	200003a0 	.word	0x200003a0

08001408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800140c:	f000 fc44 	bl	8001c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001410:	f000 f840 	bl	8001494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001414:	f000 f9dc 	bl	80017d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001418:	f000 f896 	bl	8001548 <MX_I2C1_Init>
  MX_TIM1_Init();
 800141c:	f000 f926 	bl	800166c <MX_TIM1_Init>
  MX_TIM4_Init();
 8001420:	f000 f97c 	bl	800171c <MX_TIM4_Init>
  MX_RTC_Init();
 8001424:	f000 f8be 	bl	80015a4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001428:	f7ff f898 	bl	800055c <lcd_init>

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800142c:	2201      	movs	r2, #1
 800142e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001432:	4813      	ldr	r0, [pc, #76]	; (8001480 <main+0x78>)
 8001434:	f000 ff29 	bl	800228a <HAL_GPIO_WritePin>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001438:	213c      	movs	r1, #60	; 0x3c
 800143a:	4812      	ldr	r0, [pc, #72]	; (8001484 <main+0x7c>)
 800143c:	f003 f936 	bl	80046ac <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001440:	2108      	movs	r1, #8
 8001442:	4811      	ldr	r0, [pc, #68]	; (8001488 <main+0x80>)
 8001444:	f002 ffee 	bl	8004424 <HAL_TIM_PWM_Start>
  TIM4->CCR3 = 65535;
 8001448:	4b10      	ldr	r3, [pc, #64]	; (800148c <main+0x84>)
 800144a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800144e:	63da      	str	r2, [r3, #60]	; 0x3c

  menu_refresh();
 8001450:	f7ff fc00 	bl	8000c54 <menu_refresh>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (timer_flag) {
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <main+0x88>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d004      	beq.n	8001468 <main+0x60>
			lcd_refresh();
 800145e:	f7fe ff01 	bl	8000264 <lcd_refresh>
			timer_flag = 0;
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <main+0x88>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
		}
	  read_rotary_encoder();
 8001468:	f7ff feb4 	bl	80011d4 <read_rotary_encoder>
	  Read_Encoder_Button();
 800146c:	f7ff ff28 	bl	80012c0 <Read_Encoder_Button>
	  key_next_press();
 8001470:	f7ff fdca 	bl	8001008 <key_next_press>
	  key_enter_press();
 8001474:	f7ff fdf2 	bl	800105c <key_enter_press>
	  back_enter_press();
 8001478:	f7ff fe1c 	bl	80010b4 <back_enter_press>
		if (timer_flag) {
 800147c:	e7ea      	b.n	8001454 <main+0x4c>
 800147e:	bf00      	nop
 8001480:	40010c00 	.word	0x40010c00
 8001484:	2000030c 	.word	0x2000030c
 8001488:	20000354 	.word	0x20000354
 800148c:	40000800 	.word	0x40000800
 8001490:	200003a0 	.word	0x200003a0

08001494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b094      	sub	sp, #80	; 0x50
 8001498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800149e:	2228      	movs	r2, #40	; 0x28
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f003 fe82 	bl	80051ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80014c4:	230a      	movs	r3, #10
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c8:	2301      	movs	r3, #1
 80014ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014cc:	2310      	movs	r3, #16
 80014ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80014d0:	2301      	movs	r3, #1
 80014d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d4:	2302      	movs	r3, #2
 80014d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80014d8:	2300      	movs	r3, #0
 80014da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80014dc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80014e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014e6:	4618      	mov	r0, r3
 80014e8:	f001 fb90 	bl	8002c0c <HAL_RCC_OscConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80014f2:	f000 f9d3 	bl	800189c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f6:	230f      	movs	r3, #15
 80014f8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fa:	2302      	movs	r3, #2
 80014fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001506:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2102      	movs	r1, #2
 8001512:	4618      	mov	r0, r3
 8001514:	f001 fdfc 	bl	8003110 <HAL_RCC_ClockConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800151e:	f000 f9bd 	bl	800189c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001522:	2301      	movs	r3, #1
 8001524:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001526:	f44f 7300 	mov.w	r3, #512	; 0x200
 800152a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	4618      	mov	r0, r3
 8001530:	f001 ff7c 	bl	800342c <HAL_RCCEx_PeriphCLKConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800153a:	f000 f9af 	bl	800189c <Error_Handler>
  }
}
 800153e:	bf00      	nop
 8001540:	3750      	adds	r7, #80	; 0x50
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <MX_I2C1_Init+0x50>)
 800154e:	4a13      	ldr	r2, [pc, #76]	; (800159c <MX_I2C1_Init+0x54>)
 8001550:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_I2C1_Init+0x50>)
 8001554:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <MX_I2C1_Init+0x58>)
 8001556:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <MX_I2C1_Init+0x50>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <MX_I2C1_Init+0x50>)
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <MX_I2C1_Init+0x50>)
 8001566:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800156a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800156c:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <MX_I2C1_Init+0x50>)
 800156e:	2200      	movs	r2, #0
 8001570:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <MX_I2C1_Init+0x50>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001578:	4b07      	ldr	r3, [pc, #28]	; (8001598 <MX_I2C1_Init+0x50>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <MX_I2C1_Init+0x50>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001584:	4804      	ldr	r0, [pc, #16]	; (8001598 <MX_I2C1_Init+0x50>)
 8001586:	f000 fe99 	bl	80022bc <HAL_I2C_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001590:	f000 f984 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	200002a4 	.word	0x200002a4
 800159c:	40005400 	.word	0x40005400
 80015a0:	000186a0 	.word	0x000186a0

080015a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	2100      	movs	r1, #0
 80015b0:	460a      	mov	r2, r1
 80015b2:	801a      	strh	r2, [r3, #0]
 80015b4:	460a      	mov	r2, r1
 80015b6:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 80015bc:	463b      	mov	r3, r7
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015c4:	4b27      	ldr	r3, [pc, #156]	; (8001664 <MX_RTC_Init+0xc0>)
 80015c6:	4a28      	ldr	r2, [pc, #160]	; (8001668 <MX_RTC_Init+0xc4>)
 80015c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80015ca:	4b26      	ldr	r3, [pc, #152]	; (8001664 <MX_RTC_Init+0xc0>)
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295
 80015d0:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80015d2:	4b24      	ldr	r3, [pc, #144]	; (8001664 <MX_RTC_Init+0xc0>)
 80015d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015d8:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015da:	4822      	ldr	r0, [pc, #136]	; (8001664 <MX_RTC_Init+0xc0>)
 80015dc:	f002 f892 	bl	8003704 <HAL_RTC_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80015e6:	f000 f959 	bl	800189c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x15;
 80015ea:	2315      	movs	r3, #21
 80015ec:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x3;
 80015ee:	2303      	movs	r3, #3
 80015f0:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	2201      	movs	r2, #1
 80015fc:	4619      	mov	r1, r3
 80015fe:	4819      	ldr	r0, [pc, #100]	; (8001664 <MX_RTC_Init+0xc0>)
 8001600:	f002 f90c 	bl	800381c <HAL_RTC_SetTime>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 800160a:	f000 f947 	bl	800189c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800160e:	2300      	movs	r3, #0
 8001610:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_MAY;
 8001612:	2305      	movs	r3, #5
 8001614:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x19;
 8001616:	2319      	movs	r3, #25
 8001618:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x24;
 800161a:	2324      	movs	r3, #36	; 0x24
 800161c:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800161e:	f107 0308 	add.w	r3, r7, #8
 8001622:	2201      	movs	r2, #1
 8001624:	4619      	mov	r1, r3
 8001626:	480f      	ldr	r0, [pc, #60]	; (8001664 <MX_RTC_Init+0xc0>)
 8001628:	f002 fa68 	bl	8003afc <HAL_RTC_SetDate>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001632:	f000 f933 	bl	800189c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x13;
 8001636:	2313      	movs	r3, #19
 8001638:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x27;
 800163a:	2327      	movs	r3, #39	; 0x27
 800163c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800163e:	2300      	movs	r3, #0
 8001640:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001646:	463b      	mov	r3, r7
 8001648:	2201      	movs	r2, #1
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_RTC_Init+0xc0>)
 800164e:	f002 fb5f 	bl	8003d10 <HAL_RTC_SetAlarm>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8001658:	f000 f920 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200002f8 	.word	0x200002f8
 8001668:	40002800 	.word	0x40002800

0800166c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08c      	sub	sp, #48	; 0x30
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	2224      	movs	r2, #36	; 0x24
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f003 fd96 	bl	80051ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001688:	4b22      	ldr	r3, [pc, #136]	; (8001714 <MX_TIM1_Init+0xa8>)
 800168a:	4a23      	ldr	r2, [pc, #140]	; (8001718 <MX_TIM1_Init+0xac>)
 800168c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800168e:	4b21      	ldr	r3, [pc, #132]	; (8001714 <MX_TIM1_Init+0xa8>)
 8001690:	2200      	movs	r2, #0
 8001692:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001694:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <MX_TIM1_Init+0xa8>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800169a:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <MX_TIM1_Init+0xa8>)
 800169c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a2:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <MX_TIM1_Init+0xa8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016a8:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <MX_TIM1_Init+0xa8>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016ae:	4b19      	ldr	r3, [pc, #100]	; (8001714 <MX_TIM1_Init+0xa8>)
 80016b0:	2280      	movs	r2, #128	; 0x80
 80016b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016b4:	2303      	movs	r3, #3
 80016b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016b8:	2300      	movs	r3, #0
 80016ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80016c4:	230f      	movs	r3, #15
 80016c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80016c8:	2302      	movs	r3, #2
 80016ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016cc:	2301      	movs	r3, #1
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80016d4:	230f      	movs	r3, #15
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	4619      	mov	r1, r3
 80016de:	480d      	ldr	r0, [pc, #52]	; (8001714 <MX_TIM1_Init+0xa8>)
 80016e0:	f002 ff42 	bl	8004568 <HAL_TIM_Encoder_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80016ea:	f000 f8d7 	bl	800189c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	4619      	mov	r1, r3
 80016fa:	4806      	ldr	r0, [pc, #24]	; (8001714 <MX_TIM1_Init+0xa8>)
 80016fc:	f003 fc6a 	bl	8004fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001706:	f000 f8c9 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	3730      	adds	r7, #48	; 0x30
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	2000030c 	.word	0x2000030c
 8001718:	40012c00 	.word	0x40012c00

0800171c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001722:	f107 0320 	add.w	r3, r7, #32
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]
 800173a:	615a      	str	r2, [r3, #20]
 800173c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800173e:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <MX_TIM4_Init+0xac>)
 8001740:	4a22      	ldr	r2, [pc, #136]	; (80017cc <MX_TIM4_Init+0xb0>)
 8001742:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <MX_TIM4_Init+0xac>)
 8001746:	2200      	movs	r2, #0
 8001748:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174a:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <MX_TIM4_Init+0xac>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535-1;
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <MX_TIM4_Init+0xac>)
 8001752:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001756:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001758:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <MX_TIM4_Init+0xac>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <MX_TIM4_Init+0xac>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001764:	4818      	ldr	r0, [pc, #96]	; (80017c8 <MX_TIM4_Init+0xac>)
 8001766:	f002 fe0d 	bl	8004384 <HAL_TIM_PWM_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001770:	f000 f894 	bl	800189c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800177c:	f107 0320 	add.w	r3, r7, #32
 8001780:	4619      	mov	r1, r3
 8001782:	4811      	ldr	r0, [pc, #68]	; (80017c8 <MX_TIM4_Init+0xac>)
 8001784:	f003 fc26 	bl	8004fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800178e:	f000 f885 	bl	800189c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001792:	2360      	movs	r3, #96	; 0x60
 8001794:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	2208      	movs	r2, #8
 80017a6:	4619      	mov	r1, r3
 80017a8:	4807      	ldr	r0, [pc, #28]	; (80017c8 <MX_TIM4_Init+0xac>)
 80017aa:	f003 f915 	bl	80049d8 <HAL_TIM_PWM_ConfigChannel>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80017b4:	f000 f872 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017b8:	4803      	ldr	r0, [pc, #12]	; (80017c8 <MX_TIM4_Init+0xac>)
 80017ba:	f000 f987 	bl	8001acc <HAL_TIM_MspPostInit>

}
 80017be:	bf00      	nop
 80017c0:	3728      	adds	r7, #40	; 0x28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000354 	.word	0x20000354
 80017cc:	40000800 	.word	0x40000800

080017d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d6:	f107 0310 	add.w	r3, r7, #16
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e4:	4b2a      	ldr	r3, [pc, #168]	; (8001890 <MX_GPIO_Init+0xc0>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a29      	ldr	r2, [pc, #164]	; (8001890 <MX_GPIO_Init+0xc0>)
 80017ea:	f043 0310 	orr.w	r3, r3, #16
 80017ee:	6193      	str	r3, [r2, #24]
 80017f0:	4b27      	ldr	r3, [pc, #156]	; (8001890 <MX_GPIO_Init+0xc0>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fc:	4b24      	ldr	r3, [pc, #144]	; (8001890 <MX_GPIO_Init+0xc0>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a23      	ldr	r2, [pc, #140]	; (8001890 <MX_GPIO_Init+0xc0>)
 8001802:	f043 0304 	orr.w	r3, r3, #4
 8001806:	6193      	str	r3, [r2, #24]
 8001808:	4b21      	ldr	r3, [pc, #132]	; (8001890 <MX_GPIO_Init+0xc0>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001814:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <MX_GPIO_Init+0xc0>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a1d      	ldr	r2, [pc, #116]	; (8001890 <MX_GPIO_Init+0xc0>)
 800181a:	f043 0308 	orr.w	r3, r3, #8
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <MX_GPIO_Init+0xc0>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001832:	4818      	ldr	r0, [pc, #96]	; (8001894 <MX_GPIO_Init+0xc4>)
 8001834:	f000 fd29 	bl	800228a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SWITCH_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8001838:	2301      	movs	r3, #1
 800183a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8001844:	f107 0310 	add.w	r3, r7, #16
 8001848:	4619      	mov	r1, r3
 800184a:	4813      	ldr	r0, [pc, #76]	; (8001898 <MX_GPIO_Init+0xc8>)
 800184c:	f000 fb82 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACK_BUTTON_Pin */
  GPIO_InitStruct.Pin = BACK_BUTTON_Pin;
 8001850:	2302      	movs	r3, #2
 8001852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001858:	2302      	movs	r3, #2
 800185a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BACK_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800185c:	f107 0310 	add.w	r3, r7, #16
 8001860:	4619      	mov	r1, r3
 8001862:	480d      	ldr	r0, [pc, #52]	; (8001898 <MX_GPIO_Init+0xc8>)
 8001864:	f000 fb76 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800186c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186e:	2301      	movs	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001872:	2302      	movs	r3, #2
 8001874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2302      	movs	r3, #2
 8001878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800187a:	f107 0310 	add.w	r3, r7, #16
 800187e:	4619      	mov	r1, r3
 8001880:	4804      	ldr	r0, [pc, #16]	; (8001894 <MX_GPIO_Init+0xc4>)
 8001882:	f000 fb67 	bl	8001f54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001886:	bf00      	nop
 8001888:	3720      	adds	r7, #32
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000
 8001894:	40010c00 	.word	0x40010c00
 8001898:	40010800 	.word	0x40010800

0800189c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a0:	b672      	cpsid	i
}
 80018a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <Error_Handler+0x8>
	...

080018a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <HAL_MspInit+0x5c>)
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	4a14      	ldr	r2, [pc, #80]	; (8001904 <HAL_MspInit+0x5c>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6193      	str	r3, [r2, #24]
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_MspInit+0x5c>)
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <HAL_MspInit+0x5c>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	4a0e      	ldr	r2, [pc, #56]	; (8001904 <HAL_MspInit+0x5c>)
 80018cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d0:	61d3      	str	r3, [r2, #28]
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <HAL_MspInit+0x5c>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_MspInit+0x60>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	4a04      	ldr	r2, [pc, #16]	; (8001908 <HAL_MspInit+0x60>)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fa:	bf00      	nop
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	40021000 	.word	0x40021000
 8001908:	40010000 	.word	0x40010000

0800190c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0310 	add.w	r3, r7, #16
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a15      	ldr	r2, [pc, #84]	; (800197c <HAL_I2C_MspInit+0x70>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d123      	bne.n	8001974 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <HAL_I2C_MspInit+0x74>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	4a13      	ldr	r2, [pc, #76]	; (8001980 <HAL_I2C_MspInit+0x74>)
 8001932:	f043 0308 	orr.w	r3, r3, #8
 8001936:	6193      	str	r3, [r2, #24]
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_I2C_MspInit+0x74>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f003 0308 	and.w	r3, r3, #8
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001944:	23c0      	movs	r3, #192	; 0xc0
 8001946:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001948:	2312      	movs	r3, #18
 800194a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800194c:	2303      	movs	r3, #3
 800194e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001950:	f107 0310 	add.w	r3, r7, #16
 8001954:	4619      	mov	r1, r3
 8001956:	480b      	ldr	r0, [pc, #44]	; (8001984 <HAL_I2C_MspInit+0x78>)
 8001958:	f000 fafc 	bl	8001f54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <HAL_I2C_MspInit+0x74>)
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	4a07      	ldr	r2, [pc, #28]	; (8001980 <HAL_I2C_MspInit+0x74>)
 8001962:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001966:	61d3      	str	r3, [r2, #28]
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <HAL_I2C_MspInit+0x74>)
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001974:	bf00      	nop
 8001976:	3720      	adds	r7, #32
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40005400 	.word	0x40005400
 8001980:	40021000 	.word	0x40021000
 8001984:	40010c00 	.word	0x40010c00

08001988 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <HAL_RTC_MspInit+0x3c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d110      	bne.n	80019bc <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800199a:	f001 f92b 	bl	8002bf4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_RTC_MspInit+0x40>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	4a09      	ldr	r2, [pc, #36]	; (80019c8 <HAL_RTC_MspInit+0x40>)
 80019a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019a8:	61d3      	str	r3, [r2, #28]
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <HAL_RTC_MspInit+0x40>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_RTC_MspInit+0x44>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80019bc:	bf00      	nop
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40002800 	.word	0x40002800
 80019c8:	40021000 	.word	0x40021000
 80019cc:	4242043c 	.word	0x4242043c

080019d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a26      	ldr	r2, [pc, #152]	; (8001a84 <HAL_TIM_Encoder_MspInit+0xb4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d144      	bne.n	8001a7a <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019f0:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <HAL_TIM_Encoder_MspInit+0xb8>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4a24      	ldr	r2, [pc, #144]	; (8001a88 <HAL_TIM_Encoder_MspInit+0xb8>)
 80019f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019fa:	6193      	str	r3, [r2, #24]
 80019fc:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <HAL_TIM_Encoder_MspInit+0xb8>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a08:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	4a1e      	ldr	r2, [pc, #120]	; (8001a88 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001a0e:	f043 0304 	orr.w	r3, r3, #4
 8001a12:	6193      	str	r3, [r2, #24]
 8001a14:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8001a20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2e:	f107 0310 	add.w	r3, r7, #16
 8001a32:	4619      	mov	r1, r3
 8001a34:	4815      	ldr	r0, [pc, #84]	; (8001a8c <HAL_TIM_Encoder_MspInit+0xbc>)
 8001a36:	f000 fa8d 	bl	8001f54 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2018      	movs	r0, #24
 8001a40:	f000 fa51 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001a44:	2018      	movs	r0, #24
 8001a46:	f000 fa6a 	bl	8001f1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2019      	movs	r0, #25
 8001a50:	f000 fa49 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001a54:	2019      	movs	r0, #25
 8001a56:	f000 fa62 	bl	8001f1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	201a      	movs	r0, #26
 8001a60:	f000 fa41 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001a64:	201a      	movs	r0, #26
 8001a66:	f000 fa5a 	bl	8001f1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	201b      	movs	r0, #27
 8001a70:	f000 fa39 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001a74:	201b      	movs	r0, #27
 8001a76:	f000 fa52 	bl	8001f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a7a:	bf00      	nop
 8001a7c:	3720      	adds	r7, #32
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40012c00 	.word	0x40012c00
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40010800 	.word	0x40010800

08001a90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a09      	ldr	r2, [pc, #36]	; (8001ac4 <HAL_TIM_PWM_MspInit+0x34>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d10b      	bne.n	8001aba <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_TIM_PWM_MspInit+0x38>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4a08      	ldr	r2, [pc, #32]	; (8001ac8 <HAL_TIM_PWM_MspInit+0x38>)
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	61d3      	str	r3, [r2, #28]
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_TIM_PWM_MspInit+0x38>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	40000800 	.word	0x40000800
 8001ac8:	40021000 	.word	0x40021000

08001acc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0310 	add.w	r3, r7, #16
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a10      	ldr	r2, [pc, #64]	; (8001b28 <HAL_TIM_MspPostInit+0x5c>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d118      	bne.n	8001b1e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <HAL_TIM_MspPostInit+0x60>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a0e      	ldr	r2, [pc, #56]	; (8001b2c <HAL_TIM_MspPostInit+0x60>)
 8001af2:	f043 0308 	orr.w	r3, r3, #8
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <HAL_TIM_MspPostInit+0x60>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b12:	f107 0310 	add.w	r3, r7, #16
 8001b16:	4619      	mov	r1, r3
 8001b18:	4805      	ldr	r0, [pc, #20]	; (8001b30 <HAL_TIM_MspPostInit+0x64>)
 8001b1a:	f000 fa1b 	bl	8001f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b1e:	bf00      	nop
 8001b20:	3720      	adds	r7, #32
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40000800 	.word	0x40000800
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010c00 	.word	0x40010c00

08001b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b38:	e7fe      	b.n	8001b38 <NMI_Handler+0x4>

08001b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <HardFault_Handler+0x4>

08001b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <MemManage_Handler+0x4>

08001b46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <BusFault_Handler+0x4>

08001b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <UsageFault_Handler+0x4>

08001b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr

08001b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr

08001b76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b7a:	f7ff fc2b 	bl	80013d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <TIM1_BRK_IRQHandler+0x10>)
 8001b8a:	f002 fe1d 	bl	80047c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	2000030c 	.word	0x2000030c

08001b98 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b9c:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <TIM1_UP_IRQHandler+0x10>)
 8001b9e:	f002 fe13 	bl	80047c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	2000030c 	.word	0x2000030c

08001bac <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <TIM1_TRG_COM_IRQHandler+0x10>)
 8001bb2:	f002 fe09 	bl	80047c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	2000030c 	.word	0x2000030c

08001bc0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <TIM1_CC_IRQHandler+0x10>)
 8001bc6:	f002 fdff 	bl	80047c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	2000030c 	.word	0x2000030c

08001bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bdc:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <_sbrk+0x5c>)
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <_sbrk+0x60>)
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <_sbrk+0x64>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d102      	bne.n	8001bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <_sbrk+0x64>)
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <_sbrk+0x68>)
 8001bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <_sbrk+0x64>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d207      	bcs.n	8001c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c04:	f003 fada 	bl	80051bc <__errno>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c12:	e009      	b.n	8001c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <_sbrk+0x64>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <_sbrk+0x64>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	4a05      	ldr	r2, [pc, #20]	; (8001c38 <_sbrk+0x64>)
 8001c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c26:	68fb      	ldr	r3, [r7, #12]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20005000 	.word	0x20005000
 8001c34:	00000400 	.word	0x00000400
 8001c38:	200003a4 	.word	0x200003a4
 8001c3c:	200004f8 	.word	0x200004f8

08001c40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c4c:	f7ff fff8 	bl	8001c40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c50:	480b      	ldr	r0, [pc, #44]	; (8001c80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c52:	490c      	ldr	r1, [pc, #48]	; (8001c84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c54:	4a0c      	ldr	r2, [pc, #48]	; (8001c88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c58:	e002      	b.n	8001c60 <LoopCopyDataInit>

08001c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5e:	3304      	adds	r3, #4

08001c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c64:	d3f9      	bcc.n	8001c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c66:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c68:	4c09      	ldr	r4, [pc, #36]	; (8001c90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c6c:	e001      	b.n	8001c72 <LoopFillZerobss>

08001c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c70:	3204      	adds	r2, #4

08001c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c74:	d3fb      	bcc.n	8001c6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c76:	f003 faa7 	bl	80051c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c7a:	f7ff fbc5 	bl	8001408 <main>
  bx lr
 8001c7e:	4770      	bx	lr
  ldr r0, =_sdata
 8001c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c84:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001c88:	08005dec 	.word	0x08005dec
  ldr r2, =_sbss
 8001c8c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001c90:	200004f4 	.word	0x200004f4

08001c94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c94:	e7fe      	b.n	8001c94 <ADC1_2_IRQHandler>
	...

08001c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <HAL_Init+0x28>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a07      	ldr	r2, [pc, #28]	; (8001cc0 <HAL_Init+0x28>)
 8001ca2:	f043 0310 	orr.w	r3, r3, #16
 8001ca6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca8:	2003      	movs	r0, #3
 8001caa:	f000 f911 	bl	8001ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cae:	200f      	movs	r0, #15
 8001cb0:	f000 f808 	bl	8001cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb4:	f7ff fdf8 	bl	80018a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40022000 	.word	0x40022000

08001cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_InitTick+0x54>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_InitTick+0x58>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 f929 	bl	8001f3a <HAL_SYSTICK_Config>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00e      	b.n	8001d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b0f      	cmp	r3, #15
 8001cf6:	d80a      	bhi.n	8001d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	f000 f8f1 	bl	8001ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d04:	4a06      	ldr	r2, [pc, #24]	; (8001d20 <HAL_InitTick+0x5c>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e000      	b.n	8001d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000194 	.word	0x20000194
 8001d1c:	2000019c 	.word	0x2000019c
 8001d20:	20000198 	.word	0x20000198

08001d24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return uwTick;
 8001d28:	4b02      	ldr	r3, [pc, #8]	; (8001d34 <HAL_GetTick+0x10>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr
 8001d34:	200003a8 	.word	0x200003a8

08001d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d54:	4013      	ands	r3, r2
 8001d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6a:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	60d3      	str	r3, [r2, #12]
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <__NVIC_GetPriorityGrouping+0x18>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	0a1b      	lsrs	r3, r3, #8
 8001d8a:	f003 0307 	and.w	r3, r3, #7
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	db0b      	blt.n	8001dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	f003 021f 	and.w	r2, r3, #31
 8001db4:	4906      	ldr	r1, [pc, #24]	; (8001dd0 <__NVIC_EnableIRQ+0x34>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	e000e100 	.word	0xe000e100

08001dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	6039      	str	r1, [r7, #0]
 8001dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	db0a      	blt.n	8001dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	490c      	ldr	r1, [pc, #48]	; (8001e20 <__NVIC_SetPriority+0x4c>)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	0112      	lsls	r2, r2, #4
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	440b      	add	r3, r1
 8001df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dfc:	e00a      	b.n	8001e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4908      	ldr	r1, [pc, #32]	; (8001e24 <__NVIC_SetPriority+0x50>)
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	3b04      	subs	r3, #4
 8001e0c:	0112      	lsls	r2, r2, #4
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	440b      	add	r3, r1
 8001e12:	761a      	strb	r2, [r3, #24]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000e100 	.word	0xe000e100
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b089      	sub	sp, #36	; 0x24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f1c3 0307 	rsb	r3, r3, #7
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	bf28      	it	cs
 8001e46:	2304      	movcs	r3, #4
 8001e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	2b06      	cmp	r3, #6
 8001e50:	d902      	bls.n	8001e58 <NVIC_EncodePriority+0x30>
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3b03      	subs	r3, #3
 8001e56:	e000      	b.n	8001e5a <NVIC_EncodePriority+0x32>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43da      	mvns	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e70:	f04f 31ff 	mov.w	r1, #4294967295
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7a:	43d9      	mvns	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e80:	4313      	orrs	r3, r2
         );
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3724      	adds	r7, #36	; 0x24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e9c:	d301      	bcc.n	8001ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00f      	b.n	8001ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <SysTick_Config+0x40>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eaa:	210f      	movs	r1, #15
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f7ff ff90 	bl	8001dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <SysTick_Config+0x40>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eba:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <SysTick_Config+0x40>)
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	e000e010 	.word	0xe000e010

08001ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff2d 	bl	8001d38 <__NVIC_SetPriorityGrouping>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b086      	sub	sp, #24
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
 8001ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef8:	f7ff ff42 	bl	8001d80 <__NVIC_GetPriorityGrouping>
 8001efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	6978      	ldr	r0, [r7, #20]
 8001f04:	f7ff ff90 	bl	8001e28 <NVIC_EncodePriority>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff5f 	bl	8001dd4 <__NVIC_SetPriority>
}
 8001f16:	bf00      	nop
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff35 	bl	8001d9c <__NVIC_EnableIRQ>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ffa2 	bl	8001e8c <SysTick_Config>
 8001f48:	4603      	mov	r3, r0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b08b      	sub	sp, #44	; 0x2c
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f66:	e169      	b.n	800223c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f68:	2201      	movs	r2, #1
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	f040 8158 	bne.w	8002236 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	4a9a      	ldr	r2, [pc, #616]	; (80021f4 <HAL_GPIO_Init+0x2a0>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d05e      	beq.n	800204e <HAL_GPIO_Init+0xfa>
 8001f90:	4a98      	ldr	r2, [pc, #608]	; (80021f4 <HAL_GPIO_Init+0x2a0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d875      	bhi.n	8002082 <HAL_GPIO_Init+0x12e>
 8001f96:	4a98      	ldr	r2, [pc, #608]	; (80021f8 <HAL_GPIO_Init+0x2a4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d058      	beq.n	800204e <HAL_GPIO_Init+0xfa>
 8001f9c:	4a96      	ldr	r2, [pc, #600]	; (80021f8 <HAL_GPIO_Init+0x2a4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d86f      	bhi.n	8002082 <HAL_GPIO_Init+0x12e>
 8001fa2:	4a96      	ldr	r2, [pc, #600]	; (80021fc <HAL_GPIO_Init+0x2a8>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d052      	beq.n	800204e <HAL_GPIO_Init+0xfa>
 8001fa8:	4a94      	ldr	r2, [pc, #592]	; (80021fc <HAL_GPIO_Init+0x2a8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d869      	bhi.n	8002082 <HAL_GPIO_Init+0x12e>
 8001fae:	4a94      	ldr	r2, [pc, #592]	; (8002200 <HAL_GPIO_Init+0x2ac>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d04c      	beq.n	800204e <HAL_GPIO_Init+0xfa>
 8001fb4:	4a92      	ldr	r2, [pc, #584]	; (8002200 <HAL_GPIO_Init+0x2ac>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d863      	bhi.n	8002082 <HAL_GPIO_Init+0x12e>
 8001fba:	4a92      	ldr	r2, [pc, #584]	; (8002204 <HAL_GPIO_Init+0x2b0>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d046      	beq.n	800204e <HAL_GPIO_Init+0xfa>
 8001fc0:	4a90      	ldr	r2, [pc, #576]	; (8002204 <HAL_GPIO_Init+0x2b0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d85d      	bhi.n	8002082 <HAL_GPIO_Init+0x12e>
 8001fc6:	2b12      	cmp	r3, #18
 8001fc8:	d82a      	bhi.n	8002020 <HAL_GPIO_Init+0xcc>
 8001fca:	2b12      	cmp	r3, #18
 8001fcc:	d859      	bhi.n	8002082 <HAL_GPIO_Init+0x12e>
 8001fce:	a201      	add	r2, pc, #4	; (adr r2, 8001fd4 <HAL_GPIO_Init+0x80>)
 8001fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd4:	0800204f 	.word	0x0800204f
 8001fd8:	08002029 	.word	0x08002029
 8001fdc:	0800203b 	.word	0x0800203b
 8001fe0:	0800207d 	.word	0x0800207d
 8001fe4:	08002083 	.word	0x08002083
 8001fe8:	08002083 	.word	0x08002083
 8001fec:	08002083 	.word	0x08002083
 8001ff0:	08002083 	.word	0x08002083
 8001ff4:	08002083 	.word	0x08002083
 8001ff8:	08002083 	.word	0x08002083
 8001ffc:	08002083 	.word	0x08002083
 8002000:	08002083 	.word	0x08002083
 8002004:	08002083 	.word	0x08002083
 8002008:	08002083 	.word	0x08002083
 800200c:	08002083 	.word	0x08002083
 8002010:	08002083 	.word	0x08002083
 8002014:	08002083 	.word	0x08002083
 8002018:	08002031 	.word	0x08002031
 800201c:	08002045 	.word	0x08002045
 8002020:	4a79      	ldr	r2, [pc, #484]	; (8002208 <HAL_GPIO_Init+0x2b4>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002026:	e02c      	b.n	8002082 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	623b      	str	r3, [r7, #32]
          break;
 800202e:	e029      	b.n	8002084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	3304      	adds	r3, #4
 8002036:	623b      	str	r3, [r7, #32]
          break;
 8002038:	e024      	b.n	8002084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	3308      	adds	r3, #8
 8002040:	623b      	str	r3, [r7, #32]
          break;
 8002042:	e01f      	b.n	8002084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	330c      	adds	r3, #12
 800204a:	623b      	str	r3, [r7, #32]
          break;
 800204c:	e01a      	b.n	8002084 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d102      	bne.n	800205c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002056:	2304      	movs	r3, #4
 8002058:	623b      	str	r3, [r7, #32]
          break;
 800205a:	e013      	b.n	8002084 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d105      	bne.n	8002070 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002064:	2308      	movs	r3, #8
 8002066:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	611a      	str	r2, [r3, #16]
          break;
 800206e:	e009      	b.n	8002084 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002070:	2308      	movs	r3, #8
 8002072:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69fa      	ldr	r2, [r7, #28]
 8002078:	615a      	str	r2, [r3, #20]
          break;
 800207a:	e003      	b.n	8002084 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
          break;
 8002080:	e000      	b.n	8002084 <HAL_GPIO_Init+0x130>
          break;
 8002082:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	2bff      	cmp	r3, #255	; 0xff
 8002088:	d801      	bhi.n	800208e <HAL_GPIO_Init+0x13a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	e001      	b.n	8002092 <HAL_GPIO_Init+0x13e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3304      	adds	r3, #4
 8002092:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2bff      	cmp	r3, #255	; 0xff
 8002098:	d802      	bhi.n	80020a0 <HAL_GPIO_Init+0x14c>
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	e002      	b.n	80020a6 <HAL_GPIO_Init+0x152>
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	3b08      	subs	r3, #8
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	210f      	movs	r1, #15
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	fa01 f303 	lsl.w	r3, r1, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	401a      	ands	r2, r3
 80020b8:	6a39      	ldr	r1, [r7, #32]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	431a      	orrs	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 80b1 	beq.w	8002236 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020d4:	4b4d      	ldr	r3, [pc, #308]	; (800220c <HAL_GPIO_Init+0x2b8>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	4a4c      	ldr	r2, [pc, #304]	; (800220c <HAL_GPIO_Init+0x2b8>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6193      	str	r3, [r2, #24]
 80020e0:	4b4a      	ldr	r3, [pc, #296]	; (800220c <HAL_GPIO_Init+0x2b8>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020ec:	4a48      	ldr	r2, [pc, #288]	; (8002210 <HAL_GPIO_Init+0x2bc>)
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	3302      	adds	r3, #2
 80020f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	220f      	movs	r2, #15
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4013      	ands	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a40      	ldr	r2, [pc, #256]	; (8002214 <HAL_GPIO_Init+0x2c0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d013      	beq.n	8002140 <HAL_GPIO_Init+0x1ec>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a3f      	ldr	r2, [pc, #252]	; (8002218 <HAL_GPIO_Init+0x2c4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d00d      	beq.n	800213c <HAL_GPIO_Init+0x1e8>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a3e      	ldr	r2, [pc, #248]	; (800221c <HAL_GPIO_Init+0x2c8>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d007      	beq.n	8002138 <HAL_GPIO_Init+0x1e4>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a3d      	ldr	r2, [pc, #244]	; (8002220 <HAL_GPIO_Init+0x2cc>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d101      	bne.n	8002134 <HAL_GPIO_Init+0x1e0>
 8002130:	2303      	movs	r3, #3
 8002132:	e006      	b.n	8002142 <HAL_GPIO_Init+0x1ee>
 8002134:	2304      	movs	r3, #4
 8002136:	e004      	b.n	8002142 <HAL_GPIO_Init+0x1ee>
 8002138:	2302      	movs	r3, #2
 800213a:	e002      	b.n	8002142 <HAL_GPIO_Init+0x1ee>
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <HAL_GPIO_Init+0x1ee>
 8002140:	2300      	movs	r3, #0
 8002142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002144:	f002 0203 	and.w	r2, r2, #3
 8002148:	0092      	lsls	r2, r2, #2
 800214a:	4093      	lsls	r3, r2
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4313      	orrs	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002152:	492f      	ldr	r1, [pc, #188]	; (8002210 <HAL_GPIO_Init+0x2bc>)
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	3302      	adds	r3, #2
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800216c:	4b2d      	ldr	r3, [pc, #180]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	492c      	ldr	r1, [pc, #176]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	608b      	str	r3, [r1, #8]
 8002178:	e006      	b.n	8002188 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800217a:	4b2a      	ldr	r3, [pc, #168]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	43db      	mvns	r3, r3
 8002182:	4928      	ldr	r1, [pc, #160]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 8002184:	4013      	ands	r3, r2
 8002186:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d006      	beq.n	80021a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002194:	4b23      	ldr	r3, [pc, #140]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	4922      	ldr	r1, [pc, #136]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	60cb      	str	r3, [r1, #12]
 80021a0:	e006      	b.n	80021b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021a2:	4b20      	ldr	r3, [pc, #128]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	491e      	ldr	r1, [pc, #120]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d006      	beq.n	80021ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021bc:	4b19      	ldr	r3, [pc, #100]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	4918      	ldr	r1, [pc, #96]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	604b      	str	r3, [r1, #4]
 80021c8:	e006      	b.n	80021d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021ca:	4b16      	ldr	r3, [pc, #88]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	4914      	ldr	r1, [pc, #80]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d021      	beq.n	8002228 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021e4:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	490e      	ldr	r1, [pc, #56]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	600b      	str	r3, [r1, #0]
 80021f0:	e021      	b.n	8002236 <HAL_GPIO_Init+0x2e2>
 80021f2:	bf00      	nop
 80021f4:	10320000 	.word	0x10320000
 80021f8:	10310000 	.word	0x10310000
 80021fc:	10220000 	.word	0x10220000
 8002200:	10210000 	.word	0x10210000
 8002204:	10120000 	.word	0x10120000
 8002208:	10110000 	.word	0x10110000
 800220c:	40021000 	.word	0x40021000
 8002210:	40010000 	.word	0x40010000
 8002214:	40010800 	.word	0x40010800
 8002218:	40010c00 	.word	0x40010c00
 800221c:	40011000 	.word	0x40011000
 8002220:	40011400 	.word	0x40011400
 8002224:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_GPIO_Init+0x304>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	43db      	mvns	r3, r3
 8002230:	4909      	ldr	r1, [pc, #36]	; (8002258 <HAL_GPIO_Init+0x304>)
 8002232:	4013      	ands	r3, r2
 8002234:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	3301      	adds	r3, #1
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	fa22 f303 	lsr.w	r3, r2, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	f47f ae8e 	bne.w	8001f68 <HAL_GPIO_Init+0x14>
  }
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	372c      	adds	r7, #44	; 0x2c
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr
 8002258:	40010400 	.word	0x40010400

0800225c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	887b      	ldrh	r3, [r7, #2]
 800226e:	4013      	ands	r3, r2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002274:	2301      	movs	r3, #1
 8002276:	73fb      	strb	r3, [r7, #15]
 8002278:	e001      	b.n	800227e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800227a:	2300      	movs	r3, #0
 800227c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800227e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr

0800228a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	460b      	mov	r3, r1
 8002294:	807b      	strh	r3, [r7, #2]
 8002296:	4613      	mov	r3, r2
 8002298:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800229a:	787b      	ldrb	r3, [r7, #1]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022a0:	887a      	ldrh	r2, [r7, #2]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022a6:	e003      	b.n	80022b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022a8:	887b      	ldrh	r3, [r7, #2]
 80022aa:	041a      	lsls	r2, r3, #16
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	611a      	str	r2, [r3, #16]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr
	...

080022bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e12b      	b.n	8002526 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d106      	bne.n	80022e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff fb12 	bl	800190c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2224      	movs	r2, #36	; 0x24
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0201 	bic.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800230e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800231e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002320:	f001 f83e 	bl	80033a0 <HAL_RCC_GetPCLK1Freq>
 8002324:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	4a81      	ldr	r2, [pc, #516]	; (8002530 <HAL_I2C_Init+0x274>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d807      	bhi.n	8002340 <HAL_I2C_Init+0x84>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4a80      	ldr	r2, [pc, #512]	; (8002534 <HAL_I2C_Init+0x278>)
 8002334:	4293      	cmp	r3, r2
 8002336:	bf94      	ite	ls
 8002338:	2301      	movls	r3, #1
 800233a:	2300      	movhi	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	e006      	b.n	800234e <HAL_I2C_Init+0x92>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4a7d      	ldr	r2, [pc, #500]	; (8002538 <HAL_I2C_Init+0x27c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	bf94      	ite	ls
 8002348:	2301      	movls	r3, #1
 800234a:	2300      	movhi	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e0e7      	b.n	8002526 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4a78      	ldr	r2, [pc, #480]	; (800253c <HAL_I2C_Init+0x280>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	0c9b      	lsrs	r3, r3, #18
 8002360:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	430a      	orrs	r2, r1
 8002374:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	4a6a      	ldr	r2, [pc, #424]	; (8002530 <HAL_I2C_Init+0x274>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d802      	bhi.n	8002390 <HAL_I2C_Init+0xd4>
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	3301      	adds	r3, #1
 800238e:	e009      	b.n	80023a4 <HAL_I2C_Init+0xe8>
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002396:	fb02 f303 	mul.w	r3, r2, r3
 800239a:	4a69      	ldr	r2, [pc, #420]	; (8002540 <HAL_I2C_Init+0x284>)
 800239c:	fba2 2303 	umull	r2, r3, r2, r3
 80023a0:	099b      	lsrs	r3, r3, #6
 80023a2:	3301      	adds	r3, #1
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	430b      	orrs	r3, r1
 80023aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	495c      	ldr	r1, [pc, #368]	; (8002530 <HAL_I2C_Init+0x274>)
 80023c0:	428b      	cmp	r3, r1
 80023c2:	d819      	bhi.n	80023f8 <HAL_I2C_Init+0x13c>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1e59      	subs	r1, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80023d2:	1c59      	adds	r1, r3, #1
 80023d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023d8:	400b      	ands	r3, r1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00a      	beq.n	80023f4 <HAL_I2C_Init+0x138>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1e59      	subs	r1, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ec:	3301      	adds	r3, #1
 80023ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f2:	e051      	b.n	8002498 <HAL_I2C_Init+0x1dc>
 80023f4:	2304      	movs	r3, #4
 80023f6:	e04f      	b.n	8002498 <HAL_I2C_Init+0x1dc>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d111      	bne.n	8002424 <HAL_I2C_Init+0x168>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1e58      	subs	r0, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6859      	ldr	r1, [r3, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	440b      	add	r3, r1
 800240e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002412:	3301      	adds	r3, #1
 8002414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002418:	2b00      	cmp	r3, #0
 800241a:	bf0c      	ite	eq
 800241c:	2301      	moveq	r3, #1
 800241e:	2300      	movne	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	e012      	b.n	800244a <HAL_I2C_Init+0x18e>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	1e58      	subs	r0, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6859      	ldr	r1, [r3, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	0099      	lsls	r1, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	fbb0 f3f3 	udiv	r3, r0, r3
 800243a:	3301      	adds	r3, #1
 800243c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002440:	2b00      	cmp	r3, #0
 8002442:	bf0c      	ite	eq
 8002444:	2301      	moveq	r3, #1
 8002446:	2300      	movne	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_I2C_Init+0x196>
 800244e:	2301      	movs	r3, #1
 8002450:	e022      	b.n	8002498 <HAL_I2C_Init+0x1dc>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10e      	bne.n	8002478 <HAL_I2C_Init+0x1bc>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1e58      	subs	r0, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6859      	ldr	r1, [r3, #4]
 8002462:	460b      	mov	r3, r1
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	440b      	add	r3, r1
 8002468:	fbb0 f3f3 	udiv	r3, r0, r3
 800246c:	3301      	adds	r3, #1
 800246e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002476:	e00f      	b.n	8002498 <HAL_I2C_Init+0x1dc>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	1e58      	subs	r0, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6859      	ldr	r1, [r3, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	0099      	lsls	r1, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	fbb0 f3f3 	udiv	r3, r0, r3
 800248e:	3301      	adds	r3, #1
 8002490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002494:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	6809      	ldr	r1, [r1, #0]
 800249c:	4313      	orrs	r3, r2
 800249e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69da      	ldr	r2, [r3, #28]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6911      	ldr	r1, [r2, #16]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68d2      	ldr	r2, [r2, #12]
 80024d2:	4311      	orrs	r1, r2
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	430b      	orrs	r3, r1
 80024da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695a      	ldr	r2, [r3, #20]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2220      	movs	r2, #32
 8002512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	000186a0 	.word	0x000186a0
 8002534:	001e847f 	.word	0x001e847f
 8002538:	003d08ff 	.word	0x003d08ff
 800253c:	431bde83 	.word	0x431bde83
 8002540:	10624dd3 	.word	0x10624dd3

08002544 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af02      	add	r7, sp, #8
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	461a      	mov	r2, r3
 8002550:	460b      	mov	r3, r1
 8002552:	817b      	strh	r3, [r7, #10]
 8002554:	4613      	mov	r3, r2
 8002556:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002558:	f7ff fbe4 	bl	8001d24 <HAL_GetTick>
 800255c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b20      	cmp	r3, #32
 8002568:	f040 80e0 	bne.w	800272c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	2319      	movs	r3, #25
 8002572:	2201      	movs	r2, #1
 8002574:	4970      	ldr	r1, [pc, #448]	; (8002738 <HAL_I2C_Master_Transmit+0x1f4>)
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 f964 	bl	8002844 <I2C_WaitOnFlagUntilTimeout>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002582:	2302      	movs	r3, #2
 8002584:	e0d3      	b.n	800272e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_I2C_Master_Transmit+0x50>
 8002590:	2302      	movs	r3, #2
 8002592:	e0cc      	b.n	800272e <HAL_I2C_Master_Transmit+0x1ea>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d007      	beq.n	80025ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 0201 	orr.w	r2, r2, #1
 80025b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2221      	movs	r2, #33	; 0x21
 80025ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2210      	movs	r2, #16
 80025d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	893a      	ldrh	r2, [r7, #8]
 80025ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4a50      	ldr	r2, [pc, #320]	; (800273c <HAL_I2C_Master_Transmit+0x1f8>)
 80025fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025fc:	8979      	ldrh	r1, [r7, #10]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	6a3a      	ldr	r2, [r7, #32]
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 f89c 	bl	8002740 <I2C_MasterRequestWrite>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e08d      	b.n	800272e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002628:	e066      	b.n	80026f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	6a39      	ldr	r1, [r7, #32]
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 fa22 	bl	8002a78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00d      	beq.n	8002656 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	2b04      	cmp	r3, #4
 8002640:	d107      	bne.n	8002652 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002650:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e06b      	b.n	800272e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	781a      	ldrb	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b04      	cmp	r3, #4
 8002692:	d11b      	bne.n	80026cc <HAL_I2C_Master_Transmit+0x188>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002698:	2b00      	cmp	r3, #0
 800269a:	d017      	beq.n	80026cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	781a      	ldrb	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	6a39      	ldr	r1, [r7, #32]
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 fa19 	bl	8002b08 <I2C_WaitOnBTFFlagUntilTimeout>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00d      	beq.n	80026f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d107      	bne.n	80026f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e01a      	b.n	800272e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d194      	bne.n	800262a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800270e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	e000      	b.n	800272e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800272c:	2302      	movs	r3, #2
  }
}
 800272e:	4618      	mov	r0, r3
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	00100002 	.word	0x00100002
 800273c:	ffff0000 	.word	0xffff0000

08002740 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af02      	add	r7, sp, #8
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	607a      	str	r2, [r7, #4]
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	460b      	mov	r3, r1
 800274e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b08      	cmp	r3, #8
 800275a:	d006      	beq.n	800276a <I2C_MasterRequestWrite+0x2a>
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d003      	beq.n	800276a <I2C_MasterRequestWrite+0x2a>
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002768:	d108      	bne.n	800277c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	e00b      	b.n	8002794 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	2b12      	cmp	r3, #18
 8002782:	d107      	bne.n	8002794 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002792:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 f84f 	bl	8002844 <I2C_WaitOnFlagUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00d      	beq.n	80027c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ba:	d103      	bne.n	80027c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e035      	b.n	8002834 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027d0:	d108      	bne.n	80027e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027d2:	897b      	ldrh	r3, [r7, #10]
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	461a      	mov	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027e0:	611a      	str	r2, [r3, #16]
 80027e2:	e01b      	b.n	800281c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027e4:	897b      	ldrh	r3, [r7, #10]
 80027e6:	11db      	asrs	r3, r3, #7
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	f003 0306 	and.w	r3, r3, #6
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	f063 030f 	orn	r3, r3, #15
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	490e      	ldr	r1, [pc, #56]	; (800283c <I2C_MasterRequestWrite+0xfc>)
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 f898 	bl	8002938 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e010      	b.n	8002834 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002812:	897b      	ldrh	r3, [r7, #10]
 8002814:	b2da      	uxtb	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	4907      	ldr	r1, [pc, #28]	; (8002840 <I2C_MasterRequestWrite+0x100>)
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f888 	bl	8002938 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	00010008 	.word	0x00010008
 8002840:	00010002 	.word	0x00010002

08002844 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	603b      	str	r3, [r7, #0]
 8002850:	4613      	mov	r3, r2
 8002852:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002854:	e048      	b.n	80028e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285c:	d044      	beq.n	80028e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285e:	f7ff fa61 	bl	8001d24 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d302      	bcc.n	8002874 <I2C_WaitOnFlagUntilTimeout+0x30>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d139      	bne.n	80028e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	0c1b      	lsrs	r3, r3, #16
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d10d      	bne.n	800289a <I2C_WaitOnFlagUntilTimeout+0x56>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	43da      	mvns	r2, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	4013      	ands	r3, r2
 800288a:	b29b      	uxth	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	bf0c      	ite	eq
 8002890:	2301      	moveq	r3, #1
 8002892:	2300      	movne	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	461a      	mov	r2, r3
 8002898:	e00c      	b.n	80028b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	43da      	mvns	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	4013      	ands	r3, r2
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf0c      	ite	eq
 80028ac:	2301      	moveq	r3, #1
 80028ae:	2300      	movne	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	461a      	mov	r2, r3
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d116      	bne.n	80028e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	f043 0220 	orr.w	r2, r3, #32
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e023      	b.n	8002930 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	0c1b      	lsrs	r3, r3, #16
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d10d      	bne.n	800290e <I2C_WaitOnFlagUntilTimeout+0xca>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	43da      	mvns	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	4013      	ands	r3, r2
 80028fe:	b29b      	uxth	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	bf0c      	ite	eq
 8002904:	2301      	moveq	r3, #1
 8002906:	2300      	movne	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	461a      	mov	r2, r3
 800290c:	e00c      	b.n	8002928 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	43da      	mvns	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	4013      	ands	r3, r2
 800291a:	b29b      	uxth	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	bf0c      	ite	eq
 8002920:	2301      	moveq	r3, #1
 8002922:	2300      	movne	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	461a      	mov	r2, r3
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	429a      	cmp	r2, r3
 800292c:	d093      	beq.n	8002856 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002946:	e071      	b.n	8002a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002956:	d123      	bne.n	80029a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002966:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002970:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	f043 0204 	orr.w	r2, r3, #4
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e067      	b.n	8002a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a6:	d041      	beq.n	8002a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a8:	f7ff f9bc 	bl	8001d24 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d302      	bcc.n	80029be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d136      	bne.n	8002a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	0c1b      	lsrs	r3, r3, #16
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d10c      	bne.n	80029e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	43da      	mvns	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	4013      	ands	r3, r2
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	bf14      	ite	ne
 80029da:	2301      	movne	r3, #1
 80029dc:	2300      	moveq	r3, #0
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	e00b      	b.n	80029fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	43da      	mvns	r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	4013      	ands	r3, r2
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf14      	ite	ne
 80029f4:	2301      	movne	r3, #1
 80029f6:	2300      	moveq	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d016      	beq.n	8002a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	f043 0220 	orr.w	r2, r3, #32
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e021      	b.n	8002a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	0c1b      	lsrs	r3, r3, #16
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d10c      	bne.n	8002a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	43da      	mvns	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	4013      	ands	r3, r2
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bf14      	ite	ne
 8002a48:	2301      	movne	r3, #1
 8002a4a:	2300      	moveq	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	e00b      	b.n	8002a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	43da      	mvns	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	bf14      	ite	ne
 8002a62:	2301      	movne	r3, #1
 8002a64:	2300      	moveq	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f47f af6d 	bne.w	8002948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a84:	e034      	b.n	8002af0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 f886 	bl	8002b98 <I2C_IsAcknowledgeFailed>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e034      	b.n	8002b00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9c:	d028      	beq.n	8002af0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a9e:	f7ff f941 	bl	8001d24 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d302      	bcc.n	8002ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d11d      	bne.n	8002af0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abe:	2b80      	cmp	r3, #128	; 0x80
 8002ac0:	d016      	beq.n	8002af0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	f043 0220 	orr.w	r2, r3, #32
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e007      	b.n	8002b00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afa:	2b80      	cmp	r3, #128	; 0x80
 8002afc:	d1c3      	bne.n	8002a86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b14:	e034      	b.n	8002b80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f83e 	bl	8002b98 <I2C_IsAcknowledgeFailed>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e034      	b.n	8002b90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2c:	d028      	beq.n	8002b80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2e:	f7ff f8f9 	bl	8001d24 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d302      	bcc.n	8002b44 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d11d      	bne.n	8002b80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d016      	beq.n	8002b80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	f043 0220 	orr.w	r2, r3, #32
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e007      	b.n	8002b90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d1c3      	bne.n	8002b16 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bae:	d11b      	bne.n	8002be8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bb8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	f043 0204 	orr.w	r2, r3, #4
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002bf8:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
}
 8002bfe:	bf00      	nop
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	420e0020 	.word	0x420e0020

08002c0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e272      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 8087 	beq.w	8002d3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c2c:	4b92      	ldr	r3, [pc, #584]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 030c 	and.w	r3, r3, #12
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d00c      	beq.n	8002c52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c38:	4b8f      	ldr	r3, [pc, #572]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 030c 	and.w	r3, r3, #12
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d112      	bne.n	8002c6a <HAL_RCC_OscConfig+0x5e>
 8002c44:	4b8c      	ldr	r3, [pc, #560]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c50:	d10b      	bne.n	8002c6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c52:	4b89      	ldr	r3, [pc, #548]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d06c      	beq.n	8002d38 <HAL_RCC_OscConfig+0x12c>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d168      	bne.n	8002d38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e24c      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c72:	d106      	bne.n	8002c82 <HAL_RCC_OscConfig+0x76>
 8002c74:	4b80      	ldr	r3, [pc, #512]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a7f      	ldr	r2, [pc, #508]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	e02e      	b.n	8002ce0 <HAL_RCC_OscConfig+0xd4>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x98>
 8002c8a:	4b7b      	ldr	r3, [pc, #492]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a7a      	ldr	r2, [pc, #488]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	4b78      	ldr	r3, [pc, #480]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a77      	ldr	r2, [pc, #476]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	e01d      	b.n	8002ce0 <HAL_RCC_OscConfig+0xd4>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0xbc>
 8002cae:	4b72      	ldr	r3, [pc, #456]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a71      	ldr	r2, [pc, #452]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	4b6f      	ldr	r3, [pc, #444]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a6e      	ldr	r2, [pc, #440]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	e00b      	b.n	8002ce0 <HAL_RCC_OscConfig+0xd4>
 8002cc8:	4b6b      	ldr	r3, [pc, #428]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a6a      	ldr	r2, [pc, #424]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	4b68      	ldr	r3, [pc, #416]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a67      	ldr	r2, [pc, #412]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d013      	beq.n	8002d10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce8:	f7ff f81c 	bl	8001d24 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf0:	f7ff f818 	bl	8001d24 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b64      	cmp	r3, #100	; 0x64
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e200      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d02:	4b5d      	ldr	r3, [pc, #372]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0xe4>
 8002d0e:	e014      	b.n	8002d3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7ff f808 	bl	8001d24 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d18:	f7ff f804 	bl	8001d24 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b64      	cmp	r3, #100	; 0x64
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e1ec      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d2a:	4b53      	ldr	r3, [pc, #332]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x10c>
 8002d36:	e000      	b.n	8002d3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d063      	beq.n	8002e0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d46:	4b4c      	ldr	r3, [pc, #304]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00b      	beq.n	8002d6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d52:	4b49      	ldr	r3, [pc, #292]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d11c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x18c>
 8002d5e:	4b46      	ldr	r3, [pc, #280]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d116      	bne.n	8002d98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6a:	4b43      	ldr	r3, [pc, #268]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d005      	beq.n	8002d82 <HAL_RCC_OscConfig+0x176>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d001      	beq.n	8002d82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e1c0      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d82:	4b3d      	ldr	r3, [pc, #244]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4939      	ldr	r1, [pc, #228]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d96:	e03a      	b.n	8002e0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d020      	beq.n	8002de2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da0:	4b36      	ldr	r3, [pc, #216]	; (8002e7c <HAL_RCC_OscConfig+0x270>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da6:	f7fe ffbd 	bl	8001d24 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dae:	f7fe ffb9 	bl	8001d24 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e1a1      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc0:	4b2d      	ldr	r3, [pc, #180]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dcc:	4b2a      	ldr	r3, [pc, #168]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4927      	ldr	r1, [pc, #156]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	600b      	str	r3, [r1, #0]
 8002de0:	e015      	b.n	8002e0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002de2:	4b26      	ldr	r3, [pc, #152]	; (8002e7c <HAL_RCC_OscConfig+0x270>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7fe ff9c 	bl	8001d24 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df0:	f7fe ff98 	bl	8001d24 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e180      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e02:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d03a      	beq.n	8002e90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d019      	beq.n	8002e56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e22:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <HAL_RCC_OscConfig+0x274>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e28:	f7fe ff7c 	bl	8001d24 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e30:	f7fe ff78 	bl	8001d24 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e160      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e42:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e4e:	2001      	movs	r0, #1
 8002e50:	f000 face 	bl	80033f0 <RCC_Delay>
 8002e54:	e01c      	b.n	8002e90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <HAL_RCC_OscConfig+0x274>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5c:	f7fe ff62 	bl	8001d24 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e62:	e00f      	b.n	8002e84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e64:	f7fe ff5e 	bl	8001d24 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d908      	bls.n	8002e84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e146      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	42420000 	.word	0x42420000
 8002e80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e84:	4b92      	ldr	r3, [pc, #584]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e9      	bne.n	8002e64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 80a6 	beq.w	8002fea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea2:	4b8b      	ldr	r3, [pc, #556]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10d      	bne.n	8002eca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eae:	4b88      	ldr	r3, [pc, #544]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	4a87      	ldr	r2, [pc, #540]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	61d3      	str	r3, [r2, #28]
 8002eba:	4b85      	ldr	r3, [pc, #532]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eca:	4b82      	ldr	r3, [pc, #520]	; (80030d4 <HAL_RCC_OscConfig+0x4c8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d118      	bne.n	8002f08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ed6:	4b7f      	ldr	r3, [pc, #508]	; (80030d4 <HAL_RCC_OscConfig+0x4c8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a7e      	ldr	r2, [pc, #504]	; (80030d4 <HAL_RCC_OscConfig+0x4c8>)
 8002edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee2:	f7fe ff1f 	bl	8001d24 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eea:	f7fe ff1b 	bl	8001d24 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b64      	cmp	r3, #100	; 0x64
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e103      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efc:	4b75      	ldr	r3, [pc, #468]	; (80030d4 <HAL_RCC_OscConfig+0x4c8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d106      	bne.n	8002f1e <HAL_RCC_OscConfig+0x312>
 8002f10:	4b6f      	ldr	r3, [pc, #444]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	4a6e      	ldr	r2, [pc, #440]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	6213      	str	r3, [r2, #32]
 8002f1c:	e02d      	b.n	8002f7a <HAL_RCC_OscConfig+0x36e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x334>
 8002f26:	4b6a      	ldr	r3, [pc, #424]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	4a69      	ldr	r2, [pc, #420]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	6213      	str	r3, [r2, #32]
 8002f32:	4b67      	ldr	r3, [pc, #412]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4a66      	ldr	r2, [pc, #408]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	f023 0304 	bic.w	r3, r3, #4
 8002f3c:	6213      	str	r3, [r2, #32]
 8002f3e:	e01c      	b.n	8002f7a <HAL_RCC_OscConfig+0x36e>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b05      	cmp	r3, #5
 8002f46:	d10c      	bne.n	8002f62 <HAL_RCC_OscConfig+0x356>
 8002f48:	4b61      	ldr	r3, [pc, #388]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	4a60      	ldr	r2, [pc, #384]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f4e:	f043 0304 	orr.w	r3, r3, #4
 8002f52:	6213      	str	r3, [r2, #32]
 8002f54:	4b5e      	ldr	r3, [pc, #376]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	4a5d      	ldr	r2, [pc, #372]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	6213      	str	r3, [r2, #32]
 8002f60:	e00b      	b.n	8002f7a <HAL_RCC_OscConfig+0x36e>
 8002f62:	4b5b      	ldr	r3, [pc, #364]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	4a5a      	ldr	r2, [pc, #360]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	6213      	str	r3, [r2, #32]
 8002f6e:	4b58      	ldr	r3, [pc, #352]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	4a57      	ldr	r2, [pc, #348]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	f023 0304 	bic.w	r3, r3, #4
 8002f78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d015      	beq.n	8002fae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f82:	f7fe fecf 	bl	8001d24 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f88:	e00a      	b.n	8002fa0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8a:	f7fe fecb 	bl	8001d24 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e0b1      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa0:	4b4b      	ldr	r3, [pc, #300]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0ee      	beq.n	8002f8a <HAL_RCC_OscConfig+0x37e>
 8002fac:	e014      	b.n	8002fd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fae:	f7fe feb9 	bl	8001d24 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb4:	e00a      	b.n	8002fcc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb6:	f7fe feb5 	bl	8001d24 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e09b      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fcc:	4b40      	ldr	r3, [pc, #256]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1ee      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d105      	bne.n	8002fea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fde:	4b3c      	ldr	r3, [pc, #240]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	4a3b      	ldr	r2, [pc, #236]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 8087 	beq.w	8003102 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ff4:	4b36      	ldr	r3, [pc, #216]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 030c 	and.w	r3, r3, #12
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d061      	beq.n	80030c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d146      	bne.n	8003096 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003008:	4b33      	ldr	r3, [pc, #204]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300e:	f7fe fe89 	bl	8001d24 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003016:	f7fe fe85 	bl	8001d24 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e06d      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003028:	4b29      	ldr	r3, [pc, #164]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f0      	bne.n	8003016 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800303c:	d108      	bne.n	8003050 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800303e:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	4921      	ldr	r1, [pc, #132]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 800304c:	4313      	orrs	r3, r2
 800304e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003050:	4b1f      	ldr	r3, [pc, #124]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a19      	ldr	r1, [r3, #32]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	430b      	orrs	r3, r1
 8003062:	491b      	ldr	r1, [pc, #108]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8003064:	4313      	orrs	r3, r2
 8003066:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 800306a:	2201      	movs	r2, #1
 800306c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306e:	f7fe fe59 	bl	8001d24 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003076:	f7fe fe55 	bl	8001d24 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e03d      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003088:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x46a>
 8003094:	e035      	b.n	8003102 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003096:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fe fe42 	bl	8001d24 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fe fe3e 	bl	8001d24 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e026      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x498>
 80030c2:	e01e      	b.n	8003102 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e019      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
 80030d0:	40021000 	.word	0x40021000
 80030d4:	40007000 	.word	0x40007000
 80030d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <HAL_RCC_OscConfig+0x500>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d106      	bne.n	80030fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d001      	beq.n	8003102 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40021000 	.word	0x40021000

08003110 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0d0      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003124:	4b6a      	ldr	r3, [pc, #424]	; (80032d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d910      	bls.n	8003154 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003132:	4b67      	ldr	r3, [pc, #412]	; (80032d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f023 0207 	bic.w	r2, r3, #7
 800313a:	4965      	ldr	r1, [pc, #404]	; (80032d0 <HAL_RCC_ClockConfig+0x1c0>)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	4313      	orrs	r3, r2
 8003140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003142:	4b63      	ldr	r3, [pc, #396]	; (80032d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d001      	beq.n	8003154 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0b8      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d020      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800316c:	4b59      	ldr	r3, [pc, #356]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	4a58      	ldr	r2, [pc, #352]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003172:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003176:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003184:	4b53      	ldr	r3, [pc, #332]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	4a52      	ldr	r2, [pc, #328]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 800318a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800318e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003190:	4b50      	ldr	r3, [pc, #320]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	494d      	ldr	r1, [pc, #308]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d040      	beq.n	8003230 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d107      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b6:	4b47      	ldr	r3, [pc, #284]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d115      	bne.n	80031ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e07f      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d107      	bne.n	80031de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ce:	4b41      	ldr	r3, [pc, #260]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d109      	bne.n	80031ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e073      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031de:	4b3d      	ldr	r3, [pc, #244]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e06b      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ee:	4b39      	ldr	r3, [pc, #228]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f023 0203 	bic.w	r2, r3, #3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	4936      	ldr	r1, [pc, #216]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003200:	f7fe fd90 	bl	8001d24 <HAL_GetTick>
 8003204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003206:	e00a      	b.n	800321e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003208:	f7fe fd8c 	bl	8001d24 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	f241 3288 	movw	r2, #5000	; 0x1388
 8003216:	4293      	cmp	r3, r2
 8003218:	d901      	bls.n	800321e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e053      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321e:	4b2d      	ldr	r3, [pc, #180]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 020c 	and.w	r2, r3, #12
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	429a      	cmp	r2, r3
 800322e:	d1eb      	bne.n	8003208 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003230:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d210      	bcs.n	8003260 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323e:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f023 0207 	bic.w	r2, r3, #7
 8003246:	4922      	ldr	r1, [pc, #136]	; (80032d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	4313      	orrs	r3, r2
 800324c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800324e:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d001      	beq.n	8003260 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e032      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800326c:	4b19      	ldr	r3, [pc, #100]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4916      	ldr	r1, [pc, #88]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	4313      	orrs	r3, r2
 800327c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d009      	beq.n	800329e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800328a:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	490e      	ldr	r1, [pc, #56]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 800329a:	4313      	orrs	r3, r2
 800329c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800329e:	f000 f821 	bl	80032e4 <HAL_RCC_GetSysClockFreq>
 80032a2:	4602      	mov	r2, r0
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	091b      	lsrs	r3, r3, #4
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	490a      	ldr	r1, [pc, #40]	; (80032d8 <HAL_RCC_ClockConfig+0x1c8>)
 80032b0:	5ccb      	ldrb	r3, [r1, r3]
 80032b2:	fa22 f303 	lsr.w	r3, r2, r3
 80032b6:	4a09      	ldr	r2, [pc, #36]	; (80032dc <HAL_RCC_ClockConfig+0x1cc>)
 80032b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032ba:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_RCC_ClockConfig+0x1d0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fe fd00 	bl	8001cc4 <HAL_InitTick>

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40022000 	.word	0x40022000
 80032d4:	40021000 	.word	0x40021000
 80032d8:	08005d4c 	.word	0x08005d4c
 80032dc:	20000194 	.word	0x20000194
 80032e0:	20000198 	.word	0x20000198

080032e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	2300      	movs	r3, #0
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
 80032f6:	2300      	movs	r3, #0
 80032f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032fe:	4b1e      	ldr	r3, [pc, #120]	; (8003378 <HAL_RCC_GetSysClockFreq+0x94>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b04      	cmp	r3, #4
 800330c:	d002      	beq.n	8003314 <HAL_RCC_GetSysClockFreq+0x30>
 800330e:	2b08      	cmp	r3, #8
 8003310:	d003      	beq.n	800331a <HAL_RCC_GetSysClockFreq+0x36>
 8003312:	e027      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003314:	4b19      	ldr	r3, [pc, #100]	; (800337c <HAL_RCC_GetSysClockFreq+0x98>)
 8003316:	613b      	str	r3, [r7, #16]
      break;
 8003318:	e027      	b.n	800336a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	0c9b      	lsrs	r3, r3, #18
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	4a17      	ldr	r2, [pc, #92]	; (8003380 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003324:	5cd3      	ldrb	r3, [r2, r3]
 8003326:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d010      	beq.n	8003354 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003332:	4b11      	ldr	r3, [pc, #68]	; (8003378 <HAL_RCC_GetSysClockFreq+0x94>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	0c5b      	lsrs	r3, r3, #17
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	4a11      	ldr	r2, [pc, #68]	; (8003384 <HAL_RCC_GetSysClockFreq+0xa0>)
 800333e:	5cd3      	ldrb	r3, [r2, r3]
 8003340:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a0d      	ldr	r2, [pc, #52]	; (800337c <HAL_RCC_GetSysClockFreq+0x98>)
 8003346:	fb03 f202 	mul.w	r2, r3, r2
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003350:	617b      	str	r3, [r7, #20]
 8003352:	e004      	b.n	800335e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a0c      	ldr	r2, [pc, #48]	; (8003388 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003358:	fb02 f303 	mul.w	r3, r2, r3
 800335c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	613b      	str	r3, [r7, #16]
      break;
 8003362:	e002      	b.n	800336a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <HAL_RCC_GetSysClockFreq+0x98>)
 8003366:	613b      	str	r3, [r7, #16]
      break;
 8003368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800336a:	693b      	ldr	r3, [r7, #16]
}
 800336c:	4618      	mov	r0, r3
 800336e:	371c      	adds	r7, #28
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40021000 	.word	0x40021000
 800337c:	007a1200 	.word	0x007a1200
 8003380:	08005d64 	.word	0x08005d64
 8003384:	08005d74 	.word	0x08005d74
 8003388:	003d0900 	.word	0x003d0900

0800338c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003390:	4b02      	ldr	r3, [pc, #8]	; (800339c <HAL_RCC_GetHCLKFreq+0x10>)
 8003392:	681b      	ldr	r3, [r3, #0]
}
 8003394:	4618      	mov	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	20000194 	.word	0x20000194

080033a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033a4:	f7ff fff2 	bl	800338c <HAL_RCC_GetHCLKFreq>
 80033a8:	4602      	mov	r2, r0
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	0a1b      	lsrs	r3, r3, #8
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	4903      	ldr	r1, [pc, #12]	; (80033c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033b6:	5ccb      	ldrb	r3, [r1, r3]
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033bc:	4618      	mov	r0, r3
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40021000 	.word	0x40021000
 80033c4:	08005d5c 	.word	0x08005d5c

080033c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033cc:	f7ff ffde 	bl	800338c <HAL_RCC_GetHCLKFreq>
 80033d0:	4602      	mov	r2, r0
 80033d2:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	0adb      	lsrs	r3, r3, #11
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	4903      	ldr	r1, [pc, #12]	; (80033ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80033de:	5ccb      	ldrb	r3, [r1, r3]
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40021000 	.word	0x40021000
 80033ec:	08005d5c 	.word	0x08005d5c

080033f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033f8:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <RCC_Delay+0x34>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <RCC_Delay+0x38>)
 80033fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003402:	0a5b      	lsrs	r3, r3, #9
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	fb02 f303 	mul.w	r3, r2, r3
 800340a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800340c:	bf00      	nop
  }
  while (Delay --);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1e5a      	subs	r2, r3, #1
 8003412:	60fa      	str	r2, [r7, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f9      	bne.n	800340c <RCC_Delay+0x1c>
}
 8003418:	bf00      	nop
 800341a:	bf00      	nop
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr
 8003424:	20000194 	.word	0x20000194
 8003428:	10624dd3 	.word	0x10624dd3

0800342c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d07d      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003448:	2300      	movs	r3, #0
 800344a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800344c:	4b4f      	ldr	r3, [pc, #316]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10d      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003458:	4b4c      	ldr	r3, [pc, #304]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	4a4b      	ldr	r2, [pc, #300]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003462:	61d3      	str	r3, [r2, #28]
 8003464:	4b49      	ldr	r3, [pc, #292]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003470:	2301      	movs	r3, #1
 8003472:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003474:	4b46      	ldr	r3, [pc, #280]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d118      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003480:	4b43      	ldr	r3, [pc, #268]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a42      	ldr	r2, [pc, #264]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800348a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800348c:	f7fe fc4a 	bl	8001d24 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003492:	e008      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003494:	f7fe fc46 	bl	8001d24 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	; 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e06d      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a6:	4b3a      	ldr	r3, [pc, #232]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034b2:	4b36      	ldr	r3, [pc, #216]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d02e      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d027      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034d0:	4b2e      	ldr	r3, [pc, #184]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034da:	4b2e      	ldr	r3, [pc, #184]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034dc:	2201      	movs	r2, #1
 80034de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034e0:	4b2c      	ldr	r3, [pc, #176]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034e6:	4a29      	ldr	r2, [pc, #164]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d014      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f6:	f7fe fc15 	bl	8001d24 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fc:	e00a      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fe:	f7fe fc11 	bl	8001d24 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	f241 3288 	movw	r2, #5000	; 0x1388
 800350c:	4293      	cmp	r3, r2
 800350e:	d901      	bls.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e036      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003514:	4b1d      	ldr	r3, [pc, #116]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0ee      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003520:	4b1a      	ldr	r3, [pc, #104]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	4917      	ldr	r1, [pc, #92]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352e:	4313      	orrs	r3, r2
 8003530:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003532:	7dfb      	ldrb	r3, [r7, #23]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d105      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003538:	4b14      	ldr	r3, [pc, #80]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	4a13      	ldr	r2, [pc, #76]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800353e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003542:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d008      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003550:	4b0e      	ldr	r3, [pc, #56]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	490b      	ldr	r1, [pc, #44]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355e:	4313      	orrs	r3, r2
 8003560:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0310 	and.w	r3, r3, #16
 800356a:	2b00      	cmp	r3, #0
 800356c:	d008      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800356e:	4b07      	ldr	r3, [pc, #28]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	4904      	ldr	r1, [pc, #16]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357c:	4313      	orrs	r3, r2
 800357e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40021000 	.word	0x40021000
 8003590:	40007000 	.word	0x40007000
 8003594:	42420440 	.word	0x42420440

08003598 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	2300      	movs	r3, #0
 80035a6:	61fb      	str	r3, [r7, #28]
 80035a8:	2300      	movs	r3, #0
 80035aa:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	2300      	movs	r3, #0
 80035b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b10      	cmp	r3, #16
 80035b8:	d00a      	beq.n	80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b10      	cmp	r3, #16
 80035be:	f200 808a 	bhi.w	80036d6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d045      	beq.n	8003654 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d075      	beq.n	80036ba <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80035ce:	e082      	b.n	80036d6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80035d0:	4b46      	ldr	r3, [pc, #280]	; (80036ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80035d6:	4b45      	ldr	r3, [pc, #276]	; (80036ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d07b      	beq.n	80036da <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	0c9b      	lsrs	r3, r3, #18
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	4a41      	ldr	r2, [pc, #260]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80035ec:	5cd3      	ldrb	r3, [r2, r3]
 80035ee:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d015      	beq.n	8003626 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035fa:	4b3c      	ldr	r3, [pc, #240]	; (80036ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	0c5b      	lsrs	r3, r3, #17
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	4a3b      	ldr	r2, [pc, #236]	; (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003606:	5cd3      	ldrb	r3, [r2, r3]
 8003608:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00d      	beq.n	8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003614:	4a38      	ldr	r2, [pc, #224]	; (80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	fbb2 f2f3 	udiv	r2, r2, r3
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	fb02 f303 	mul.w	r3, r2, r3
 8003622:	61fb      	str	r3, [r7, #28]
 8003624:	e004      	b.n	8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	4a34      	ldr	r2, [pc, #208]	; (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800362a:	fb02 f303 	mul.w	r3, r2, r3
 800362e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003630:	4b2e      	ldr	r3, [pc, #184]	; (80036ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003638:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800363c:	d102      	bne.n	8003644 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	61bb      	str	r3, [r7, #24]
      break;
 8003642:	e04a      	b.n	80036da <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4a2d      	ldr	r2, [pc, #180]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800364a:	fba2 2303 	umull	r2, r3, r2, r3
 800364e:	085b      	lsrs	r3, r3, #1
 8003650:	61bb      	str	r3, [r7, #24]
      break;
 8003652:	e042      	b.n	80036da <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003654:	4b25      	ldr	r3, [pc, #148]	; (80036ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003664:	d108      	bne.n	8003678 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003670:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	e01f      	b.n	80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800367e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003682:	d109      	bne.n	8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003684:	4b19      	ldr	r3, [pc, #100]	; (80036ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003690:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	e00f      	b.n	80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800369e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036a2:	d11c      	bne.n	80036de <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80036a4:	4b11      	ldr	r3, [pc, #68]	; (80036ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d016      	beq.n	80036de <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80036b0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80036b4:	61bb      	str	r3, [r7, #24]
      break;
 80036b6:	e012      	b.n	80036de <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80036b8:	e011      	b.n	80036de <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80036ba:	f7ff fe85 	bl	80033c8 <HAL_RCC_GetPCLK2Freq>
 80036be:	4602      	mov	r2, r0
 80036c0:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	0b9b      	lsrs	r3, r3, #14
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	3301      	adds	r3, #1
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d2:	61bb      	str	r3, [r7, #24]
      break;
 80036d4:	e004      	b.n	80036e0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80036d6:	bf00      	nop
 80036d8:	e002      	b.n	80036e0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80036da:	bf00      	nop
 80036dc:	e000      	b.n	80036e0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80036de:	bf00      	nop
    }
  }
  return (frequency);
 80036e0:	69bb      	ldr	r3, [r7, #24]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3720      	adds	r7, #32
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40021000 	.word	0x40021000
 80036f0:	08005d78 	.word	0x08005d78
 80036f4:	08005d88 	.word	0x08005d88
 80036f8:	007a1200 	.word	0x007a1200
 80036fc:	003d0900 	.word	0x003d0900
 8003700:	aaaaaaab 	.word	0xaaaaaaab

08003704 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e07a      	b.n	8003810 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	7c5b      	ldrb	r3, [r3, #17]
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d105      	bne.n	8003730 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fe f92c 	bl	8001988 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 fb83 	bl	8003e42 <HAL_RTC_WaitForSynchro>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d004      	beq.n	800374c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2204      	movs	r2, #4
 8003746:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e061      	b.n	8003810 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fc3c 	bl	8003fca <RTC_EnterInitMode>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d004      	beq.n	8003762 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2204      	movs	r2, #4
 800375c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e056      	b.n	8003810 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0207 	bic.w	r2, r2, #7
 8003770:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d005      	beq.n	8003786 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800377a:	4b27      	ldr	r3, [pc, #156]	; (8003818 <HAL_RTC_Init+0x114>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	4a26      	ldr	r2, [pc, #152]	; (8003818 <HAL_RTC_Init+0x114>)
 8003780:	f023 0301 	bic.w	r3, r3, #1
 8003784:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003786:	4b24      	ldr	r3, [pc, #144]	; (8003818 <HAL_RTC_Init+0x114>)
 8003788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	4921      	ldr	r1, [pc, #132]	; (8003818 <HAL_RTC_Init+0x114>)
 8003794:	4313      	orrs	r3, r2
 8003796:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a0:	d003      	beq.n	80037aa <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	e00e      	b.n	80037c8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80037aa:	2001      	movs	r0, #1
 80037ac:	f7ff fef4 	bl	8003598 <HAL_RCCEx_GetPeriphCLKFreq>
 80037b0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d104      	bne.n	80037c2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2204      	movs	r2, #4
 80037bc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e026      	b.n	8003810 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	0c1a      	lsrs	r2, r3, #16
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f002 020f 	and.w	r2, r2, #15
 80037d4:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	b292      	uxth	r2, r2
 80037de:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fc1a 	bl	800401a <RTC_ExitInitMode>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d004      	beq.n	80037f6 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2204      	movs	r2, #4
 80037f0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e00c      	b.n	8003810 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800380e:	2300      	movs	r3, #0
  }
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40006c00 	.word	0x40006c00

0800381c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800381c:	b590      	push	{r4, r7, lr}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	2300      	movs	r3, #0
 800382e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <HAL_RTC_SetTime+0x20>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e080      	b.n	8003942 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	7c1b      	ldrb	r3, [r3, #16]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_RTC_SetTime+0x30>
 8003848:	2302      	movs	r3, #2
 800384a:	e07a      	b.n	8003942 <HAL_RTC_SetTime+0x126>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2201      	movs	r2, #1
 8003850:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2202      	movs	r2, #2
 8003856:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d113      	bne.n	8003886 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003868:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	785b      	ldrb	r3, [r3, #1]
 8003870:	4619      	mov	r1, r3
 8003872:	460b      	mov	r3, r1
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	1a5b      	subs	r3, r3, r1
 8003878:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800387a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003880:	4413      	add	r3, r2
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	e01e      	b.n	80038c4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fc0a 	bl	80040a4 <RTC_Bcd2ToByte>
 8003890:	4603      	mov	r3, r0
 8003892:	461a      	mov	r2, r3
 8003894:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003898:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	785b      	ldrb	r3, [r3, #1]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fbff 	bl	80040a4 <RTC_Bcd2ToByte>
 80038a6:	4603      	mov	r3, r0
 80038a8:	461a      	mov	r2, r3
 80038aa:	4613      	mov	r3, r2
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	1a9b      	subs	r3, r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80038b2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	789b      	ldrb	r3, [r3, #2]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 fbf3 	bl	80040a4 <RTC_Bcd2ToByte>
 80038be:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80038c0:	4423      	add	r3, r4
 80038c2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80038c4:	6979      	ldr	r1, [r7, #20]
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 fb18 	bl	8003efc <RTC_WriteTimeCounter>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d007      	beq.n	80038e2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2204      	movs	r2, #4
 80038d6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e02f      	b.n	8003942 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0205 	bic.w	r2, r2, #5
 80038f0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 fb29 	bl	8003f4a <RTC_ReadAlarmCounter>
 80038f8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003900:	d018      	beq.n	8003934 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	429a      	cmp	r2, r3
 8003908:	d214      	bcs.n	8003934 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003910:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003914:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003916:	6939      	ldr	r1, [r7, #16]
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 fb2f 	bl	8003f7c <RTC_WriteAlarmCounter>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d007      	beq.n	8003934 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2204      	movs	r2, #4
 8003928:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e006      	b.n	8003942 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2201      	movs	r2, #1
 8003938:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003940:	2300      	movs	r3, #0
  }
}
 8003942:	4618      	mov	r0, r3
 8003944:	371c      	adds	r7, #28
 8003946:	46bd      	mov	sp, r7
 8003948:	bd90      	pop	{r4, r7, pc}
	...

0800394c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	61bb      	str	r3, [r7, #24]
 800395c:	2300      	movs	r3, #0
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	2300      	movs	r3, #0
 8003966:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <HAL_RTC_GetTime+0x28>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0b5      	b.n	8003ae4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e0ac      	b.n	8003ae4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 fa86 	bl	8003e9c <RTC_ReadTimeCounter>
 8003990:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	4a55      	ldr	r2, [pc, #340]	; (8003aec <HAL_RTC_GetTime+0x1a0>)
 8003996:	fba2 2303 	umull	r2, r3, r2, r3
 800399a:	0adb      	lsrs	r3, r3, #11
 800399c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4b52      	ldr	r3, [pc, #328]	; (8003aec <HAL_RTC_GetTime+0x1a0>)
 80039a2:	fba3 1302 	umull	r1, r3, r3, r2
 80039a6:	0adb      	lsrs	r3, r3, #11
 80039a8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	4a4f      	ldr	r2, [pc, #316]	; (8003af0 <HAL_RTC_GetTime+0x1a4>)
 80039b4:	fba2 2303 	umull	r2, r3, r2, r3
 80039b8:	095b      	lsrs	r3, r3, #5
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	4a4a      	ldr	r2, [pc, #296]	; (8003aec <HAL_RTC_GetTime+0x1a0>)
 80039c4:	fba2 1203 	umull	r1, r2, r2, r3
 80039c8:	0ad2      	lsrs	r2, r2, #11
 80039ca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80039ce:	fb01 f202 	mul.w	r2, r1, r2
 80039d2:	1a9a      	subs	r2, r3, r2
 80039d4:	4b46      	ldr	r3, [pc, #280]	; (8003af0 <HAL_RTC_GetTime+0x1a4>)
 80039d6:	fba3 1302 	umull	r1, r3, r3, r2
 80039da:	0959      	lsrs	r1, r3, #5
 80039dc:	460b      	mov	r3, r1
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	1a5b      	subs	r3, r3, r1
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	1ad1      	subs	r1, r2, r3
 80039e6:	b2ca      	uxtb	r2, r1
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	2b17      	cmp	r3, #23
 80039f0:	d955      	bls.n	8003a9e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4a3f      	ldr	r2, [pc, #252]	; (8003af4 <HAL_RTC_GetTime+0x1a8>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	091b      	lsrs	r3, r3, #4
 80039fc:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80039fe:	6939      	ldr	r1, [r7, #16]
 8003a00:	4b3c      	ldr	r3, [pc, #240]	; (8003af4 <HAL_RTC_GetTime+0x1a8>)
 8003a02:	fba3 2301 	umull	r2, r3, r3, r1
 8003a06:	091a      	lsrs	r2, r3, #4
 8003a08:	4613      	mov	r3, r2
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	4413      	add	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	1aca      	subs	r2, r1, r3
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 fa96 	bl	8003f4a <RTC_ReadAlarmCounter>
 8003a1e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a26:	d008      	beq.n	8003a3a <HAL_RTC_GetTime+0xee>
 8003a28:	69fa      	ldr	r2, [r7, #28]
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d904      	bls.n	8003a3a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	61fb      	str	r3, [r7, #28]
 8003a38:	e002      	b.n	8003a40 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	4a2d      	ldr	r2, [pc, #180]	; (8003af8 <HAL_RTC_GetTime+0x1ac>)
 8003a44:	fb02 f303 	mul.w	r3, r2, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003a4e:	69b9      	ldr	r1, [r7, #24]
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 fa53 	bl	8003efc <RTC_WriteTimeCounter>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e041      	b.n	8003ae4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a66:	d00c      	beq.n	8003a82 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003a68:	69fa      	ldr	r2, [r7, #28]
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003a70:	69f9      	ldr	r1, [r7, #28]
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 fa82 	bl	8003f7c <RTC_WriteAlarmCounter>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e030      	b.n	8003ae4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003a82:	69f9      	ldr	r1, [r7, #28]
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 fa79 	bl	8003f7c <RTC_WriteAlarmCounter>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e027      	b.n	8003ae4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003a94:	6979      	ldr	r1, [r7, #20]
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 fb21 	bl	80040de <RTC_DateUpdate>
 8003a9c:	e003      	b.n	8003aa6 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d01a      	beq.n	8003ae2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fada 	bl	800406a <RTC_ByteToBcd2>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	461a      	mov	r2, r3
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	785b      	ldrb	r3, [r3, #1]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fad1 	bl	800406a <RTC_ByteToBcd2>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	461a      	mov	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	789b      	ldrb	r3, [r3, #2]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 fac8 	bl	800406a <RTC_ByteToBcd2>
 8003ada:	4603      	mov	r3, r0
 8003adc:	461a      	mov	r2, r3
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3720      	adds	r7, #32
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	91a2b3c5 	.word	0x91a2b3c5
 8003af0:	88888889 	.word	0x88888889
 8003af4:	aaaaaaab 	.word	0xaaaaaaab
 8003af8:	00015180 	.word	0x00015180

08003afc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61fb      	str	r3, [r7, #28]
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61bb      	str	r3, [r7, #24]
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_RTC_SetDate+0x24>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e097      	b.n	8003c54 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	7c1b      	ldrb	r3, [r3, #16]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_RTC_SetDate+0x34>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e091      	b.n	8003c54 <HAL_RTC_SetDate+0x158>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2201      	movs	r2, #1
 8003b34:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10c      	bne.n	8003b5c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	78da      	ldrb	r2, [r3, #3]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	785a      	ldrb	r2, [r3, #1]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	789a      	ldrb	r2, [r3, #2]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	739a      	strb	r2, [r3, #14]
 8003b5a:	e01a      	b.n	8003b92 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	78db      	ldrb	r3, [r3, #3]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 fa9f 	bl	80040a4 <RTC_Bcd2ToByte>
 8003b66:	4603      	mov	r3, r0
 8003b68:	461a      	mov	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	785b      	ldrb	r3, [r3, #1]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fa96 	bl	80040a4 <RTC_Bcd2ToByte>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	789b      	ldrb	r3, [r3, #2]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 fa8d 	bl	80040a4 <RTC_Bcd2ToByte>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	7bdb      	ldrb	r3, [r3, #15]
 8003b96:	4618      	mov	r0, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	7b59      	ldrb	r1, [r3, #13]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	7b9b      	ldrb	r3, [r3, #14]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	f000 fb77 	bl	8004294 <RTC_WeekDayNum>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	7b1a      	ldrb	r2, [r3, #12]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 f970 	bl	8003e9c <RTC_ReadTimeCounter>
 8003bbc:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	4a26      	ldr	r2, [pc, #152]	; (8003c5c <HAL_RTC_SetDate+0x160>)
 8003bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc6:	0adb      	lsrs	r3, r3, #11
 8003bc8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2b18      	cmp	r3, #24
 8003bce:	d93a      	bls.n	8003c46 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	4a23      	ldr	r2, [pc, #140]	; (8003c60 <HAL_RTC_SetDate+0x164>)
 8003bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd8:	091b      	lsrs	r3, r3, #4
 8003bda:	4a22      	ldr	r2, [pc, #136]	; (8003c64 <HAL_RTC_SetDate+0x168>)
 8003bdc:	fb02 f303 	mul.w	r3, r2, r3
 8003be0:	69fa      	ldr	r2, [r7, #28]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003be6:	69f9      	ldr	r1, [r7, #28]
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 f987 	bl	8003efc <RTC_WriteTimeCounter>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d007      	beq.n	8003c04 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e027      	b.n	8003c54 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 f9a0 	bl	8003f4a <RTC_ReadAlarmCounter>
 8003c0a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c12:	d018      	beq.n	8003c46 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d214      	bcs.n	8003c46 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003c22:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003c26:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003c28:	69b9      	ldr	r1, [r7, #24]
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 f9a6 	bl	8003f7c <RTC_WriteAlarmCounter>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2204      	movs	r2, #4
 8003c3a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e006      	b.n	8003c54 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3720      	adds	r7, #32
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	91a2b3c5 	.word	0x91a2b3c5
 8003c60:	aaaaaaab 	.word	0xaaaaaaab
 8003c64:	00015180 	.word	0x00015180

08003c68 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8003c74:	f107 0314 	add.w	r3, r7, #20
 8003c78:	2100      	movs	r1, #0
 8003c7a:	460a      	mov	r2, r1
 8003c7c:	801a      	strh	r2, [r3, #0]
 8003c7e:	460a      	mov	r2, r1
 8003c80:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <HAL_RTC_GetDate+0x26>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e03a      	b.n	8003d08 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8003c92:	f107 0314 	add.w	r3, r7, #20
 8003c96:	2200      	movs	r2, #0
 8003c98:	4619      	mov	r1, r3
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f7ff fe56 	bl	800394c <HAL_RTC_GetTime>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e02e      	b.n	8003d08 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	7b1a      	ldrb	r2, [r3, #12]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	7bda      	ldrb	r2, [r3, #15]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	7b5a      	ldrb	r2, [r3, #13]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	7b9a      	ldrb	r2, [r3, #14]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d01a      	beq.n	8003d06 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	78db      	ldrb	r3, [r3, #3]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 f9c8 	bl	800406a <RTC_ByteToBcd2>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	461a      	mov	r2, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	785b      	ldrb	r3, [r3, #1]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 f9bf 	bl	800406a <RTC_ByteToBcd2>
 8003cec:	4603      	mov	r3, r0
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	789b      	ldrb	r3, [r3, #2]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 f9b6 	bl	800406a <RTC_ByteToBcd2>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	461a      	mov	r2, r3
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003d10:	b590      	push	{r4, r7, lr}
 8003d12:	b089      	sub	sp, #36	; 0x24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8003d20:	f107 0314 	add.w	r3, r7, #20
 8003d24:	2100      	movs	r1, #0
 8003d26:	460a      	mov	r2, r1
 8003d28:	801a      	strh	r2, [r3, #0]
 8003d2a:	460a      	mov	r2, r1
 8003d2c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <HAL_RTC_SetAlarm+0x2a>
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e07d      	b.n	8003e3a <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	7c1b      	ldrb	r3, [r3, #16]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d101      	bne.n	8003d4a <HAL_RTC_SetAlarm+0x3a>
 8003d46:	2302      	movs	r3, #2
 8003d48:	e077      	b.n	8003e3a <HAL_RTC_SetAlarm+0x12a>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2202      	movs	r2, #2
 8003d54:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8003d56:	f107 0314 	add.w	r3, r7, #20
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f7ff fdf4 	bl	800394c <HAL_RTC_GetTime>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e065      	b.n	8003e3a <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003d6e:	7d3b      	ldrb	r3, [r7, #20]
 8003d70:	461a      	mov	r2, r3
 8003d72:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003d76:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8003d7a:	7d7b      	ldrb	r3, [r7, #21]
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	460b      	mov	r3, r1
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	1a5b      	subs	r3, r3, r1
 8003d84:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003d86:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8003d88:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003d8a:	4413      	add	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d113      	bne.n	8003dbc <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003d9e:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	785b      	ldrb	r3, [r3, #1]
 8003da6:	4619      	mov	r1, r3
 8003da8:	460b      	mov	r3, r1
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	1a5b      	subs	r3, r3, r1
 8003dae:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003db0:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003db6:	4413      	add	r3, r2
 8003db8:	61fb      	str	r3, [r7, #28]
 8003dba:	e01e      	b.n	8003dfa <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 f96f 	bl	80040a4 <RTC_Bcd2ToByte>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	461a      	mov	r2, r3
 8003dca:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003dce:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	785b      	ldrb	r3, [r3, #1]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 f964 	bl	80040a4 <RTC_Bcd2ToByte>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	461a      	mov	r2, r3
 8003de0:	4613      	mov	r3, r2
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003de8:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	789b      	ldrb	r3, [r3, #2]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 f958 	bl	80040a4 <RTC_Bcd2ToByte>
 8003df4:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003df6:	4423      	add	r3, r4
 8003df8:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d205      	bcs.n	8003e0e <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003e08:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003e0c:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003e0e:	69f9      	ldr	r1, [r7, #28]
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 f8b3 	bl	8003f7c <RTC_WriteAlarmCounter>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d007      	beq.n	8003e2c <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2204      	movs	r2, #4
 8003e20:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e006      	b.n	8003e3a <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003e38:	2300      	movs	r3, #0
  }
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3724      	adds	r7, #36	; 0x24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd90      	pop	{r4, r7, pc}

08003e42 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b084      	sub	sp, #16
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e01d      	b.n	8003e94 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0208 	bic.w	r2, r2, #8
 8003e66:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003e68:	f7fd ff5c 	bl	8001d24 <HAL_GetTick>
 8003e6c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003e6e:	e009      	b.n	8003e84 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003e70:	f7fd ff58 	bl	8001d24 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e7e:	d901      	bls.n	8003e84 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e007      	b.n	8003e94 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0ee      	beq.n	8003e70 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	827b      	strh	r3, [r7, #18]
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	823b      	strh	r3, [r7, #16]
 8003eac:	2300      	movs	r3, #0
 8003eae:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003ecc:	8a7a      	ldrh	r2, [r7, #18]
 8003ece:	8a3b      	ldrh	r3, [r7, #16]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d008      	beq.n	8003ee6 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003ed4:	8a3b      	ldrh	r3, [r7, #16]
 8003ed6:	041a      	lsls	r2, r3, #16
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	e004      	b.n	8003ef0 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003ee6:	8a7b      	ldrh	r3, [r7, #18]
 8003ee8:	041a      	lsls	r2, r3, #16
 8003eea:	89fb      	ldrh	r3, [r7, #14]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003ef0:	697b      	ldr	r3, [r7, #20]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	371c      	adds	r7, #28
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr

08003efc <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f85d 	bl	8003fca <RTC_EnterInitMode>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	73fb      	strb	r3, [r7, #15]
 8003f1a:	e011      	b.n	8003f40 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	0c12      	lsrs	r2, r2, #16
 8003f24:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	b292      	uxth	r2, r2
 8003f2e:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f872 	bl	800401a <RTC_ExitInitMode>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b085      	sub	sp, #20
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	81fb      	strh	r3, [r7, #14]
 8003f56:	2300      	movs	r3, #0
 8003f58:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003f6a:	89fb      	ldrh	r3, [r7, #14]
 8003f6c:	041a      	lsls	r2, r3, #16
 8003f6e:	89bb      	ldrh	r3, [r7, #12]
 8003f70:	4313      	orrs	r3, r2
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f81d 	bl	8003fca <RTC_EnterInitMode>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	73fb      	strb	r3, [r7, #15]
 8003f9a:	e011      	b.n	8003fc0 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	0c12      	lsrs	r2, r2, #16
 8003fa4:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	b292      	uxth	r2, r2
 8003fae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f832 	bl	800401a <RTC_ExitInitMode>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003fd6:	f7fd fea5 	bl	8001d24 <HAL_GetTick>
 8003fda:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003fdc:	e009      	b.n	8003ff2 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003fde:	f7fd fea1 	bl	8001d24 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fec:	d901      	bls.n	8003ff2 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e00f      	b.n	8004012 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f003 0320 	and.w	r3, r3, #32
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0ee      	beq.n	8003fde <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0210 	orr.w	r2, r2, #16
 800400e:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0210 	bic.w	r2, r2, #16
 8004034:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004036:	f7fd fe75 	bl	8001d24 <HAL_GetTick>
 800403a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800403c:	e009      	b.n	8004052 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800403e:	f7fd fe71 	bl	8001d24 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800404c:	d901      	bls.n	8004052 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e007      	b.n	8004062 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0ee      	beq.n	800403e <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800406a:	b480      	push	{r7}
 800406c:	b085      	sub	sp, #20
 800406e:	af00      	add	r7, sp, #0
 8004070:	4603      	mov	r3, r0
 8004072:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004078:	e005      	b.n	8004086 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	3301      	adds	r3, #1
 800407e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	3b0a      	subs	r3, #10
 8004084:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004086:	79fb      	ldrb	r3, [r7, #7]
 8004088:	2b09      	cmp	r3, #9
 800408a:	d8f6      	bhi.n	800407a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	b2db      	uxtb	r3, r3
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	b2da      	uxtb	r2, r3
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	4313      	orrs	r3, r2
 8004098:	b2db      	uxtb	r3, r3
}
 800409a:	4618      	mov	r0, r3
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr

080040a4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4603      	mov	r3, r0
 80040ac:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80040b2:	79fb      	ldrb	r3, [r7, #7]
 80040b4:	091b      	lsrs	r3, r3, #4
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	4613      	mov	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	4413      	add	r3, r2
 80040d2:	b2db      	uxtb	r3, r3
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr

080040de <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b086      	sub	sp, #24
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	2300      	movs	r3, #0
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	2300      	movs	r3, #0
 80040f2:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	7bdb      	ldrb	r3, [r3, #15]
 80040fc:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	7b5b      	ldrb	r3, [r3, #13]
 8004102:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	7b9b      	ldrb	r3, [r3, #14]
 8004108:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800410a:	2300      	movs	r3, #0
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	e06f      	b.n	80041f0 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d011      	beq.n	800413a <RTC_DateUpdate+0x5c>
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b03      	cmp	r3, #3
 800411a:	d00e      	beq.n	800413a <RTC_DateUpdate+0x5c>
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	2b05      	cmp	r3, #5
 8004120:	d00b      	beq.n	800413a <RTC_DateUpdate+0x5c>
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	2b07      	cmp	r3, #7
 8004126:	d008      	beq.n	800413a <RTC_DateUpdate+0x5c>
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	2b08      	cmp	r3, #8
 800412c:	d005      	beq.n	800413a <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	2b0a      	cmp	r3, #10
 8004132:	d002      	beq.n	800413a <RTC_DateUpdate+0x5c>
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	2b0c      	cmp	r3, #12
 8004138:	d117      	bne.n	800416a <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2b1e      	cmp	r3, #30
 800413e:	d803      	bhi.n	8004148 <RTC_DateUpdate+0x6a>
      {
        day++;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3301      	adds	r3, #1
 8004144:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004146:	e050      	b.n	80041ea <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	2b0c      	cmp	r3, #12
 800414c:	d005      	beq.n	800415a <RTC_DateUpdate+0x7c>
        {
          month++;
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	3301      	adds	r3, #1
 8004152:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004154:	2301      	movs	r3, #1
 8004156:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004158:	e047      	b.n	80041ea <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800415a:	2301      	movs	r3, #1
 800415c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800415e:	2301      	movs	r3, #1
 8004160:	60fb      	str	r3, [r7, #12]
          year++;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	3301      	adds	r3, #1
 8004166:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004168:	e03f      	b.n	80041ea <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2b04      	cmp	r3, #4
 800416e:	d008      	beq.n	8004182 <RTC_DateUpdate+0xa4>
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	2b06      	cmp	r3, #6
 8004174:	d005      	beq.n	8004182 <RTC_DateUpdate+0xa4>
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	2b09      	cmp	r3, #9
 800417a:	d002      	beq.n	8004182 <RTC_DateUpdate+0xa4>
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	2b0b      	cmp	r3, #11
 8004180:	d10c      	bne.n	800419c <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2b1d      	cmp	r3, #29
 8004186:	d803      	bhi.n	8004190 <RTC_DateUpdate+0xb2>
      {
        day++;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	3301      	adds	r3, #1
 800418c:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800418e:	e02c      	b.n	80041ea <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	3301      	adds	r3, #1
 8004194:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004196:	2301      	movs	r3, #1
 8004198:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800419a:	e026      	b.n	80041ea <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d123      	bne.n	80041ea <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2b1b      	cmp	r3, #27
 80041a6:	d803      	bhi.n	80041b0 <RTC_DateUpdate+0xd2>
      {
        day++;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	3301      	adds	r3, #1
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	e01c      	b.n	80041ea <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b1c      	cmp	r3, #28
 80041b4:	d111      	bne.n	80041da <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 f838 	bl	8004230 <RTC_IsLeapYear>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <RTC_DateUpdate+0xf0>
        {
          day++;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3301      	adds	r3, #1
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	e00d      	b.n	80041ea <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	3301      	adds	r3, #1
 80041d2:	613b      	str	r3, [r7, #16]
          day = 1U;
 80041d4:	2301      	movs	r3, #1
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	e007      	b.n	80041ea <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2b1d      	cmp	r3, #29
 80041de:	d104      	bne.n	80041ea <RTC_DateUpdate+0x10c>
      {
        month++;
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	3301      	adds	r3, #1
 80041e4:	613b      	str	r3, [r7, #16]
        day = 1U;
 80041e6:	2301      	movs	r3, #1
 80041e8:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	3301      	adds	r3, #1
 80041ee:	60bb      	str	r3, [r7, #8]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d38b      	bcc.n	8004110 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	b2da      	uxtb	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	b2da      	uxtb	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	b2db      	uxtb	r3, r3
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	4619      	mov	r1, r3
 800421a:	6978      	ldr	r0, [r7, #20]
 800421c:	f000 f83a 	bl	8004294 <RTC_WeekDayNum>
 8004220:	4603      	mov	r3, r0
 8004222:	461a      	mov	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	731a      	strb	r2, [r3, #12]
}
 8004228:	bf00      	nop
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	f003 0303 	and.w	r3, r3, #3
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	e01d      	b.n	8004286 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800424a:	88fb      	ldrh	r3, [r7, #6]
 800424c:	4a10      	ldr	r2, [pc, #64]	; (8004290 <RTC_IsLeapYear+0x60>)
 800424e:	fba2 1203 	umull	r1, r2, r2, r3
 8004252:	0952      	lsrs	r2, r2, #5
 8004254:	2164      	movs	r1, #100	; 0x64
 8004256:	fb01 f202 	mul.w	r2, r1, r2
 800425a:	1a9b      	subs	r3, r3, r2
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004262:	2301      	movs	r3, #1
 8004264:	e00f      	b.n	8004286 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004266:	88fb      	ldrh	r3, [r7, #6]
 8004268:	4a09      	ldr	r2, [pc, #36]	; (8004290 <RTC_IsLeapYear+0x60>)
 800426a:	fba2 1203 	umull	r1, r2, r2, r3
 800426e:	09d2      	lsrs	r2, r2, #7
 8004270:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004274:	fb01 f202 	mul.w	r2, r1, r2
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	b29b      	uxth	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004280:	2301      	movs	r3, #1
 8004282:	e000      	b.n	8004286 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004284:	2300      	movs	r3, #0
  }
}
 8004286:	4618      	mov	r0, r3
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr
 8004290:	51eb851f 	.word	0x51eb851f

08004294 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	460b      	mov	r3, r1
 800429e:	70fb      	strb	r3, [r7, #3]
 80042a0:	4613      	mov	r3, r2
 80042a2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60bb      	str	r3, [r7, #8]
 80042a8:	2300      	movs	r3, #0
 80042aa:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80042b2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d82d      	bhi.n	8004316 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80042ba:	78fa      	ldrb	r2, [r7, #3]
 80042bc:	4613      	mov	r3, r2
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	4413      	add	r3, r2
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	4a2c      	ldr	r2, [pc, #176]	; (8004378 <RTC_WeekDayNum+0xe4>)
 80042c8:	fba2 2303 	umull	r2, r3, r2, r3
 80042cc:	085a      	lsrs	r2, r3, #1
 80042ce:	78bb      	ldrb	r3, [r7, #2]
 80042d0:	441a      	add	r2, r3
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	441a      	add	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	3b01      	subs	r3, #1
 80042da:	089b      	lsrs	r3, r3, #2
 80042dc:	441a      	add	r2, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	4926      	ldr	r1, [pc, #152]	; (800437c <RTC_WeekDayNum+0xe8>)
 80042e4:	fba1 1303 	umull	r1, r3, r1, r3
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	1ad2      	subs	r2, r2, r3
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	4922      	ldr	r1, [pc, #136]	; (800437c <RTC_WeekDayNum+0xe8>)
 80042f2:	fba1 1303 	umull	r1, r3, r1, r3
 80042f6:	09db      	lsrs	r3, r3, #7
 80042f8:	4413      	add	r3, r2
 80042fa:	1d1a      	adds	r2, r3, #4
 80042fc:	4b20      	ldr	r3, [pc, #128]	; (8004380 <RTC_WeekDayNum+0xec>)
 80042fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004302:	1ad1      	subs	r1, r2, r3
 8004304:	0849      	lsrs	r1, r1, #1
 8004306:	440b      	add	r3, r1
 8004308:	0899      	lsrs	r1, r3, #2
 800430a:	460b      	mov	r3, r1
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	1a5b      	subs	r3, r3, r1
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	e029      	b.n	800436a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004316:	78fa      	ldrb	r2, [r7, #3]
 8004318:	4613      	mov	r3, r2
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	4413      	add	r3, r2
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	1a9b      	subs	r3, r3, r2
 8004322:	4a15      	ldr	r2, [pc, #84]	; (8004378 <RTC_WeekDayNum+0xe4>)
 8004324:	fba2 2303 	umull	r2, r3, r2, r3
 8004328:	085a      	lsrs	r2, r3, #1
 800432a:	78bb      	ldrb	r3, [r7, #2]
 800432c:	441a      	add	r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	441a      	add	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	089b      	lsrs	r3, r3, #2
 8004336:	441a      	add	r2, r3
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	4910      	ldr	r1, [pc, #64]	; (800437c <RTC_WeekDayNum+0xe8>)
 800433c:	fba1 1303 	umull	r1, r3, r1, r3
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	1ad2      	subs	r2, r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	490d      	ldr	r1, [pc, #52]	; (800437c <RTC_WeekDayNum+0xe8>)
 8004348:	fba1 1303 	umull	r1, r3, r1, r3
 800434c:	09db      	lsrs	r3, r3, #7
 800434e:	4413      	add	r3, r2
 8004350:	1c9a      	adds	r2, r3, #2
 8004352:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <RTC_WeekDayNum+0xec>)
 8004354:	fba3 1302 	umull	r1, r3, r3, r2
 8004358:	1ad1      	subs	r1, r2, r3
 800435a:	0849      	lsrs	r1, r1, #1
 800435c:	440b      	add	r3, r1
 800435e:	0899      	lsrs	r1, r3, #2
 8004360:	460b      	mov	r3, r1
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	1a5b      	subs	r3, r3, r1
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	b2db      	uxtb	r3, r3
}
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr
 8004378:	38e38e39 	.word	0x38e38e39
 800437c:	51eb851f 	.word	0x51eb851f
 8004380:	24924925 	.word	0x24924925

08004384 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e041      	b.n	800441a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fd fb70 	bl	8001a90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3304      	adds	r3, #4
 80043c0:	4619      	mov	r1, r3
 80043c2:	4610      	mov	r0, r2
 80043c4:	f000 fbf8 	bl	8004bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
	...

08004424 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d109      	bne.n	8004448 <HAL_TIM_PWM_Start+0x24>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b01      	cmp	r3, #1
 800443e:	bf14      	ite	ne
 8004440:	2301      	movne	r3, #1
 8004442:	2300      	moveq	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	e022      	b.n	800448e <HAL_TIM_PWM_Start+0x6a>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2b04      	cmp	r3, #4
 800444c:	d109      	bne.n	8004462 <HAL_TIM_PWM_Start+0x3e>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b01      	cmp	r3, #1
 8004458:	bf14      	ite	ne
 800445a:	2301      	movne	r3, #1
 800445c:	2300      	moveq	r3, #0
 800445e:	b2db      	uxtb	r3, r3
 8004460:	e015      	b.n	800448e <HAL_TIM_PWM_Start+0x6a>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b08      	cmp	r3, #8
 8004466:	d109      	bne.n	800447c <HAL_TIM_PWM_Start+0x58>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	bf14      	ite	ne
 8004474:	2301      	movne	r3, #1
 8004476:	2300      	moveq	r3, #0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	e008      	b.n	800448e <HAL_TIM_PWM_Start+0x6a>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b01      	cmp	r3, #1
 8004486:	bf14      	ite	ne
 8004488:	2301      	movne	r3, #1
 800448a:	2300      	moveq	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e05e      	b.n	8004554 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d104      	bne.n	80044a6 <HAL_TIM_PWM_Start+0x82>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a4:	e013      	b.n	80044ce <HAL_TIM_PWM_Start+0xaa>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b04      	cmp	r3, #4
 80044aa:	d104      	bne.n	80044b6 <HAL_TIM_PWM_Start+0x92>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044b4:	e00b      	b.n	80044ce <HAL_TIM_PWM_Start+0xaa>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d104      	bne.n	80044c6 <HAL_TIM_PWM_Start+0xa2>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044c4:	e003      	b.n	80044ce <HAL_TIM_PWM_Start+0xaa>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2202      	movs	r2, #2
 80044ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2201      	movs	r2, #1
 80044d4:	6839      	ldr	r1, [r7, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fd58 	bl	8004f8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1e      	ldr	r2, [pc, #120]	; (800455c <HAL_TIM_PWM_Start+0x138>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d107      	bne.n	80044f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a18      	ldr	r2, [pc, #96]	; (800455c <HAL_TIM_PWM_Start+0x138>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00e      	beq.n	800451e <HAL_TIM_PWM_Start+0xfa>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004508:	d009      	beq.n	800451e <HAL_TIM_PWM_Start+0xfa>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a14      	ldr	r2, [pc, #80]	; (8004560 <HAL_TIM_PWM_Start+0x13c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d004      	beq.n	800451e <HAL_TIM_PWM_Start+0xfa>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a12      	ldr	r2, [pc, #72]	; (8004564 <HAL_TIM_PWM_Start+0x140>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d111      	bne.n	8004542 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b06      	cmp	r3, #6
 800452e:	d010      	beq.n	8004552 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0201 	orr.w	r2, r2, #1
 800453e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004540:	e007      	b.n	8004552 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0201 	orr.w	r2, r2, #1
 8004550:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40012c00 	.word	0x40012c00
 8004560:	40000400 	.word	0x40000400
 8004564:	40000800 	.word	0x40000800

08004568 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e093      	b.n	80046a4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d106      	bne.n	8004596 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7fd fa1d 	bl	80019d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2202      	movs	r2, #2
 800459a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045ac:	f023 0307 	bic.w	r3, r3, #7
 80045b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	3304      	adds	r3, #4
 80045ba:	4619      	mov	r1, r3
 80045bc:	4610      	mov	r0, r2
 80045be:	f000 fafb 	bl	8004bb8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ea:	f023 0303 	bic.w	r3, r3, #3
 80045ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	021b      	lsls	r3, r3, #8
 80045fa:	4313      	orrs	r3, r2
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004608:	f023 030c 	bic.w	r3, r3, #12
 800460c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004614:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004618:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	021b      	lsls	r3, r3, #8
 8004624:	4313      	orrs	r3, r2
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	011a      	lsls	r2, r3, #4
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	031b      	lsls	r3, r3, #12
 8004638:	4313      	orrs	r3, r2
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004646:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	4313      	orrs	r3, r2
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80046d4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d110      	bne.n	80046fe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d102      	bne.n	80046e8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80046e2:	7b7b      	ldrb	r3, [r7, #13]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d001      	beq.n	80046ec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e069      	b.n	80047c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046fc:	e031      	b.n	8004762 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b04      	cmp	r3, #4
 8004702:	d110      	bne.n	8004726 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004704:	7bbb      	ldrb	r3, [r7, #14]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d102      	bne.n	8004710 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800470a:	7b3b      	ldrb	r3, [r7, #12]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d001      	beq.n	8004714 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e055      	b.n	80047c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004724:	e01d      	b.n	8004762 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d108      	bne.n	800473e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800472c:	7bbb      	ldrb	r3, [r7, #14]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d105      	bne.n	800473e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004732:	7b7b      	ldrb	r3, [r7, #13]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d102      	bne.n	800473e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004738:	7b3b      	ldrb	r3, [r7, #12]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d001      	beq.n	8004742 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e03e      	b.n	80047c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2202      	movs	r2, #2
 8004746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2202      	movs	r2, #2
 800474e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2202      	movs	r2, #2
 8004756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2202      	movs	r2, #2
 800475e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_TIM_Encoder_Start+0xc4>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b04      	cmp	r3, #4
 800476c:	d008      	beq.n	8004780 <HAL_TIM_Encoder_Start+0xd4>
 800476e:	e00f      	b.n	8004790 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2201      	movs	r2, #1
 8004776:	2100      	movs	r1, #0
 8004778:	4618      	mov	r0, r3
 800477a:	f000 fc07 	bl	8004f8c <TIM_CCxChannelCmd>
      break;
 800477e:	e016      	b.n	80047ae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2201      	movs	r2, #1
 8004786:	2104      	movs	r1, #4
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fbff 	bl	8004f8c <TIM_CCxChannelCmd>
      break;
 800478e:	e00e      	b.n	80047ae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2201      	movs	r2, #1
 8004796:	2100      	movs	r1, #0
 8004798:	4618      	mov	r0, r3
 800479a:	f000 fbf7 	bl	8004f8c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2201      	movs	r2, #1
 80047a4:	2104      	movs	r1, #4
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fbf0 	bl	8004f8c <TIM_CCxChannelCmd>
      break;
 80047ac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 0201 	orr.w	r2, r2, #1
 80047bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d122      	bne.n	8004824 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d11b      	bne.n	8004824 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f06f 0202 	mvn.w	r2, #2
 80047f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f9b8 	bl	8004b80 <HAL_TIM_IC_CaptureCallback>
 8004810:	e005      	b.n	800481e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f9ab 	bl	8004b6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f9ba 	bl	8004b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	f003 0304 	and.w	r3, r3, #4
 800482e:	2b04      	cmp	r3, #4
 8004830:	d122      	bne.n	8004878 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b04      	cmp	r3, #4
 800483e:	d11b      	bne.n	8004878 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f06f 0204 	mvn.w	r2, #4
 8004848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2202      	movs	r2, #2
 800484e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f98e 	bl	8004b80 <HAL_TIM_IC_CaptureCallback>
 8004864:	e005      	b.n	8004872 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f981 	bl	8004b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 f990 	bl	8004b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b08      	cmp	r3, #8
 8004884:	d122      	bne.n	80048cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f003 0308 	and.w	r3, r3, #8
 8004890:	2b08      	cmp	r3, #8
 8004892:	d11b      	bne.n	80048cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f06f 0208 	mvn.w	r2, #8
 800489c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2204      	movs	r2, #4
 80048a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f964 	bl	8004b80 <HAL_TIM_IC_CaptureCallback>
 80048b8:	e005      	b.n	80048c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f957 	bl	8004b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f966 	bl	8004b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f003 0310 	and.w	r3, r3, #16
 80048d6:	2b10      	cmp	r3, #16
 80048d8:	d122      	bne.n	8004920 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f003 0310 	and.w	r3, r3, #16
 80048e4:	2b10      	cmp	r3, #16
 80048e6:	d11b      	bne.n	8004920 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f06f 0210 	mvn.w	r2, #16
 80048f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2208      	movs	r2, #8
 80048f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f93a 	bl	8004b80 <HAL_TIM_IC_CaptureCallback>
 800490c:	e005      	b.n	800491a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f92d 	bl	8004b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f93c 	bl	8004b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b01      	cmp	r3, #1
 800492c:	d10e      	bne.n	800494c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b01      	cmp	r3, #1
 800493a:	d107      	bne.n	800494c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f06f 0201 	mvn.w	r2, #1
 8004944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f908 	bl	8004b5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004956:	2b80      	cmp	r3, #128	; 0x80
 8004958:	d10e      	bne.n	8004978 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004964:	2b80      	cmp	r3, #128	; 0x80
 8004966:	d107      	bne.n	8004978 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fb95 	bl	80050a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004982:	2b40      	cmp	r3, #64	; 0x40
 8004984:	d10e      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004990:	2b40      	cmp	r3, #64	; 0x40
 8004992:	d107      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800499c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f900 	bl	8004ba4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f003 0320 	and.w	r3, r3, #32
 80049ae:	2b20      	cmp	r3, #32
 80049b0:	d10e      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f003 0320 	and.w	r3, r3, #32
 80049bc:	2b20      	cmp	r3, #32
 80049be:	d107      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f06f 0220 	mvn.w	r2, #32
 80049c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 fb60 	bl	8005090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049d0:	bf00      	nop
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e0ae      	b.n	8004b54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b0c      	cmp	r3, #12
 8004a02:	f200 809f 	bhi.w	8004b44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a06:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0c:	08004a41 	.word	0x08004a41
 8004a10:	08004b45 	.word	0x08004b45
 8004a14:	08004b45 	.word	0x08004b45
 8004a18:	08004b45 	.word	0x08004b45
 8004a1c:	08004a81 	.word	0x08004a81
 8004a20:	08004b45 	.word	0x08004b45
 8004a24:	08004b45 	.word	0x08004b45
 8004a28:	08004b45 	.word	0x08004b45
 8004a2c:	08004ac3 	.word	0x08004ac3
 8004a30:	08004b45 	.word	0x08004b45
 8004a34:	08004b45 	.word	0x08004b45
 8004a38:	08004b45 	.word	0x08004b45
 8004a3c:	08004b03 	.word	0x08004b03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68b9      	ldr	r1, [r7, #8]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 f918 	bl	8004c7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0208 	orr.w	r2, r2, #8
 8004a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699a      	ldr	r2, [r3, #24]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0204 	bic.w	r2, r2, #4
 8004a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6999      	ldr	r1, [r3, #24]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	691a      	ldr	r2, [r3, #16]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	619a      	str	r2, [r3, #24]
      break;
 8004a7e:	e064      	b.n	8004b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68b9      	ldr	r1, [r7, #8]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 f95e 	bl	8004d48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699a      	ldr	r2, [r3, #24]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6999      	ldr	r1, [r3, #24]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	021a      	lsls	r2, r3, #8
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	619a      	str	r2, [r3, #24]
      break;
 8004ac0:	e043      	b.n	8004b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 f9a7 	bl	8004e1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69da      	ldr	r2, [r3, #28]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f042 0208 	orr.w	r2, r2, #8
 8004adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69da      	ldr	r2, [r3, #28]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0204 	bic.w	r2, r2, #4
 8004aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69d9      	ldr	r1, [r3, #28]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	691a      	ldr	r2, [r3, #16]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	61da      	str	r2, [r3, #28]
      break;
 8004b00:	e023      	b.n	8004b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 f9f1 	bl	8004ef0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69da      	ldr	r2, [r3, #28]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69da      	ldr	r2, [r3, #28]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69d9      	ldr	r1, [r3, #28]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	021a      	lsls	r2, r3, #8
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	61da      	str	r2, [r3, #28]
      break;
 8004b42:	e002      	b.n	8004b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	75fb      	strb	r3, [r7, #23]
      break;
 8004b48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bc80      	pop	{r7}
 8004b6c:	4770      	bx	lr

08004b6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr

08004b80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc80      	pop	{r7}
 8004b90:	4770      	bx	lr

08004b92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b083      	sub	sp, #12
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b9a:	bf00      	nop
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc80      	pop	{r7}
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr
	...

08004bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a29      	ldr	r2, [pc, #164]	; (8004c70 <TIM_Base_SetConfig+0xb8>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00b      	beq.n	8004be8 <TIM_Base_SetConfig+0x30>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd6:	d007      	beq.n	8004be8 <TIM_Base_SetConfig+0x30>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a26      	ldr	r2, [pc, #152]	; (8004c74 <TIM_Base_SetConfig+0xbc>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d003      	beq.n	8004be8 <TIM_Base_SetConfig+0x30>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a25      	ldr	r2, [pc, #148]	; (8004c78 <TIM_Base_SetConfig+0xc0>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d108      	bne.n	8004bfa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a1c      	ldr	r2, [pc, #112]	; (8004c70 <TIM_Base_SetConfig+0xb8>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00b      	beq.n	8004c1a <TIM_Base_SetConfig+0x62>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c08:	d007      	beq.n	8004c1a <TIM_Base_SetConfig+0x62>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a19      	ldr	r2, [pc, #100]	; (8004c74 <TIM_Base_SetConfig+0xbc>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d003      	beq.n	8004c1a <TIM_Base_SetConfig+0x62>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a18      	ldr	r2, [pc, #96]	; (8004c78 <TIM_Base_SetConfig+0xc0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d108      	bne.n	8004c2c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a07      	ldr	r2, [pc, #28]	; (8004c70 <TIM_Base_SetConfig+0xb8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d103      	bne.n	8004c60 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	615a      	str	r2, [r3, #20]
}
 8004c66:	bf00      	nop
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bc80      	pop	{r7}
 8004c6e:	4770      	bx	lr
 8004c70:	40012c00 	.word	0x40012c00
 8004c74:	40000400 	.word	0x40000400
 8004c78:	40000800 	.word	0x40000800

08004c7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	f023 0201 	bic.w	r2, r3, #1
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 0303 	bic.w	r3, r3, #3
 8004cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f023 0302 	bic.w	r3, r3, #2
 8004cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a1c      	ldr	r2, [pc, #112]	; (8004d44 <TIM_OC1_SetConfig+0xc8>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d10c      	bne.n	8004cf2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f023 0308 	bic.w	r3, r3, #8
 8004cde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f023 0304 	bic.w	r3, r3, #4
 8004cf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a13      	ldr	r2, [pc, #76]	; (8004d44 <TIM_OC1_SetConfig+0xc8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d111      	bne.n	8004d1e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	621a      	str	r2, [r3, #32]
}
 8004d38:	bf00      	nop
 8004d3a:	371c      	adds	r7, #28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bc80      	pop	{r7}
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	40012c00 	.word	0x40012c00

08004d48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	f023 0210 	bic.w	r2, r3, #16
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	021b      	lsls	r3, r3, #8
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f023 0320 	bic.w	r3, r3, #32
 8004d92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a1d      	ldr	r2, [pc, #116]	; (8004e18 <TIM_OC2_SetConfig+0xd0>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d10d      	bne.n	8004dc4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a14      	ldr	r2, [pc, #80]	; (8004e18 <TIM_OC2_SetConfig+0xd0>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d113      	bne.n	8004df4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	621a      	str	r2, [r3, #32]
}
 8004e0e:	bf00      	nop
 8004e10:	371c      	adds	r7, #28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr
 8004e18:	40012c00 	.word	0x40012c00

08004e1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0303 	bic.w	r3, r3, #3
 8004e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	021b      	lsls	r3, r3, #8
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a1d      	ldr	r2, [pc, #116]	; (8004eec <TIM_OC3_SetConfig+0xd0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d10d      	bne.n	8004e96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	021b      	lsls	r3, r3, #8
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a14      	ldr	r2, [pc, #80]	; (8004eec <TIM_OC3_SetConfig+0xd0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d113      	bne.n	8004ec6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	621a      	str	r2, [r3, #32]
}
 8004ee0:	bf00      	nop
 8004ee2:	371c      	adds	r7, #28
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bc80      	pop	{r7}
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40012c00 	.word	0x40012c00

08004ef0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	021b      	lsls	r3, r3, #8
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	031b      	lsls	r3, r3, #12
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a0f      	ldr	r2, [pc, #60]	; (8004f88 <TIM_OC4_SetConfig+0x98>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d109      	bne.n	8004f64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	019b      	lsls	r3, r3, #6
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	621a      	str	r2, [r3, #32]
}
 8004f7e:	bf00      	nop
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bc80      	pop	{r7}
 8004f86:	4770      	bx	lr
 8004f88:	40012c00 	.word	0x40012c00

08004f8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b087      	sub	sp, #28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f003 031f 	and.w	r3, r3, #31
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a1a      	ldr	r2, [r3, #32]
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	43db      	mvns	r3, r3
 8004fae:	401a      	ands	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a1a      	ldr	r2, [r3, #32]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f003 031f 	and.w	r3, r3, #31
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	621a      	str	r2, [r3, #32]
}
 8004fca:	bf00      	nop
 8004fcc:	371c      	adds	r7, #28
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bc80      	pop	{r7}
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d101      	bne.n	8004fec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e046      	b.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005012:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a16      	ldr	r2, [pc, #88]	; (8005084 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d00e      	beq.n	800504e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005038:	d009      	beq.n	800504e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a12      	ldr	r2, [pc, #72]	; (8005088 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d004      	beq.n	800504e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a10      	ldr	r2, [pc, #64]	; (800508c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d10c      	bne.n	8005068 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005054:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	4313      	orrs	r3, r2
 800505e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	bc80      	pop	{r7}
 8005082:	4770      	bx	lr
 8005084:	40012c00 	.word	0x40012c00
 8005088:	40000400 	.word	0x40000400
 800508c:	40000800 	.word	0x40000800

08005090 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr

080050a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050aa:	bf00      	nop
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bc80      	pop	{r7}
 80050b2:	4770      	bx	lr

080050b4 <__itoa>:
 80050b4:	1e93      	subs	r3, r2, #2
 80050b6:	2b22      	cmp	r3, #34	; 0x22
 80050b8:	b510      	push	{r4, lr}
 80050ba:	460c      	mov	r4, r1
 80050bc:	d904      	bls.n	80050c8 <__itoa+0x14>
 80050be:	2300      	movs	r3, #0
 80050c0:	461c      	mov	r4, r3
 80050c2:	700b      	strb	r3, [r1, #0]
 80050c4:	4620      	mov	r0, r4
 80050c6:	bd10      	pop	{r4, pc}
 80050c8:	2a0a      	cmp	r2, #10
 80050ca:	d109      	bne.n	80050e0 <__itoa+0x2c>
 80050cc:	2800      	cmp	r0, #0
 80050ce:	da07      	bge.n	80050e0 <__itoa+0x2c>
 80050d0:	232d      	movs	r3, #45	; 0x2d
 80050d2:	700b      	strb	r3, [r1, #0]
 80050d4:	2101      	movs	r1, #1
 80050d6:	4240      	negs	r0, r0
 80050d8:	4421      	add	r1, r4
 80050da:	f000 f805 	bl	80050e8 <__utoa>
 80050de:	e7f1      	b.n	80050c4 <__itoa+0x10>
 80050e0:	2100      	movs	r1, #0
 80050e2:	e7f9      	b.n	80050d8 <__itoa+0x24>

080050e4 <itoa>:
 80050e4:	f7ff bfe6 	b.w	80050b4 <__itoa>

080050e8 <__utoa>:
 80050e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ea:	b08b      	sub	sp, #44	; 0x2c
 80050ec:	4605      	mov	r5, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	466e      	mov	r6, sp
 80050f2:	4c1d      	ldr	r4, [pc, #116]	; (8005168 <__utoa+0x80>)
 80050f4:	f104 0c20 	add.w	ip, r4, #32
 80050f8:	4637      	mov	r7, r6
 80050fa:	6820      	ldr	r0, [r4, #0]
 80050fc:	6861      	ldr	r1, [r4, #4]
 80050fe:	3408      	adds	r4, #8
 8005100:	c703      	stmia	r7!, {r0, r1}
 8005102:	4564      	cmp	r4, ip
 8005104:	463e      	mov	r6, r7
 8005106:	d1f7      	bne.n	80050f8 <__utoa+0x10>
 8005108:	7921      	ldrb	r1, [r4, #4]
 800510a:	6820      	ldr	r0, [r4, #0]
 800510c:	7139      	strb	r1, [r7, #4]
 800510e:	1e91      	subs	r1, r2, #2
 8005110:	2922      	cmp	r1, #34	; 0x22
 8005112:	6038      	str	r0, [r7, #0]
 8005114:	f04f 0100 	mov.w	r1, #0
 8005118:	d904      	bls.n	8005124 <__utoa+0x3c>
 800511a:	7019      	strb	r1, [r3, #0]
 800511c:	460b      	mov	r3, r1
 800511e:	4618      	mov	r0, r3
 8005120:	b00b      	add	sp, #44	; 0x2c
 8005122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005124:	1e58      	subs	r0, r3, #1
 8005126:	4684      	mov	ip, r0
 8005128:	fbb5 f7f2 	udiv	r7, r5, r2
 800512c:	fb02 5617 	mls	r6, r2, r7, r5
 8005130:	3628      	adds	r6, #40	; 0x28
 8005132:	446e      	add	r6, sp
 8005134:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005138:	460c      	mov	r4, r1
 800513a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800513e:	462e      	mov	r6, r5
 8005140:	42b2      	cmp	r2, r6
 8005142:	463d      	mov	r5, r7
 8005144:	f101 0101 	add.w	r1, r1, #1
 8005148:	d9ee      	bls.n	8005128 <__utoa+0x40>
 800514a:	2200      	movs	r2, #0
 800514c:	545a      	strb	r2, [r3, r1]
 800514e:	1919      	adds	r1, r3, r4
 8005150:	1aa5      	subs	r5, r4, r2
 8005152:	42aa      	cmp	r2, r5
 8005154:	dae3      	bge.n	800511e <__utoa+0x36>
 8005156:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800515a:	780e      	ldrb	r6, [r1, #0]
 800515c:	3201      	adds	r2, #1
 800515e:	7006      	strb	r6, [r0, #0]
 8005160:	f801 5901 	strb.w	r5, [r1], #-1
 8005164:	e7f4      	b.n	8005150 <__utoa+0x68>
 8005166:	bf00      	nop
 8005168:	08005d8a 	.word	0x08005d8a

0800516c <siprintf>:
 800516c:	b40e      	push	{r1, r2, r3}
 800516e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005172:	b500      	push	{lr}
 8005174:	b09c      	sub	sp, #112	; 0x70
 8005176:	ab1d      	add	r3, sp, #116	; 0x74
 8005178:	9002      	str	r0, [sp, #8]
 800517a:	9006      	str	r0, [sp, #24]
 800517c:	9107      	str	r1, [sp, #28]
 800517e:	9104      	str	r1, [sp, #16]
 8005180:	4808      	ldr	r0, [pc, #32]	; (80051a4 <siprintf+0x38>)
 8005182:	4909      	ldr	r1, [pc, #36]	; (80051a8 <siprintf+0x3c>)
 8005184:	f853 2b04 	ldr.w	r2, [r3], #4
 8005188:	9105      	str	r1, [sp, #20]
 800518a:	6800      	ldr	r0, [r0, #0]
 800518c:	a902      	add	r1, sp, #8
 800518e:	9301      	str	r3, [sp, #4]
 8005190:	f000 f98e 	bl	80054b0 <_svfiprintf_r>
 8005194:	2200      	movs	r2, #0
 8005196:	9b02      	ldr	r3, [sp, #8]
 8005198:	701a      	strb	r2, [r3, #0]
 800519a:	b01c      	add	sp, #112	; 0x70
 800519c:	f85d eb04 	ldr.w	lr, [sp], #4
 80051a0:	b003      	add	sp, #12
 80051a2:	4770      	bx	lr
 80051a4:	200001ec 	.word	0x200001ec
 80051a8:	ffff0208 	.word	0xffff0208

080051ac <memset>:
 80051ac:	4603      	mov	r3, r0
 80051ae:	4402      	add	r2, r0
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d100      	bne.n	80051b6 <memset+0xa>
 80051b4:	4770      	bx	lr
 80051b6:	f803 1b01 	strb.w	r1, [r3], #1
 80051ba:	e7f9      	b.n	80051b0 <memset+0x4>

080051bc <__errno>:
 80051bc:	4b01      	ldr	r3, [pc, #4]	; (80051c4 <__errno+0x8>)
 80051be:	6818      	ldr	r0, [r3, #0]
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	200001ec 	.word	0x200001ec

080051c8 <__libc_init_array>:
 80051c8:	b570      	push	{r4, r5, r6, lr}
 80051ca:	2600      	movs	r6, #0
 80051cc:	4d0c      	ldr	r5, [pc, #48]	; (8005200 <__libc_init_array+0x38>)
 80051ce:	4c0d      	ldr	r4, [pc, #52]	; (8005204 <__libc_init_array+0x3c>)
 80051d0:	1b64      	subs	r4, r4, r5
 80051d2:	10a4      	asrs	r4, r4, #2
 80051d4:	42a6      	cmp	r6, r4
 80051d6:	d109      	bne.n	80051ec <__libc_init_array+0x24>
 80051d8:	f000 fc7a 	bl	8005ad0 <_init>
 80051dc:	2600      	movs	r6, #0
 80051de:	4d0a      	ldr	r5, [pc, #40]	; (8005208 <__libc_init_array+0x40>)
 80051e0:	4c0a      	ldr	r4, [pc, #40]	; (800520c <__libc_init_array+0x44>)
 80051e2:	1b64      	subs	r4, r4, r5
 80051e4:	10a4      	asrs	r4, r4, #2
 80051e6:	42a6      	cmp	r6, r4
 80051e8:	d105      	bne.n	80051f6 <__libc_init_array+0x2e>
 80051ea:	bd70      	pop	{r4, r5, r6, pc}
 80051ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f0:	4798      	blx	r3
 80051f2:	3601      	adds	r6, #1
 80051f4:	e7ee      	b.n	80051d4 <__libc_init_array+0xc>
 80051f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051fa:	4798      	blx	r3
 80051fc:	3601      	adds	r6, #1
 80051fe:	e7f2      	b.n	80051e6 <__libc_init_array+0x1e>
 8005200:	08005de4 	.word	0x08005de4
 8005204:	08005de4 	.word	0x08005de4
 8005208:	08005de4 	.word	0x08005de4
 800520c:	08005de8 	.word	0x08005de8

08005210 <__retarget_lock_acquire_recursive>:
 8005210:	4770      	bx	lr

08005212 <__retarget_lock_release_recursive>:
 8005212:	4770      	bx	lr

08005214 <_free_r>:
 8005214:	b538      	push	{r3, r4, r5, lr}
 8005216:	4605      	mov	r5, r0
 8005218:	2900      	cmp	r1, #0
 800521a:	d040      	beq.n	800529e <_free_r+0x8a>
 800521c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005220:	1f0c      	subs	r4, r1, #4
 8005222:	2b00      	cmp	r3, #0
 8005224:	bfb8      	it	lt
 8005226:	18e4      	addlt	r4, r4, r3
 8005228:	f000 f8dc 	bl	80053e4 <__malloc_lock>
 800522c:	4a1c      	ldr	r2, [pc, #112]	; (80052a0 <_free_r+0x8c>)
 800522e:	6813      	ldr	r3, [r2, #0]
 8005230:	b933      	cbnz	r3, 8005240 <_free_r+0x2c>
 8005232:	6063      	str	r3, [r4, #4]
 8005234:	6014      	str	r4, [r2, #0]
 8005236:	4628      	mov	r0, r5
 8005238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800523c:	f000 b8d8 	b.w	80053f0 <__malloc_unlock>
 8005240:	42a3      	cmp	r3, r4
 8005242:	d908      	bls.n	8005256 <_free_r+0x42>
 8005244:	6820      	ldr	r0, [r4, #0]
 8005246:	1821      	adds	r1, r4, r0
 8005248:	428b      	cmp	r3, r1
 800524a:	bf01      	itttt	eq
 800524c:	6819      	ldreq	r1, [r3, #0]
 800524e:	685b      	ldreq	r3, [r3, #4]
 8005250:	1809      	addeq	r1, r1, r0
 8005252:	6021      	streq	r1, [r4, #0]
 8005254:	e7ed      	b.n	8005232 <_free_r+0x1e>
 8005256:	461a      	mov	r2, r3
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	b10b      	cbz	r3, 8005260 <_free_r+0x4c>
 800525c:	42a3      	cmp	r3, r4
 800525e:	d9fa      	bls.n	8005256 <_free_r+0x42>
 8005260:	6811      	ldr	r1, [r2, #0]
 8005262:	1850      	adds	r0, r2, r1
 8005264:	42a0      	cmp	r0, r4
 8005266:	d10b      	bne.n	8005280 <_free_r+0x6c>
 8005268:	6820      	ldr	r0, [r4, #0]
 800526a:	4401      	add	r1, r0
 800526c:	1850      	adds	r0, r2, r1
 800526e:	4283      	cmp	r3, r0
 8005270:	6011      	str	r1, [r2, #0]
 8005272:	d1e0      	bne.n	8005236 <_free_r+0x22>
 8005274:	6818      	ldr	r0, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	4408      	add	r0, r1
 800527a:	6010      	str	r0, [r2, #0]
 800527c:	6053      	str	r3, [r2, #4]
 800527e:	e7da      	b.n	8005236 <_free_r+0x22>
 8005280:	d902      	bls.n	8005288 <_free_r+0x74>
 8005282:	230c      	movs	r3, #12
 8005284:	602b      	str	r3, [r5, #0]
 8005286:	e7d6      	b.n	8005236 <_free_r+0x22>
 8005288:	6820      	ldr	r0, [r4, #0]
 800528a:	1821      	adds	r1, r4, r0
 800528c:	428b      	cmp	r3, r1
 800528e:	bf01      	itttt	eq
 8005290:	6819      	ldreq	r1, [r3, #0]
 8005292:	685b      	ldreq	r3, [r3, #4]
 8005294:	1809      	addeq	r1, r1, r0
 8005296:	6021      	streq	r1, [r4, #0]
 8005298:	6063      	str	r3, [r4, #4]
 800529a:	6054      	str	r4, [r2, #4]
 800529c:	e7cb      	b.n	8005236 <_free_r+0x22>
 800529e:	bd38      	pop	{r3, r4, r5, pc}
 80052a0:	200004ec 	.word	0x200004ec

080052a4 <sbrk_aligned>:
 80052a4:	b570      	push	{r4, r5, r6, lr}
 80052a6:	4e0e      	ldr	r6, [pc, #56]	; (80052e0 <sbrk_aligned+0x3c>)
 80052a8:	460c      	mov	r4, r1
 80052aa:	6831      	ldr	r1, [r6, #0]
 80052ac:	4605      	mov	r5, r0
 80052ae:	b911      	cbnz	r1, 80052b6 <sbrk_aligned+0x12>
 80052b0:	f000 fbaa 	bl	8005a08 <_sbrk_r>
 80052b4:	6030      	str	r0, [r6, #0]
 80052b6:	4621      	mov	r1, r4
 80052b8:	4628      	mov	r0, r5
 80052ba:	f000 fba5 	bl	8005a08 <_sbrk_r>
 80052be:	1c43      	adds	r3, r0, #1
 80052c0:	d00a      	beq.n	80052d8 <sbrk_aligned+0x34>
 80052c2:	1cc4      	adds	r4, r0, #3
 80052c4:	f024 0403 	bic.w	r4, r4, #3
 80052c8:	42a0      	cmp	r0, r4
 80052ca:	d007      	beq.n	80052dc <sbrk_aligned+0x38>
 80052cc:	1a21      	subs	r1, r4, r0
 80052ce:	4628      	mov	r0, r5
 80052d0:	f000 fb9a 	bl	8005a08 <_sbrk_r>
 80052d4:	3001      	adds	r0, #1
 80052d6:	d101      	bne.n	80052dc <sbrk_aligned+0x38>
 80052d8:	f04f 34ff 	mov.w	r4, #4294967295
 80052dc:	4620      	mov	r0, r4
 80052de:	bd70      	pop	{r4, r5, r6, pc}
 80052e0:	200004f0 	.word	0x200004f0

080052e4 <_malloc_r>:
 80052e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052e8:	1ccd      	adds	r5, r1, #3
 80052ea:	f025 0503 	bic.w	r5, r5, #3
 80052ee:	3508      	adds	r5, #8
 80052f0:	2d0c      	cmp	r5, #12
 80052f2:	bf38      	it	cc
 80052f4:	250c      	movcc	r5, #12
 80052f6:	2d00      	cmp	r5, #0
 80052f8:	4607      	mov	r7, r0
 80052fa:	db01      	blt.n	8005300 <_malloc_r+0x1c>
 80052fc:	42a9      	cmp	r1, r5
 80052fe:	d905      	bls.n	800530c <_malloc_r+0x28>
 8005300:	230c      	movs	r3, #12
 8005302:	2600      	movs	r6, #0
 8005304:	603b      	str	r3, [r7, #0]
 8005306:	4630      	mov	r0, r6
 8005308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800530c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80053e0 <_malloc_r+0xfc>
 8005310:	f000 f868 	bl	80053e4 <__malloc_lock>
 8005314:	f8d8 3000 	ldr.w	r3, [r8]
 8005318:	461c      	mov	r4, r3
 800531a:	bb5c      	cbnz	r4, 8005374 <_malloc_r+0x90>
 800531c:	4629      	mov	r1, r5
 800531e:	4638      	mov	r0, r7
 8005320:	f7ff ffc0 	bl	80052a4 <sbrk_aligned>
 8005324:	1c43      	adds	r3, r0, #1
 8005326:	4604      	mov	r4, r0
 8005328:	d155      	bne.n	80053d6 <_malloc_r+0xf2>
 800532a:	f8d8 4000 	ldr.w	r4, [r8]
 800532e:	4626      	mov	r6, r4
 8005330:	2e00      	cmp	r6, #0
 8005332:	d145      	bne.n	80053c0 <_malloc_r+0xdc>
 8005334:	2c00      	cmp	r4, #0
 8005336:	d048      	beq.n	80053ca <_malloc_r+0xe6>
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	4631      	mov	r1, r6
 800533c:	4638      	mov	r0, r7
 800533e:	eb04 0903 	add.w	r9, r4, r3
 8005342:	f000 fb61 	bl	8005a08 <_sbrk_r>
 8005346:	4581      	cmp	r9, r0
 8005348:	d13f      	bne.n	80053ca <_malloc_r+0xe6>
 800534a:	6821      	ldr	r1, [r4, #0]
 800534c:	4638      	mov	r0, r7
 800534e:	1a6d      	subs	r5, r5, r1
 8005350:	4629      	mov	r1, r5
 8005352:	f7ff ffa7 	bl	80052a4 <sbrk_aligned>
 8005356:	3001      	adds	r0, #1
 8005358:	d037      	beq.n	80053ca <_malloc_r+0xe6>
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	442b      	add	r3, r5
 800535e:	6023      	str	r3, [r4, #0]
 8005360:	f8d8 3000 	ldr.w	r3, [r8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d038      	beq.n	80053da <_malloc_r+0xf6>
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	42a2      	cmp	r2, r4
 800536c:	d12b      	bne.n	80053c6 <_malloc_r+0xe2>
 800536e:	2200      	movs	r2, #0
 8005370:	605a      	str	r2, [r3, #4]
 8005372:	e00f      	b.n	8005394 <_malloc_r+0xb0>
 8005374:	6822      	ldr	r2, [r4, #0]
 8005376:	1b52      	subs	r2, r2, r5
 8005378:	d41f      	bmi.n	80053ba <_malloc_r+0xd6>
 800537a:	2a0b      	cmp	r2, #11
 800537c:	d917      	bls.n	80053ae <_malloc_r+0xca>
 800537e:	1961      	adds	r1, r4, r5
 8005380:	42a3      	cmp	r3, r4
 8005382:	6025      	str	r5, [r4, #0]
 8005384:	bf18      	it	ne
 8005386:	6059      	strne	r1, [r3, #4]
 8005388:	6863      	ldr	r3, [r4, #4]
 800538a:	bf08      	it	eq
 800538c:	f8c8 1000 	streq.w	r1, [r8]
 8005390:	5162      	str	r2, [r4, r5]
 8005392:	604b      	str	r3, [r1, #4]
 8005394:	4638      	mov	r0, r7
 8005396:	f104 060b 	add.w	r6, r4, #11
 800539a:	f000 f829 	bl	80053f0 <__malloc_unlock>
 800539e:	f026 0607 	bic.w	r6, r6, #7
 80053a2:	1d23      	adds	r3, r4, #4
 80053a4:	1af2      	subs	r2, r6, r3
 80053a6:	d0ae      	beq.n	8005306 <_malloc_r+0x22>
 80053a8:	1b9b      	subs	r3, r3, r6
 80053aa:	50a3      	str	r3, [r4, r2]
 80053ac:	e7ab      	b.n	8005306 <_malloc_r+0x22>
 80053ae:	42a3      	cmp	r3, r4
 80053b0:	6862      	ldr	r2, [r4, #4]
 80053b2:	d1dd      	bne.n	8005370 <_malloc_r+0x8c>
 80053b4:	f8c8 2000 	str.w	r2, [r8]
 80053b8:	e7ec      	b.n	8005394 <_malloc_r+0xb0>
 80053ba:	4623      	mov	r3, r4
 80053bc:	6864      	ldr	r4, [r4, #4]
 80053be:	e7ac      	b.n	800531a <_malloc_r+0x36>
 80053c0:	4634      	mov	r4, r6
 80053c2:	6876      	ldr	r6, [r6, #4]
 80053c4:	e7b4      	b.n	8005330 <_malloc_r+0x4c>
 80053c6:	4613      	mov	r3, r2
 80053c8:	e7cc      	b.n	8005364 <_malloc_r+0x80>
 80053ca:	230c      	movs	r3, #12
 80053cc:	4638      	mov	r0, r7
 80053ce:	603b      	str	r3, [r7, #0]
 80053d0:	f000 f80e 	bl	80053f0 <__malloc_unlock>
 80053d4:	e797      	b.n	8005306 <_malloc_r+0x22>
 80053d6:	6025      	str	r5, [r4, #0]
 80053d8:	e7dc      	b.n	8005394 <_malloc_r+0xb0>
 80053da:	605b      	str	r3, [r3, #4]
 80053dc:	deff      	udf	#255	; 0xff
 80053de:	bf00      	nop
 80053e0:	200004ec 	.word	0x200004ec

080053e4 <__malloc_lock>:
 80053e4:	4801      	ldr	r0, [pc, #4]	; (80053ec <__malloc_lock+0x8>)
 80053e6:	f7ff bf13 	b.w	8005210 <__retarget_lock_acquire_recursive>
 80053ea:	bf00      	nop
 80053ec:	200004e8 	.word	0x200004e8

080053f0 <__malloc_unlock>:
 80053f0:	4801      	ldr	r0, [pc, #4]	; (80053f8 <__malloc_unlock+0x8>)
 80053f2:	f7ff bf0e 	b.w	8005212 <__retarget_lock_release_recursive>
 80053f6:	bf00      	nop
 80053f8:	200004e8 	.word	0x200004e8

080053fc <__ssputs_r>:
 80053fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005400:	461f      	mov	r7, r3
 8005402:	688e      	ldr	r6, [r1, #8]
 8005404:	4682      	mov	sl, r0
 8005406:	42be      	cmp	r6, r7
 8005408:	460c      	mov	r4, r1
 800540a:	4690      	mov	r8, r2
 800540c:	680b      	ldr	r3, [r1, #0]
 800540e:	d82c      	bhi.n	800546a <__ssputs_r+0x6e>
 8005410:	898a      	ldrh	r2, [r1, #12]
 8005412:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005416:	d026      	beq.n	8005466 <__ssputs_r+0x6a>
 8005418:	6965      	ldr	r5, [r4, #20]
 800541a:	6909      	ldr	r1, [r1, #16]
 800541c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005420:	eba3 0901 	sub.w	r9, r3, r1
 8005424:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005428:	1c7b      	adds	r3, r7, #1
 800542a:	444b      	add	r3, r9
 800542c:	106d      	asrs	r5, r5, #1
 800542e:	429d      	cmp	r5, r3
 8005430:	bf38      	it	cc
 8005432:	461d      	movcc	r5, r3
 8005434:	0553      	lsls	r3, r2, #21
 8005436:	d527      	bpl.n	8005488 <__ssputs_r+0x8c>
 8005438:	4629      	mov	r1, r5
 800543a:	f7ff ff53 	bl	80052e4 <_malloc_r>
 800543e:	4606      	mov	r6, r0
 8005440:	b360      	cbz	r0, 800549c <__ssputs_r+0xa0>
 8005442:	464a      	mov	r2, r9
 8005444:	6921      	ldr	r1, [r4, #16]
 8005446:	f000 fafd 	bl	8005a44 <memcpy>
 800544a:	89a3      	ldrh	r3, [r4, #12]
 800544c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005454:	81a3      	strh	r3, [r4, #12]
 8005456:	6126      	str	r6, [r4, #16]
 8005458:	444e      	add	r6, r9
 800545a:	6026      	str	r6, [r4, #0]
 800545c:	463e      	mov	r6, r7
 800545e:	6165      	str	r5, [r4, #20]
 8005460:	eba5 0509 	sub.w	r5, r5, r9
 8005464:	60a5      	str	r5, [r4, #8]
 8005466:	42be      	cmp	r6, r7
 8005468:	d900      	bls.n	800546c <__ssputs_r+0x70>
 800546a:	463e      	mov	r6, r7
 800546c:	4632      	mov	r2, r6
 800546e:	4641      	mov	r1, r8
 8005470:	6820      	ldr	r0, [r4, #0]
 8005472:	f000 faaf 	bl	80059d4 <memmove>
 8005476:	2000      	movs	r0, #0
 8005478:	68a3      	ldr	r3, [r4, #8]
 800547a:	1b9b      	subs	r3, r3, r6
 800547c:	60a3      	str	r3, [r4, #8]
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	4433      	add	r3, r6
 8005482:	6023      	str	r3, [r4, #0]
 8005484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005488:	462a      	mov	r2, r5
 800548a:	f000 fae9 	bl	8005a60 <_realloc_r>
 800548e:	4606      	mov	r6, r0
 8005490:	2800      	cmp	r0, #0
 8005492:	d1e0      	bne.n	8005456 <__ssputs_r+0x5a>
 8005494:	4650      	mov	r0, sl
 8005496:	6921      	ldr	r1, [r4, #16]
 8005498:	f7ff febc 	bl	8005214 <_free_r>
 800549c:	230c      	movs	r3, #12
 800549e:	f8ca 3000 	str.w	r3, [sl]
 80054a2:	89a3      	ldrh	r3, [r4, #12]
 80054a4:	f04f 30ff 	mov.w	r0, #4294967295
 80054a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054ac:	81a3      	strh	r3, [r4, #12]
 80054ae:	e7e9      	b.n	8005484 <__ssputs_r+0x88>

080054b0 <_svfiprintf_r>:
 80054b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b4:	4698      	mov	r8, r3
 80054b6:	898b      	ldrh	r3, [r1, #12]
 80054b8:	4607      	mov	r7, r0
 80054ba:	061b      	lsls	r3, r3, #24
 80054bc:	460d      	mov	r5, r1
 80054be:	4614      	mov	r4, r2
 80054c0:	b09d      	sub	sp, #116	; 0x74
 80054c2:	d50e      	bpl.n	80054e2 <_svfiprintf_r+0x32>
 80054c4:	690b      	ldr	r3, [r1, #16]
 80054c6:	b963      	cbnz	r3, 80054e2 <_svfiprintf_r+0x32>
 80054c8:	2140      	movs	r1, #64	; 0x40
 80054ca:	f7ff ff0b 	bl	80052e4 <_malloc_r>
 80054ce:	6028      	str	r0, [r5, #0]
 80054d0:	6128      	str	r0, [r5, #16]
 80054d2:	b920      	cbnz	r0, 80054de <_svfiprintf_r+0x2e>
 80054d4:	230c      	movs	r3, #12
 80054d6:	603b      	str	r3, [r7, #0]
 80054d8:	f04f 30ff 	mov.w	r0, #4294967295
 80054dc:	e0d0      	b.n	8005680 <_svfiprintf_r+0x1d0>
 80054de:	2340      	movs	r3, #64	; 0x40
 80054e0:	616b      	str	r3, [r5, #20]
 80054e2:	2300      	movs	r3, #0
 80054e4:	9309      	str	r3, [sp, #36]	; 0x24
 80054e6:	2320      	movs	r3, #32
 80054e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054ec:	2330      	movs	r3, #48	; 0x30
 80054ee:	f04f 0901 	mov.w	r9, #1
 80054f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80054f6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005698 <_svfiprintf_r+0x1e8>
 80054fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054fe:	4623      	mov	r3, r4
 8005500:	469a      	mov	sl, r3
 8005502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005506:	b10a      	cbz	r2, 800550c <_svfiprintf_r+0x5c>
 8005508:	2a25      	cmp	r2, #37	; 0x25
 800550a:	d1f9      	bne.n	8005500 <_svfiprintf_r+0x50>
 800550c:	ebba 0b04 	subs.w	fp, sl, r4
 8005510:	d00b      	beq.n	800552a <_svfiprintf_r+0x7a>
 8005512:	465b      	mov	r3, fp
 8005514:	4622      	mov	r2, r4
 8005516:	4629      	mov	r1, r5
 8005518:	4638      	mov	r0, r7
 800551a:	f7ff ff6f 	bl	80053fc <__ssputs_r>
 800551e:	3001      	adds	r0, #1
 8005520:	f000 80a9 	beq.w	8005676 <_svfiprintf_r+0x1c6>
 8005524:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005526:	445a      	add	r2, fp
 8005528:	9209      	str	r2, [sp, #36]	; 0x24
 800552a:	f89a 3000 	ldrb.w	r3, [sl]
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 80a1 	beq.w	8005676 <_svfiprintf_r+0x1c6>
 8005534:	2300      	movs	r3, #0
 8005536:	f04f 32ff 	mov.w	r2, #4294967295
 800553a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800553e:	f10a 0a01 	add.w	sl, sl, #1
 8005542:	9304      	str	r3, [sp, #16]
 8005544:	9307      	str	r3, [sp, #28]
 8005546:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800554a:	931a      	str	r3, [sp, #104]	; 0x68
 800554c:	4654      	mov	r4, sl
 800554e:	2205      	movs	r2, #5
 8005550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005554:	4850      	ldr	r0, [pc, #320]	; (8005698 <_svfiprintf_r+0x1e8>)
 8005556:	f000 fa67 	bl	8005a28 <memchr>
 800555a:	9a04      	ldr	r2, [sp, #16]
 800555c:	b9d8      	cbnz	r0, 8005596 <_svfiprintf_r+0xe6>
 800555e:	06d0      	lsls	r0, r2, #27
 8005560:	bf44      	itt	mi
 8005562:	2320      	movmi	r3, #32
 8005564:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005568:	0711      	lsls	r1, r2, #28
 800556a:	bf44      	itt	mi
 800556c:	232b      	movmi	r3, #43	; 0x2b
 800556e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005572:	f89a 3000 	ldrb.w	r3, [sl]
 8005576:	2b2a      	cmp	r3, #42	; 0x2a
 8005578:	d015      	beq.n	80055a6 <_svfiprintf_r+0xf6>
 800557a:	4654      	mov	r4, sl
 800557c:	2000      	movs	r0, #0
 800557e:	f04f 0c0a 	mov.w	ip, #10
 8005582:	9a07      	ldr	r2, [sp, #28]
 8005584:	4621      	mov	r1, r4
 8005586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800558a:	3b30      	subs	r3, #48	; 0x30
 800558c:	2b09      	cmp	r3, #9
 800558e:	d94d      	bls.n	800562c <_svfiprintf_r+0x17c>
 8005590:	b1b0      	cbz	r0, 80055c0 <_svfiprintf_r+0x110>
 8005592:	9207      	str	r2, [sp, #28]
 8005594:	e014      	b.n	80055c0 <_svfiprintf_r+0x110>
 8005596:	eba0 0308 	sub.w	r3, r0, r8
 800559a:	fa09 f303 	lsl.w	r3, r9, r3
 800559e:	4313      	orrs	r3, r2
 80055a0:	46a2      	mov	sl, r4
 80055a2:	9304      	str	r3, [sp, #16]
 80055a4:	e7d2      	b.n	800554c <_svfiprintf_r+0x9c>
 80055a6:	9b03      	ldr	r3, [sp, #12]
 80055a8:	1d19      	adds	r1, r3, #4
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	9103      	str	r1, [sp, #12]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	bfbb      	ittet	lt
 80055b2:	425b      	neglt	r3, r3
 80055b4:	f042 0202 	orrlt.w	r2, r2, #2
 80055b8:	9307      	strge	r3, [sp, #28]
 80055ba:	9307      	strlt	r3, [sp, #28]
 80055bc:	bfb8      	it	lt
 80055be:	9204      	strlt	r2, [sp, #16]
 80055c0:	7823      	ldrb	r3, [r4, #0]
 80055c2:	2b2e      	cmp	r3, #46	; 0x2e
 80055c4:	d10c      	bne.n	80055e0 <_svfiprintf_r+0x130>
 80055c6:	7863      	ldrb	r3, [r4, #1]
 80055c8:	2b2a      	cmp	r3, #42	; 0x2a
 80055ca:	d134      	bne.n	8005636 <_svfiprintf_r+0x186>
 80055cc:	9b03      	ldr	r3, [sp, #12]
 80055ce:	3402      	adds	r4, #2
 80055d0:	1d1a      	adds	r2, r3, #4
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	9203      	str	r2, [sp, #12]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	bfb8      	it	lt
 80055da:	f04f 33ff 	movlt.w	r3, #4294967295
 80055de:	9305      	str	r3, [sp, #20]
 80055e0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800569c <_svfiprintf_r+0x1ec>
 80055e4:	2203      	movs	r2, #3
 80055e6:	4650      	mov	r0, sl
 80055e8:	7821      	ldrb	r1, [r4, #0]
 80055ea:	f000 fa1d 	bl	8005a28 <memchr>
 80055ee:	b138      	cbz	r0, 8005600 <_svfiprintf_r+0x150>
 80055f0:	2240      	movs	r2, #64	; 0x40
 80055f2:	9b04      	ldr	r3, [sp, #16]
 80055f4:	eba0 000a 	sub.w	r0, r0, sl
 80055f8:	4082      	lsls	r2, r0
 80055fa:	4313      	orrs	r3, r2
 80055fc:	3401      	adds	r4, #1
 80055fe:	9304      	str	r3, [sp, #16]
 8005600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005604:	2206      	movs	r2, #6
 8005606:	4826      	ldr	r0, [pc, #152]	; (80056a0 <_svfiprintf_r+0x1f0>)
 8005608:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800560c:	f000 fa0c 	bl	8005a28 <memchr>
 8005610:	2800      	cmp	r0, #0
 8005612:	d038      	beq.n	8005686 <_svfiprintf_r+0x1d6>
 8005614:	4b23      	ldr	r3, [pc, #140]	; (80056a4 <_svfiprintf_r+0x1f4>)
 8005616:	bb1b      	cbnz	r3, 8005660 <_svfiprintf_r+0x1b0>
 8005618:	9b03      	ldr	r3, [sp, #12]
 800561a:	3307      	adds	r3, #7
 800561c:	f023 0307 	bic.w	r3, r3, #7
 8005620:	3308      	adds	r3, #8
 8005622:	9303      	str	r3, [sp, #12]
 8005624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005626:	4433      	add	r3, r6
 8005628:	9309      	str	r3, [sp, #36]	; 0x24
 800562a:	e768      	b.n	80054fe <_svfiprintf_r+0x4e>
 800562c:	460c      	mov	r4, r1
 800562e:	2001      	movs	r0, #1
 8005630:	fb0c 3202 	mla	r2, ip, r2, r3
 8005634:	e7a6      	b.n	8005584 <_svfiprintf_r+0xd4>
 8005636:	2300      	movs	r3, #0
 8005638:	f04f 0c0a 	mov.w	ip, #10
 800563c:	4619      	mov	r1, r3
 800563e:	3401      	adds	r4, #1
 8005640:	9305      	str	r3, [sp, #20]
 8005642:	4620      	mov	r0, r4
 8005644:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005648:	3a30      	subs	r2, #48	; 0x30
 800564a:	2a09      	cmp	r2, #9
 800564c:	d903      	bls.n	8005656 <_svfiprintf_r+0x1a6>
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0c6      	beq.n	80055e0 <_svfiprintf_r+0x130>
 8005652:	9105      	str	r1, [sp, #20]
 8005654:	e7c4      	b.n	80055e0 <_svfiprintf_r+0x130>
 8005656:	4604      	mov	r4, r0
 8005658:	2301      	movs	r3, #1
 800565a:	fb0c 2101 	mla	r1, ip, r1, r2
 800565e:	e7f0      	b.n	8005642 <_svfiprintf_r+0x192>
 8005660:	ab03      	add	r3, sp, #12
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	462a      	mov	r2, r5
 8005666:	4638      	mov	r0, r7
 8005668:	4b0f      	ldr	r3, [pc, #60]	; (80056a8 <_svfiprintf_r+0x1f8>)
 800566a:	a904      	add	r1, sp, #16
 800566c:	f3af 8000 	nop.w
 8005670:	1c42      	adds	r2, r0, #1
 8005672:	4606      	mov	r6, r0
 8005674:	d1d6      	bne.n	8005624 <_svfiprintf_r+0x174>
 8005676:	89ab      	ldrh	r3, [r5, #12]
 8005678:	065b      	lsls	r3, r3, #25
 800567a:	f53f af2d 	bmi.w	80054d8 <_svfiprintf_r+0x28>
 800567e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005680:	b01d      	add	sp, #116	; 0x74
 8005682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005686:	ab03      	add	r3, sp, #12
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	462a      	mov	r2, r5
 800568c:	4638      	mov	r0, r7
 800568e:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <_svfiprintf_r+0x1f8>)
 8005690:	a904      	add	r1, sp, #16
 8005692:	f000 f87d 	bl	8005790 <_printf_i>
 8005696:	e7eb      	b.n	8005670 <_svfiprintf_r+0x1c0>
 8005698:	08005daf 	.word	0x08005daf
 800569c:	08005db5 	.word	0x08005db5
 80056a0:	08005db9 	.word	0x08005db9
 80056a4:	00000000 	.word	0x00000000
 80056a8:	080053fd 	.word	0x080053fd

080056ac <_printf_common>:
 80056ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056b0:	4616      	mov	r6, r2
 80056b2:	4699      	mov	r9, r3
 80056b4:	688a      	ldr	r2, [r1, #8]
 80056b6:	690b      	ldr	r3, [r1, #16]
 80056b8:	4607      	mov	r7, r0
 80056ba:	4293      	cmp	r3, r2
 80056bc:	bfb8      	it	lt
 80056be:	4613      	movlt	r3, r2
 80056c0:	6033      	str	r3, [r6, #0]
 80056c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056c6:	460c      	mov	r4, r1
 80056c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056cc:	b10a      	cbz	r2, 80056d2 <_printf_common+0x26>
 80056ce:	3301      	adds	r3, #1
 80056d0:	6033      	str	r3, [r6, #0]
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	0699      	lsls	r1, r3, #26
 80056d6:	bf42      	ittt	mi
 80056d8:	6833      	ldrmi	r3, [r6, #0]
 80056da:	3302      	addmi	r3, #2
 80056dc:	6033      	strmi	r3, [r6, #0]
 80056de:	6825      	ldr	r5, [r4, #0]
 80056e0:	f015 0506 	ands.w	r5, r5, #6
 80056e4:	d106      	bne.n	80056f4 <_printf_common+0x48>
 80056e6:	f104 0a19 	add.w	sl, r4, #25
 80056ea:	68e3      	ldr	r3, [r4, #12]
 80056ec:	6832      	ldr	r2, [r6, #0]
 80056ee:	1a9b      	subs	r3, r3, r2
 80056f0:	42ab      	cmp	r3, r5
 80056f2:	dc2b      	bgt.n	800574c <_printf_common+0xa0>
 80056f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056f8:	1e13      	subs	r3, r2, #0
 80056fa:	6822      	ldr	r2, [r4, #0]
 80056fc:	bf18      	it	ne
 80056fe:	2301      	movne	r3, #1
 8005700:	0692      	lsls	r2, r2, #26
 8005702:	d430      	bmi.n	8005766 <_printf_common+0xba>
 8005704:	4649      	mov	r1, r9
 8005706:	4638      	mov	r0, r7
 8005708:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800570c:	47c0      	blx	r8
 800570e:	3001      	adds	r0, #1
 8005710:	d023      	beq.n	800575a <_printf_common+0xae>
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	6922      	ldr	r2, [r4, #16]
 8005716:	f003 0306 	and.w	r3, r3, #6
 800571a:	2b04      	cmp	r3, #4
 800571c:	bf14      	ite	ne
 800571e:	2500      	movne	r5, #0
 8005720:	6833      	ldreq	r3, [r6, #0]
 8005722:	f04f 0600 	mov.w	r6, #0
 8005726:	bf08      	it	eq
 8005728:	68e5      	ldreq	r5, [r4, #12]
 800572a:	f104 041a 	add.w	r4, r4, #26
 800572e:	bf08      	it	eq
 8005730:	1aed      	subeq	r5, r5, r3
 8005732:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005736:	bf08      	it	eq
 8005738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800573c:	4293      	cmp	r3, r2
 800573e:	bfc4      	itt	gt
 8005740:	1a9b      	subgt	r3, r3, r2
 8005742:	18ed      	addgt	r5, r5, r3
 8005744:	42b5      	cmp	r5, r6
 8005746:	d11a      	bne.n	800577e <_printf_common+0xd2>
 8005748:	2000      	movs	r0, #0
 800574a:	e008      	b.n	800575e <_printf_common+0xb2>
 800574c:	2301      	movs	r3, #1
 800574e:	4652      	mov	r2, sl
 8005750:	4649      	mov	r1, r9
 8005752:	4638      	mov	r0, r7
 8005754:	47c0      	blx	r8
 8005756:	3001      	adds	r0, #1
 8005758:	d103      	bne.n	8005762 <_printf_common+0xb6>
 800575a:	f04f 30ff 	mov.w	r0, #4294967295
 800575e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005762:	3501      	adds	r5, #1
 8005764:	e7c1      	b.n	80056ea <_printf_common+0x3e>
 8005766:	2030      	movs	r0, #48	; 0x30
 8005768:	18e1      	adds	r1, r4, r3
 800576a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005774:	4422      	add	r2, r4
 8005776:	3302      	adds	r3, #2
 8005778:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800577c:	e7c2      	b.n	8005704 <_printf_common+0x58>
 800577e:	2301      	movs	r3, #1
 8005780:	4622      	mov	r2, r4
 8005782:	4649      	mov	r1, r9
 8005784:	4638      	mov	r0, r7
 8005786:	47c0      	blx	r8
 8005788:	3001      	adds	r0, #1
 800578a:	d0e6      	beq.n	800575a <_printf_common+0xae>
 800578c:	3601      	adds	r6, #1
 800578e:	e7d9      	b.n	8005744 <_printf_common+0x98>

08005790 <_printf_i>:
 8005790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005794:	7e0f      	ldrb	r7, [r1, #24]
 8005796:	4691      	mov	r9, r2
 8005798:	2f78      	cmp	r7, #120	; 0x78
 800579a:	4680      	mov	r8, r0
 800579c:	460c      	mov	r4, r1
 800579e:	469a      	mov	sl, r3
 80057a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057a6:	d807      	bhi.n	80057b8 <_printf_i+0x28>
 80057a8:	2f62      	cmp	r7, #98	; 0x62
 80057aa:	d80a      	bhi.n	80057c2 <_printf_i+0x32>
 80057ac:	2f00      	cmp	r7, #0
 80057ae:	f000 80d5 	beq.w	800595c <_printf_i+0x1cc>
 80057b2:	2f58      	cmp	r7, #88	; 0x58
 80057b4:	f000 80c1 	beq.w	800593a <_printf_i+0x1aa>
 80057b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057c0:	e03a      	b.n	8005838 <_printf_i+0xa8>
 80057c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057c6:	2b15      	cmp	r3, #21
 80057c8:	d8f6      	bhi.n	80057b8 <_printf_i+0x28>
 80057ca:	a101      	add	r1, pc, #4	; (adr r1, 80057d0 <_printf_i+0x40>)
 80057cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057d0:	08005829 	.word	0x08005829
 80057d4:	0800583d 	.word	0x0800583d
 80057d8:	080057b9 	.word	0x080057b9
 80057dc:	080057b9 	.word	0x080057b9
 80057e0:	080057b9 	.word	0x080057b9
 80057e4:	080057b9 	.word	0x080057b9
 80057e8:	0800583d 	.word	0x0800583d
 80057ec:	080057b9 	.word	0x080057b9
 80057f0:	080057b9 	.word	0x080057b9
 80057f4:	080057b9 	.word	0x080057b9
 80057f8:	080057b9 	.word	0x080057b9
 80057fc:	08005943 	.word	0x08005943
 8005800:	08005869 	.word	0x08005869
 8005804:	080058fd 	.word	0x080058fd
 8005808:	080057b9 	.word	0x080057b9
 800580c:	080057b9 	.word	0x080057b9
 8005810:	08005965 	.word	0x08005965
 8005814:	080057b9 	.word	0x080057b9
 8005818:	08005869 	.word	0x08005869
 800581c:	080057b9 	.word	0x080057b9
 8005820:	080057b9 	.word	0x080057b9
 8005824:	08005905 	.word	0x08005905
 8005828:	682b      	ldr	r3, [r5, #0]
 800582a:	1d1a      	adds	r2, r3, #4
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	602a      	str	r2, [r5, #0]
 8005830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005834:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005838:	2301      	movs	r3, #1
 800583a:	e0a0      	b.n	800597e <_printf_i+0x1ee>
 800583c:	6820      	ldr	r0, [r4, #0]
 800583e:	682b      	ldr	r3, [r5, #0]
 8005840:	0607      	lsls	r7, r0, #24
 8005842:	f103 0104 	add.w	r1, r3, #4
 8005846:	6029      	str	r1, [r5, #0]
 8005848:	d501      	bpl.n	800584e <_printf_i+0xbe>
 800584a:	681e      	ldr	r6, [r3, #0]
 800584c:	e003      	b.n	8005856 <_printf_i+0xc6>
 800584e:	0646      	lsls	r6, r0, #25
 8005850:	d5fb      	bpl.n	800584a <_printf_i+0xba>
 8005852:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005856:	2e00      	cmp	r6, #0
 8005858:	da03      	bge.n	8005862 <_printf_i+0xd2>
 800585a:	232d      	movs	r3, #45	; 0x2d
 800585c:	4276      	negs	r6, r6
 800585e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005862:	230a      	movs	r3, #10
 8005864:	4859      	ldr	r0, [pc, #356]	; (80059cc <_printf_i+0x23c>)
 8005866:	e012      	b.n	800588e <_printf_i+0xfe>
 8005868:	682b      	ldr	r3, [r5, #0]
 800586a:	6820      	ldr	r0, [r4, #0]
 800586c:	1d19      	adds	r1, r3, #4
 800586e:	6029      	str	r1, [r5, #0]
 8005870:	0605      	lsls	r5, r0, #24
 8005872:	d501      	bpl.n	8005878 <_printf_i+0xe8>
 8005874:	681e      	ldr	r6, [r3, #0]
 8005876:	e002      	b.n	800587e <_printf_i+0xee>
 8005878:	0641      	lsls	r1, r0, #25
 800587a:	d5fb      	bpl.n	8005874 <_printf_i+0xe4>
 800587c:	881e      	ldrh	r6, [r3, #0]
 800587e:	2f6f      	cmp	r7, #111	; 0x6f
 8005880:	bf0c      	ite	eq
 8005882:	2308      	moveq	r3, #8
 8005884:	230a      	movne	r3, #10
 8005886:	4851      	ldr	r0, [pc, #324]	; (80059cc <_printf_i+0x23c>)
 8005888:	2100      	movs	r1, #0
 800588a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800588e:	6865      	ldr	r5, [r4, #4]
 8005890:	2d00      	cmp	r5, #0
 8005892:	bfa8      	it	ge
 8005894:	6821      	ldrge	r1, [r4, #0]
 8005896:	60a5      	str	r5, [r4, #8]
 8005898:	bfa4      	itt	ge
 800589a:	f021 0104 	bicge.w	r1, r1, #4
 800589e:	6021      	strge	r1, [r4, #0]
 80058a0:	b90e      	cbnz	r6, 80058a6 <_printf_i+0x116>
 80058a2:	2d00      	cmp	r5, #0
 80058a4:	d04b      	beq.n	800593e <_printf_i+0x1ae>
 80058a6:	4615      	mov	r5, r2
 80058a8:	fbb6 f1f3 	udiv	r1, r6, r3
 80058ac:	fb03 6711 	mls	r7, r3, r1, r6
 80058b0:	5dc7      	ldrb	r7, [r0, r7]
 80058b2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058b6:	4637      	mov	r7, r6
 80058b8:	42bb      	cmp	r3, r7
 80058ba:	460e      	mov	r6, r1
 80058bc:	d9f4      	bls.n	80058a8 <_printf_i+0x118>
 80058be:	2b08      	cmp	r3, #8
 80058c0:	d10b      	bne.n	80058da <_printf_i+0x14a>
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	07de      	lsls	r6, r3, #31
 80058c6:	d508      	bpl.n	80058da <_printf_i+0x14a>
 80058c8:	6923      	ldr	r3, [r4, #16]
 80058ca:	6861      	ldr	r1, [r4, #4]
 80058cc:	4299      	cmp	r1, r3
 80058ce:	bfde      	ittt	le
 80058d0:	2330      	movle	r3, #48	; 0x30
 80058d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058da:	1b52      	subs	r2, r2, r5
 80058dc:	6122      	str	r2, [r4, #16]
 80058de:	464b      	mov	r3, r9
 80058e0:	4621      	mov	r1, r4
 80058e2:	4640      	mov	r0, r8
 80058e4:	f8cd a000 	str.w	sl, [sp]
 80058e8:	aa03      	add	r2, sp, #12
 80058ea:	f7ff fedf 	bl	80056ac <_printf_common>
 80058ee:	3001      	adds	r0, #1
 80058f0:	d14a      	bne.n	8005988 <_printf_i+0x1f8>
 80058f2:	f04f 30ff 	mov.w	r0, #4294967295
 80058f6:	b004      	add	sp, #16
 80058f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058fc:	6823      	ldr	r3, [r4, #0]
 80058fe:	f043 0320 	orr.w	r3, r3, #32
 8005902:	6023      	str	r3, [r4, #0]
 8005904:	2778      	movs	r7, #120	; 0x78
 8005906:	4832      	ldr	r0, [pc, #200]	; (80059d0 <_printf_i+0x240>)
 8005908:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	6829      	ldr	r1, [r5, #0]
 8005910:	061f      	lsls	r7, r3, #24
 8005912:	f851 6b04 	ldr.w	r6, [r1], #4
 8005916:	d402      	bmi.n	800591e <_printf_i+0x18e>
 8005918:	065f      	lsls	r7, r3, #25
 800591a:	bf48      	it	mi
 800591c:	b2b6      	uxthmi	r6, r6
 800591e:	07df      	lsls	r7, r3, #31
 8005920:	bf48      	it	mi
 8005922:	f043 0320 	orrmi.w	r3, r3, #32
 8005926:	6029      	str	r1, [r5, #0]
 8005928:	bf48      	it	mi
 800592a:	6023      	strmi	r3, [r4, #0]
 800592c:	b91e      	cbnz	r6, 8005936 <_printf_i+0x1a6>
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	f023 0320 	bic.w	r3, r3, #32
 8005934:	6023      	str	r3, [r4, #0]
 8005936:	2310      	movs	r3, #16
 8005938:	e7a6      	b.n	8005888 <_printf_i+0xf8>
 800593a:	4824      	ldr	r0, [pc, #144]	; (80059cc <_printf_i+0x23c>)
 800593c:	e7e4      	b.n	8005908 <_printf_i+0x178>
 800593e:	4615      	mov	r5, r2
 8005940:	e7bd      	b.n	80058be <_printf_i+0x12e>
 8005942:	682b      	ldr	r3, [r5, #0]
 8005944:	6826      	ldr	r6, [r4, #0]
 8005946:	1d18      	adds	r0, r3, #4
 8005948:	6961      	ldr	r1, [r4, #20]
 800594a:	6028      	str	r0, [r5, #0]
 800594c:	0635      	lsls	r5, r6, #24
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	d501      	bpl.n	8005956 <_printf_i+0x1c6>
 8005952:	6019      	str	r1, [r3, #0]
 8005954:	e002      	b.n	800595c <_printf_i+0x1cc>
 8005956:	0670      	lsls	r0, r6, #25
 8005958:	d5fb      	bpl.n	8005952 <_printf_i+0x1c2>
 800595a:	8019      	strh	r1, [r3, #0]
 800595c:	2300      	movs	r3, #0
 800595e:	4615      	mov	r5, r2
 8005960:	6123      	str	r3, [r4, #16]
 8005962:	e7bc      	b.n	80058de <_printf_i+0x14e>
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	2100      	movs	r1, #0
 8005968:	1d1a      	adds	r2, r3, #4
 800596a:	602a      	str	r2, [r5, #0]
 800596c:	681d      	ldr	r5, [r3, #0]
 800596e:	6862      	ldr	r2, [r4, #4]
 8005970:	4628      	mov	r0, r5
 8005972:	f000 f859 	bl	8005a28 <memchr>
 8005976:	b108      	cbz	r0, 800597c <_printf_i+0x1ec>
 8005978:	1b40      	subs	r0, r0, r5
 800597a:	6060      	str	r0, [r4, #4]
 800597c:	6863      	ldr	r3, [r4, #4]
 800597e:	6123      	str	r3, [r4, #16]
 8005980:	2300      	movs	r3, #0
 8005982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005986:	e7aa      	b.n	80058de <_printf_i+0x14e>
 8005988:	462a      	mov	r2, r5
 800598a:	4649      	mov	r1, r9
 800598c:	4640      	mov	r0, r8
 800598e:	6923      	ldr	r3, [r4, #16]
 8005990:	47d0      	blx	sl
 8005992:	3001      	adds	r0, #1
 8005994:	d0ad      	beq.n	80058f2 <_printf_i+0x162>
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	079b      	lsls	r3, r3, #30
 800599a:	d413      	bmi.n	80059c4 <_printf_i+0x234>
 800599c:	68e0      	ldr	r0, [r4, #12]
 800599e:	9b03      	ldr	r3, [sp, #12]
 80059a0:	4298      	cmp	r0, r3
 80059a2:	bfb8      	it	lt
 80059a4:	4618      	movlt	r0, r3
 80059a6:	e7a6      	b.n	80058f6 <_printf_i+0x166>
 80059a8:	2301      	movs	r3, #1
 80059aa:	4632      	mov	r2, r6
 80059ac:	4649      	mov	r1, r9
 80059ae:	4640      	mov	r0, r8
 80059b0:	47d0      	blx	sl
 80059b2:	3001      	adds	r0, #1
 80059b4:	d09d      	beq.n	80058f2 <_printf_i+0x162>
 80059b6:	3501      	adds	r5, #1
 80059b8:	68e3      	ldr	r3, [r4, #12]
 80059ba:	9903      	ldr	r1, [sp, #12]
 80059bc:	1a5b      	subs	r3, r3, r1
 80059be:	42ab      	cmp	r3, r5
 80059c0:	dcf2      	bgt.n	80059a8 <_printf_i+0x218>
 80059c2:	e7eb      	b.n	800599c <_printf_i+0x20c>
 80059c4:	2500      	movs	r5, #0
 80059c6:	f104 0619 	add.w	r6, r4, #25
 80059ca:	e7f5      	b.n	80059b8 <_printf_i+0x228>
 80059cc:	08005dc0 	.word	0x08005dc0
 80059d0:	08005dd1 	.word	0x08005dd1

080059d4 <memmove>:
 80059d4:	4288      	cmp	r0, r1
 80059d6:	b510      	push	{r4, lr}
 80059d8:	eb01 0402 	add.w	r4, r1, r2
 80059dc:	d902      	bls.n	80059e4 <memmove+0x10>
 80059de:	4284      	cmp	r4, r0
 80059e0:	4623      	mov	r3, r4
 80059e2:	d807      	bhi.n	80059f4 <memmove+0x20>
 80059e4:	1e43      	subs	r3, r0, #1
 80059e6:	42a1      	cmp	r1, r4
 80059e8:	d008      	beq.n	80059fc <memmove+0x28>
 80059ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059f2:	e7f8      	b.n	80059e6 <memmove+0x12>
 80059f4:	4601      	mov	r1, r0
 80059f6:	4402      	add	r2, r0
 80059f8:	428a      	cmp	r2, r1
 80059fa:	d100      	bne.n	80059fe <memmove+0x2a>
 80059fc:	bd10      	pop	{r4, pc}
 80059fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a06:	e7f7      	b.n	80059f8 <memmove+0x24>

08005a08 <_sbrk_r>:
 8005a08:	b538      	push	{r3, r4, r5, lr}
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	4d05      	ldr	r5, [pc, #20]	; (8005a24 <_sbrk_r+0x1c>)
 8005a0e:	4604      	mov	r4, r0
 8005a10:	4608      	mov	r0, r1
 8005a12:	602b      	str	r3, [r5, #0]
 8005a14:	f7fc f8de 	bl	8001bd4 <_sbrk>
 8005a18:	1c43      	adds	r3, r0, #1
 8005a1a:	d102      	bne.n	8005a22 <_sbrk_r+0x1a>
 8005a1c:	682b      	ldr	r3, [r5, #0]
 8005a1e:	b103      	cbz	r3, 8005a22 <_sbrk_r+0x1a>
 8005a20:	6023      	str	r3, [r4, #0]
 8005a22:	bd38      	pop	{r3, r4, r5, pc}
 8005a24:	200004e4 	.word	0x200004e4

08005a28 <memchr>:
 8005a28:	4603      	mov	r3, r0
 8005a2a:	b510      	push	{r4, lr}
 8005a2c:	b2c9      	uxtb	r1, r1
 8005a2e:	4402      	add	r2, r0
 8005a30:	4293      	cmp	r3, r2
 8005a32:	4618      	mov	r0, r3
 8005a34:	d101      	bne.n	8005a3a <memchr+0x12>
 8005a36:	2000      	movs	r0, #0
 8005a38:	e003      	b.n	8005a42 <memchr+0x1a>
 8005a3a:	7804      	ldrb	r4, [r0, #0]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	428c      	cmp	r4, r1
 8005a40:	d1f6      	bne.n	8005a30 <memchr+0x8>
 8005a42:	bd10      	pop	{r4, pc}

08005a44 <memcpy>:
 8005a44:	440a      	add	r2, r1
 8005a46:	4291      	cmp	r1, r2
 8005a48:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a4c:	d100      	bne.n	8005a50 <memcpy+0xc>
 8005a4e:	4770      	bx	lr
 8005a50:	b510      	push	{r4, lr}
 8005a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a56:	4291      	cmp	r1, r2
 8005a58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a5c:	d1f9      	bne.n	8005a52 <memcpy+0xe>
 8005a5e:	bd10      	pop	{r4, pc}

08005a60 <_realloc_r>:
 8005a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a64:	4680      	mov	r8, r0
 8005a66:	4614      	mov	r4, r2
 8005a68:	460e      	mov	r6, r1
 8005a6a:	b921      	cbnz	r1, 8005a76 <_realloc_r+0x16>
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a72:	f7ff bc37 	b.w	80052e4 <_malloc_r>
 8005a76:	b92a      	cbnz	r2, 8005a84 <_realloc_r+0x24>
 8005a78:	f7ff fbcc 	bl	8005214 <_free_r>
 8005a7c:	4625      	mov	r5, r4
 8005a7e:	4628      	mov	r0, r5
 8005a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a84:	f000 f81b 	bl	8005abe <_malloc_usable_size_r>
 8005a88:	4284      	cmp	r4, r0
 8005a8a:	4607      	mov	r7, r0
 8005a8c:	d802      	bhi.n	8005a94 <_realloc_r+0x34>
 8005a8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a92:	d812      	bhi.n	8005aba <_realloc_r+0x5a>
 8005a94:	4621      	mov	r1, r4
 8005a96:	4640      	mov	r0, r8
 8005a98:	f7ff fc24 	bl	80052e4 <_malloc_r>
 8005a9c:	4605      	mov	r5, r0
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	d0ed      	beq.n	8005a7e <_realloc_r+0x1e>
 8005aa2:	42bc      	cmp	r4, r7
 8005aa4:	4622      	mov	r2, r4
 8005aa6:	4631      	mov	r1, r6
 8005aa8:	bf28      	it	cs
 8005aaa:	463a      	movcs	r2, r7
 8005aac:	f7ff ffca 	bl	8005a44 <memcpy>
 8005ab0:	4631      	mov	r1, r6
 8005ab2:	4640      	mov	r0, r8
 8005ab4:	f7ff fbae 	bl	8005214 <_free_r>
 8005ab8:	e7e1      	b.n	8005a7e <_realloc_r+0x1e>
 8005aba:	4635      	mov	r5, r6
 8005abc:	e7df      	b.n	8005a7e <_realloc_r+0x1e>

08005abe <_malloc_usable_size_r>:
 8005abe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ac2:	1f18      	subs	r0, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	bfbc      	itt	lt
 8005ac8:	580b      	ldrlt	r3, [r1, r0]
 8005aca:	18c0      	addlt	r0, r0, r3
 8005acc:	4770      	bx	lr
	...

08005ad0 <_init>:
 8005ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad2:	bf00      	nop
 8005ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ad6:	bc08      	pop	{r3}
 8005ad8:	469e      	mov	lr, r3
 8005ada:	4770      	bx	lr

08005adc <_fini>:
 8005adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ade:	bf00      	nop
 8005ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ae2:	bc08      	pop	{r3}
 8005ae4:	469e      	mov	lr, r3
 8005ae6:	4770      	bx	lr
